
GENEV_GO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006004  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006448  08006448  0002057c  2**0
                  CONTENTS
  4 .ARM          00000008  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006450  08006450  0002057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006450  08006450  00016450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000057c  20000000  08006458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000057c  080069d4  0002057c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b0  080069d4  000208b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002057c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002b44c  00000000  00000000  000205ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00043065  00000000  00000000  0004b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006945  00000000  00000000  0008ea5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  000953a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000a5bd4  00000000  00000000  000968c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002f08  00000000  00000000  0013c498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e066  00000000  00000000  0013f3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  0015d406  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bcc  00000000  00000000  0015d4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00016603  00000000  00000000  001610a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000057c 	.word	0x2000057c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006180 	.word	0x08006180

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000580 	.word	0x20000580
 80001d0:	08006180 	.word	0x08006180

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000504 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004d2:	e003      	b.n	80004dc <LoopCopyDataInit>

080004d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004da:	3104      	adds	r1, #4

080004dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004e4:	d3f6      	bcc.n	80004d4 <CopyDataInit>
  ldr  r2, =_sbss
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004e8:	e002      	b.n	80004f0 <LoopFillZerobss>

080004ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004ec:	f842 3b04 	str.w	r3, [r2], #4

080004f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004f4:	d3f9      	bcc.n	80004ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004f6:	f002 fb01 	bl	8002afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004fa:	f005 fe15 	bl	8006128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004fe:	f000 f865 	bl	80005cc <main>
  bx  lr    
 8000502:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000504:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000508:	08006458 	.word	0x08006458
  ldr  r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000510:	2000057c 	.word	0x2000057c
  ldr  r2, =_sbss
 8000514:	2000057c 	.word	0x2000057c
  ldr  r3, = _ebss
 8000518:	200008b0 	.word	0x200008b0

0800051c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800051c:	e7fe      	b.n	800051c <BusFault_Handler>
	...

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	2300      	movs	r3, #0
{
 8000524:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800052a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000532:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	4923      	ldr	r1, [pc, #140]	; (80005c4 <SystemClock_Config+0xa4>)
 8000538:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053a:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800053e:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000544:	6408      	str	r0, [r1, #64]	; 0x40
 8000546:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000548:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800054c:	9100      	str	r1, [sp, #0]
 800054e:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	6813      	ldr	r3, [r2, #0]
 8000554:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800055c:	6013      	str	r3, [r2, #0]
 800055e:	6813      	ldr	r3, [r2, #0]
 8000560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000564:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000566:	2401      	movs	r4, #1
 8000568:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2202      	movs	r2, #2
 800056e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000572:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800057a:	2404      	movs	r4, #4
 800057c:	2554      	movs	r5, #84	; 0x54
 800057e:	2202      	movs	r2, #2
 8000580:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 84;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8000588:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800058c:	9901      	ldr	r1, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f002 fec3 	bl	8003318 <HAL_RCC_OscConfig>
 8000592:	b108      	cbz	r0, 8000598 <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000596:	e7fe      	b.n	8000596 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000598:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	240f      	movs	r4, #15
 800059c:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a6:	a802      	add	r0, sp, #8
 80005a8:	2102      	movs	r1, #2
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80005ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b2:	f003 f8cd 	bl	8003750 <HAL_RCC_ClockConfig>
 80005b6:	b108      	cbz	r0, 80005bc <SystemClock_Config+0x9c>
 80005b8:	b672      	cpsid	i
  while (1)
 80005ba:	e7fe      	b.n	80005ba <SystemClock_Config+0x9a>
  HAL_RCC_EnableCSS();
 80005bc:	f003 f88c 	bl	80036d8 <HAL_RCC_EnableCSS>
}
 80005c0:	b015      	add	sp, #84	; 0x54
 80005c2:	bd30      	pop	{r4, r5, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <main>:
{
 80005cc:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	2400      	movs	r4, #0
{
 80005d0:	b09c      	sub	sp, #112	; 0x70
  HAL_Init();
 80005d2:	f002 fac5 	bl	8002b60 <HAL_Init>
  SystemClock_Config();
 80005d6:	f7ff ffa3 	bl	8000520 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80005de:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4ba4      	ldr	r3, [pc, #656]	; (8000874 <main+0x2a8>)
 80005e4:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ea:	48a3      	ldr	r0, [pc, #652]	; (8000878 <main+0x2ac>)
  hadc1.Instance = ADC1;
 80005ec:	4da3      	ldr	r5, [pc, #652]	; (800087c <main+0x2b0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	f042 0204 	orr.w	r2, r2, #4
 80005f2:	631a      	str	r2, [r3, #48]	; 0x30
 80005f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f6:	f002 0204 	and.w	r2, r2, #4
 80005fa:	9200      	str	r2, [sp, #0]
 80005fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	9401      	str	r4, [sp, #4]
 8000600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000602:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000606:	631a      	str	r2, [r3, #48]	; 0x30
 8000608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800060e:	9201      	str	r2, [sp, #4]
 8000610:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	9402      	str	r4, [sp, #8]
 8000614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000616:	f042 0201 	orr.w	r2, r2, #1
 800061a:	631a      	str	r2, [r3, #48]	; 0x30
 800061c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061e:	f002 0201 	and.w	r2, r2, #1
 8000622:	9202      	str	r2, [sp, #8]
 8000624:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	9403      	str	r4, [sp, #12]
 8000628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062a:	f042 0202 	orr.w	r2, r2, #2
 800062e:	631a      	str	r2, [r3, #48]	; 0x30
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000638:	4622      	mov	r2, r4
 800063a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800063e:	f002 fe67 	bl	8003310 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000642:	4b8f      	ldr	r3, [pc, #572]	; (8000880 <main+0x2b4>)
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000644:	488f      	ldr	r0, [pc, #572]	; (8000884 <main+0x2b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000648:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800064c:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800064e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = LD2_Pin;
 8000652:	2600      	movs	r6, #0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000654:	f002 fd68 	bl	8003128 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8000658:	2700      	movs	r7, #0
 800065a:	2301      	movs	r3, #1
 800065c:	2220      	movs	r2, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800065e:	4886      	ldr	r0, [pc, #536]	; (8000878 <main+0x2ac>)
 8000660:	a914      	add	r1, sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000662:	f04f 0920 	mov.w	r9, #32
  GPIO_InitStruct.Pin = LD2_Pin;
 8000666:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800066a:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800066e:	f002 fd5b 	bl	8003128 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000672:	4621      	mov	r1, r4
 8000674:	464a      	mov	r2, r9
 8000676:	a814      	add	r0, sp, #80	; 0x50
 8000678:	f005 fd7a 	bl	8006170 <memset>
  hadc1.Instance = ADC1;
 800067c:	4a82      	ldr	r2, [pc, #520]	; (8000888 <main+0x2bc>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067e:	4983      	ldr	r1, [pc, #524]	; (800088c <main+0x2c0>)
  hadc1.Instance = ADC1;
 8000680:	602a      	str	r2, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.ScanConvMode = ENABLE;
 8000686:	f04f 0801 	mov.w	r8, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800068a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800068e:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000690:	4628      	mov	r0, r5
  hadc1.Init.NbrOfConversion = 2;
 8000692:	2302      	movs	r3, #2
  ADC_ChannelConfTypeDef sConfig = {0};
 8000694:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000698:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069c:	e9c5 8804 	strd	r8, r8, [r5, #16]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a0:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a2:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a8:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006aa:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ae:	62a9      	str	r1, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006b0:	60ea      	str	r2, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006b2:	61eb      	str	r3, [r5, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b4:	f002 fa80 	bl	8002bb8 <HAL_ADC_Init>
 80006b8:	b108      	cbz	r0, 80006be <main+0xf2>
 80006ba:	b672      	cpsid	i
  while (1)
 80006bc:	e7fe      	b.n	80006bc <main+0xf0>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006c4:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80006c8:	2200      	movs	r2, #0
 80006ca:	2301      	movs	r3, #1
 80006cc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006d0:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
  sConfigInjected.InjectedNbrOfConversion = 3;
 80006d4:	2403      	movs	r4, #3
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80006d6:	2201      	movs	r2, #1
 80006d8:	2300      	movs	r3, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006da:	a914      	add	r1, sp, #80	; 0x50
 80006dc:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80006de:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 80006e2:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006e4:	f002 fbbe 	bl	8002e64 <HAL_ADCEx_InjectedConfigChannel>
 80006e8:	b108      	cbz	r0, 80006ee <main+0x122>
 80006ea:	b672      	cpsid	i
  while (1)
 80006ec:	e7fe      	b.n	80006ec <main+0x120>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 80006ee:	220b      	movs	r2, #11
 80006f0:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006f2:	a914      	add	r1, sp, #80	; 0x50
 80006f4:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 80006f6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006fa:	f002 fbb3 	bl	8002e64 <HAL_ADCEx_InjectedConfigChannel>
 80006fe:	b108      	cbz	r0, 8000704 <main+0x138>
 8000700:	b672      	cpsid	i
  while (1)
 8000702:	e7fe      	b.n	8000702 <main+0x136>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000704:	220a      	movs	r2, #10
 8000706:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000708:	a914      	add	r1, sp, #80	; 0x50
 800070a:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 800070c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000710:	f002 fba8 	bl	8002e64 <HAL_ADCEx_InjectedConfigChannel>
 8000714:	b108      	cbz	r0, 800071a <main+0x14e>
 8000716:	b672      	cpsid	i
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0x14c>
  sConfig.Channel = ADC_CHANNEL_1;
 800071a:	2201      	movs	r2, #1
 800071c:	2301      	movs	r3, #1
 800071e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_1;
 8000724:	2300      	movs	r3, #0
 8000726:	2202      	movs	r2, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000728:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 800072a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072e:	f002 faf1 	bl	8002d14 <HAL_ADC_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	b108      	cbz	r0, 800073a <main+0x16e>
 8000736:	b672      	cpsid	i
  while (1)
 8000738:	e7fe      	b.n	8000738 <main+0x16c>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_12;
 800073c:	240c      	movs	r4, #12
 800073e:	2502      	movs	r5, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_12;
 8000742:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  sConfig.Offset = 0;
 8000746:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	f002 fae4 	bl	8002d14 <HAL_ADC_ConfigChannel>
 800074c:	4604      	mov	r4, r0
 800074e:	b108      	cbz	r0, 8000754 <main+0x188>
 8000750:	b672      	cpsid	i
  while (1)
 8000752:	e7fe      	b.n	8000752 <main+0x186>
  htim1.Instance = TIM1;
 8000754:	4d4e      	ldr	r5, [pc, #312]	; (8000890 <main+0x2c4>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000756:	9006      	str	r0, [sp, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000758:	4601      	mov	r1, r0
 800075a:	464a      	mov	r2, r9
 800075c:	a814      	add	r0, sp, #80	; 0x50
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000762:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000766:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800076a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800076e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000772:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000774:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000776:	9405      	str	r4, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000778:	f005 fcfa 	bl	8006170 <memset>
  htim1.Instance = TIM1;
 800077c:	4945      	ldr	r1, [pc, #276]	; (8000894 <main+0x2c8>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800077e:	606c      	str	r4, [r5, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000780:	f44f 62d2 	mov.w	r2, #1680	; 0x690
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000784:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000788:	4628      	mov	r0, r5
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	e9c5 8405 	strd	r8, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800078e:	e9c5 2303 	strd	r2, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000792:	f8c5 9008 	str.w	r9, [r5, #8]
  htim1.Instance = TIM1;
 8000796:	6029      	str	r1, [r5, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000798:	f003 f89e 	bl	80038d8 <HAL_TIM_Base_Init>
 800079c:	b108      	cbz	r0, 80007a2 <main+0x1d6>
 800079e:	b672      	cpsid	i
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <main+0x1d4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007a2:	4628      	mov	r0, r5
 80007a4:	f003 f906 	bl	80039b4 <HAL_TIM_PWM_Init>
 80007a8:	b108      	cbz	r0, 80007ae <main+0x1e2>
 80007aa:	b672      	cpsid	i
  while (1)
 80007ac:	e7fe      	b.n	80007ac <main+0x1e0>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007ae:	2206      	movs	r2, #6
 80007b0:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007b2:	a906      	add	r1, sp, #24
 80007b4:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007ba:	f003 fb0b 	bl	8003dd4 <HAL_TIM_SlaveConfigSynchro>
 80007be:	b108      	cbz	r0, 80007c4 <main+0x1f8>
 80007c0:	b672      	cpsid	i
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <main+0x1f6>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c4:	a904      	add	r1, sp, #16
 80007c6:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	e9cd 6704 	strd	r6, r7, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007cc:	f003 fc8c 	bl	80040e8 <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	b108      	cbz	r0, 80007d6 <main+0x20a>
 80007d2:	b672      	cpsid	i
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <main+0x208>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	2060      	movs	r0, #96	; 0x60
 80007d8:	2100      	movs	r1, #0
 80007da:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80007de:	2400      	movs	r4, #0
 80007e0:	2508      	movs	r5, #8
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80007e2:	f44f 7300 	mov.w	r3, #512	; 0x200
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e6:	2600      	movs	r6, #0
 80007e8:	2700      	movs	r7, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ea:	4829      	ldr	r0, [pc, #164]	; (8000890 <main+0x2c4>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80007ec:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ee:	2200      	movs	r2, #0
 80007f0:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f2:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 80007f6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fa:	f003 f947 	bl	8003a8c <HAL_TIM_PWM_ConfigChannel>
 80007fe:	b108      	cbz	r0, 8000804 <main+0x238>
 8000800:	b672      	cpsid	i
  while (1)
 8000802:	e7fe      	b.n	8000802 <main+0x236>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000804:	4822      	ldr	r0, [pc, #136]	; (8000890 <main+0x2c4>)
 8000806:	2204      	movs	r2, #4
 8000808:	a90c      	add	r1, sp, #48	; 0x30
 800080a:	f003 f93f 	bl	8003a8c <HAL_TIM_PWM_ConfigChannel>
 800080e:	b108      	cbz	r0, 8000814 <main+0x248>
 8000810:	b672      	cpsid	i
  while (1)
 8000812:	e7fe      	b.n	8000812 <main+0x246>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000814:	481e      	ldr	r0, [pc, #120]	; (8000890 <main+0x2c4>)
 8000816:	2208      	movs	r2, #8
 8000818:	a90c      	add	r1, sp, #48	; 0x30
 800081a:	f003 f937 	bl	8003a8c <HAL_TIM_PWM_ConfigChannel>
 800081e:	b108      	cbz	r0, 8000824 <main+0x258>
 8000820:	b672      	cpsid	i
  while (1)
 8000822:	e7fe      	b.n	8000822 <main+0x256>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000824:	2470      	movs	r4, #112	; 0x70
 8000826:	f240 658f 	movw	r5, #1679	; 0x68f
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800082a:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800082c:	220c      	movs	r2, #12
 800082e:	4818      	ldr	r0, [pc, #96]	; (8000890 <main+0x2c4>)
 8000830:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000832:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000836:	f003 f929 	bl	8003a8c <HAL_TIM_PWM_ConfigChannel>
 800083a:	b108      	cbz	r0, 8000840 <main+0x274>
 800083c:	b672      	cpsid	i
  while (1)
 800083e:	e7fe      	b.n	800083e <main+0x272>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000848:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800084c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000850:	2321      	movs	r3, #33	; 0x21
 8000852:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000856:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800085c:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <main+0x2c4>)
 8000860:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000862:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000866:	f003 fc79 	bl	800415c <HAL_TIMEx_ConfigBreakDeadTime>
 800086a:	4604      	mov	r4, r0
 800086c:	b1a0      	cbz	r0, 8000898 <main+0x2cc>
 800086e:	b672      	cpsid	i
  while (1)
 8000870:	e7fe      	b.n	8000870 <main+0x2a4>
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000
 800087c:	200005c8 	.word	0x200005c8
 8000880:	10210000 	.word	0x10210000
 8000884:	40020800 	.word	0x40020800
 8000888:	40012000 	.word	0x40012000
 800088c:	0f000001 	.word	0x0f000001
 8000890:	20000610 	.word	0x20000610
 8000894:	40010000 	.word	0x40010000
  htim2.Instance = TIM2;
 8000898:	4d42      	ldr	r5, [pc, #264]	; (80009a4 <main+0x3d8>)
  HAL_TIM_MspPostInit(&htim1);
 800089a:	4843      	ldr	r0, [pc, #268]	; (80009a8 <main+0x3dc>)
 800089c:	f001 fbbe 	bl	800201c <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80008a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 80008a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a8:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80008ae:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80008b2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 80008b6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ba:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c2:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c4:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 80008c6:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 80008c8:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ca:	f003 f805 	bl	80038d8 <HAL_TIM_Base_Init>
 80008ce:	b108      	cbz	r0, 80008d4 <main+0x308>
 80008d0:	b672      	cpsid	i
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <main+0x306>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d8:	a914      	add	r1, sp, #80	; 0x50
 80008da:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008de:	f003 f9d5 	bl	8003c8c <HAL_TIM_ConfigClockSource>
 80008e2:	b108      	cbz	r0, 80008e8 <main+0x31c>
 80008e4:	b672      	cpsid	i
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <main+0x31a>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008e8:	2205      	movs	r2, #5
 80008ea:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80008ec:	a90c      	add	r1, sp, #48	; 0x30
 80008ee:	4628      	mov	r0, r5
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008f0:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 80008f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80008f8:	f003 fb9c 	bl	8004034 <HAL_TIMEx_HallSensor_Init>
 80008fc:	b108      	cbz	r0, 8000902 <main+0x336>
 80008fe:	b672      	cpsid	i
  while (1)
 8000900:	e7fe      	b.n	8000900 <main+0x334>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000902:	2250      	movs	r2, #80	; 0x50
 8000904:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000906:	a906      	add	r1, sp, #24
 8000908:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800090a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800090e:	f003 fbeb 	bl	80040e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	4602      	mov	r2, r0
 8000914:	b108      	cbz	r0, 800091a <main+0x34e>
 8000916:	b672      	cpsid	i
  while (1)
 8000918:	e7fe      	b.n	8000918 <main+0x34c>
  huart2.Instance = USART2;
 800091a:	4824      	ldr	r0, [pc, #144]	; (80009ac <main+0x3e0>)
 800091c:	4d24      	ldr	r5, [pc, #144]	; (80009b0 <main+0x3e4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	6082      	str	r2, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8000920:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	210c      	movs	r1, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8000926:	e9c0 2203 	strd	r2, r2, [r0, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092a:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart2.Init.BaudRate = 115200;
 800092e:	e9c0 5400 	strd	r5, r4, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000932:	6141      	str	r1, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000934:	f003 fc3c 	bl	80041b0 <HAL_UART_Init>
 8000938:	b108      	cbz	r0, 800093e <main+0x372>
 800093a:	b672      	cpsid	i
  while (1)
 800093c:	e7fe      	b.n	800093c <main+0x370>
  MX_MotorControl_Init();
 800093e:	f001 f92f 	bl	8001ba0 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2102      	movs	r1, #2
 8000946:	2012      	movs	r0, #18
 8000948:	f002 fb88 	bl	800305c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800094c:	2012      	movs	r0, #18
 800094e:	f002 fbbd 	bl	80030cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	4611      	mov	r1, r2
 8000956:	2019      	movs	r0, #25
 8000958:	f002 fb80 	bl	800305c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800095c:	2019      	movs	r0, #25
 800095e:	f002 fbb5 	bl	80030cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	2104      	movs	r1, #4
 8000966:	2018      	movs	r0, #24
 8000968:	f002 fb78 	bl	800305c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800096c:	2018      	movs	r0, #24
 800096e:	f002 fbad 	bl	80030cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2103      	movs	r1, #3
 8000976:	201c      	movs	r0, #28
 8000978:	f002 fb70 	bl	800305c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800097c:	201c      	movs	r0, #28
 800097e:	f002 fba5 	bl	80030cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000982:	2201      	movs	r2, #1
 8000984:	2103      	movs	r1, #3
 8000986:	2026      	movs	r0, #38	; 0x26
 8000988:	f002 fb68 	bl	800305c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800098c:	2026      	movs	r0, #38	; 0x26
 800098e:	f002 fb9d 	bl	80030cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000992:	2028      	movs	r0, #40	; 0x28
 8000994:	2200      	movs	r2, #0
 8000996:	2103      	movs	r1, #3
 8000998:	f002 fb60 	bl	800305c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800099c:	2028      	movs	r0, #40	; 0x28
 800099e:	f002 fb95 	bl	80030cc <HAL_NVIC_EnableIRQ>
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <main+0x3d6>
 80009a4:	20000650 	.word	0x20000650
 80009a8:	20000610 	.word	0x20000610
 80009ac:	20000690 	.word	0x20000690
 80009b0:	40004400 	.word	0x40004400

080009b4 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 80009b4:	4b01      	ldr	r3, [pc, #4]	; (80009bc <MC_StartMotor1+0x8>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	f000 b83c 	b.w	8000a34 <MCI_StartMotor>
 80009bc:	200007b8 	.word	0x200007b8

080009c0 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 80009c0:	4b01      	ldr	r3, [pc, #4]	; (80009c8 <MC_StopMotor1+0x8>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	f000 b840 	b.w	8000a48 <MCI_StopMotor>
 80009c8:	200007b8 	.word	0x200007b8

080009cc <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 80009cc:	4b01      	ldr	r3, [pc, #4]	; (80009d4 <MC_GetSTMStateMotor1+0x8>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	f000 b882 	b.w	8000ad8 <MCI_GetSTMState>
 80009d4:	200007b8 	.word	0x200007b8

080009d8 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 80009d8:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80009da:	2400      	movs	r4, #0
 80009dc:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 80009de:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 80009e0:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 80009e2:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 80009e4:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 80009e6:	e9c0 1200 	strd	r1, r2, [r0]
}
 80009ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 80009ee:	6083      	str	r3, [r0, #8]
}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 80009f4:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80009f6:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80009fa:	2401      	movs	r4, #1
 80009fc:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 80009fe:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000a00:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000a04:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a06:	8303      	strh	r3, [r0, #24]
}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000a0c:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a0e:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000a10:	2402      	movs	r4, #2
 8000a12:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000a14:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000a16:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000a1a:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a1c:	8303      	strh	r3, [r0, #24]
}
 8000a1e:	4770      	bx	lr

08000a20 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000a20:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000a22:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a24:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 8000a26:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000a2a:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a2c:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000a2e:	b002      	add	sp, #8
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000a34:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000a36:	2103      	movs	r1, #3
{
 8000a38:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000a3a:	6800      	ldr	r0, [r0, #0]
 8000a3c:	f005 f9b2 	bl	8005da4 <STM_NextState>

  if ( RetVal == true )
 8000a40:	b108      	cbz	r0, 8000a46 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a42:	2301      	movs	r3, #1
 8000a44:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000a46:	bd10      	pop	{r4, pc}

08000a48 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000a48:	6800      	ldr	r0, [r0, #0]
 8000a4a:	2107      	movs	r1, #7
 8000a4c:	f005 b9aa 	b.w	8005da4 <STM_NextState>

08000a50 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000a50:	6800      	ldr	r0, [r0, #0]
 8000a52:	f005 ba1d 	b.w	8005e90 <STM_FaultAcknowledged>
 8000a56:	bf00      	nop

08000a58 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000a58:	6800      	ldr	r0, [r0, #0]
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	f005 b9a2 	b.w	8005da4 <STM_NextState>

08000a60 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000a60:	b178      	cbz	r0, 8000a82 <MCI_ExecBufferedCommands+0x22>
{
 8000a62:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000a64:	7e03      	ldrb	r3, [r0, #24]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	4604      	mov	r4, r0
 8000a6a:	d000      	beq.n	8000a6e <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000a6c:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000a6e:	7b01      	ldrb	r1, [r0, #12]
 8000a70:	2902      	cmp	r1, #2
 8000a72:	d020      	beq.n	8000ab6 <MCI_ExecBufferedCommands+0x56>
 8000a74:	2903      	cmp	r1, #3
 8000a76:	d005      	beq.n	8000a84 <MCI_ExecBufferedCommands+0x24>
 8000a78:	2901      	cmp	r1, #1
 8000a7a:	d00c      	beq.n	8000a96 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	7623      	strb	r3, [r4, #24]
}
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000a84:	6882      	ldr	r2, [r0, #8]
 8000a86:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000a8a:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000a8e:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000a90:	2302      	movs	r3, #2
 8000a92:	7623      	strb	r3, [r4, #24]
}
 8000a94:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000a96:	6883      	ldr	r3, [r0, #8]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000a9e:	6840      	ldr	r0, [r0, #4]
 8000aa0:	f005 f8ba 	bl	8005c18 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000aa4:	8ae2      	ldrh	r2, [r4, #22]
 8000aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000aaa:	6860      	ldr	r0, [r4, #4]
 8000aac:	f005 f8b8 	bl	8005c20 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d0e3      	beq.n	8000a7c <MCI_ExecBufferedCommands+0x1c>
 8000ab4:	e7ec      	b.n	8000a90 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000ab6:	6883      	ldr	r3, [r0, #8]
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000abe:	6840      	ldr	r0, [r0, #4]
 8000ac0:	f005 f8aa 	bl	8005c18 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000ac4:	8ae2      	ldrh	r2, [r4, #22]
 8000ac6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000aca:	6860      	ldr	r0, [r4, #4]
 8000acc:	f005 f8a8 	bl	8005c20 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d0d3      	beq.n	8000a7c <MCI_ExecBufferedCommands+0x1c>
 8000ad4:	e7dc      	b.n	8000a90 <MCI_ExecBufferedCommands+0x30>
 8000ad6:	bf00      	nop

08000ad8 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000ad8:	6800      	ldr	r0, [r0, #0]
 8000ada:	f005 b9d7 	b.w	8005e8c <STM_GetState>
 8000ade:	bf00      	nop

08000ae0 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000ae0:	7e40      	ldrb	r0, [r0, #25]
 8000ae2:	4770      	bx	lr

08000ae4 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000ae4:	7b03      	ldrb	r3, [r0, #12]
 8000ae6:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000ae8:	bf0c      	ite	eq
 8000aea:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000aee:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000af4:	6840      	ldr	r0, [r0, #4]
 8000af6:	f005 b8db 	b.w	8005cb0 <STC_StopRamp>
 8000afa:	bf00      	nop

08000afc <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000afc:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000afe:	6840      	ldr	r0, [r0, #4]
 8000b00:	f005 f870 	bl	8005be4 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000b04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000b08:	f005 b81a 	b.w	8005b40 <SPD_GetAvrgMecSpeedUnit>

08000b0c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000b0c:	6840      	ldr	r0, [r0, #4]
 8000b0e:	f005 b873 	b.w	8005bf8 <STC_GetMecSpeedRefUnit>
 8000b12:	bf00      	nop

08000b14 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000b14:	6882      	ldr	r2, [r0, #8]
 8000b16:	6810      	ldr	r0, [r2, #0]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	b282      	uxth	r2, r0
 8000b1c:	f362 030f 	bfi	r3, r2, #0, #16
 8000b20:	0c00      	lsrs	r0, r0, #16
 8000b22:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000b26:	b082      	sub	sp, #8
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	b002      	add	sp, #8
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000b30:	6882      	ldr	r2, [r0, #8]
 8000b32:	6850      	ldr	r0, [r2, #4]
 8000b34:	2300      	movs	r3, #0
 8000b36:	b282      	uxth	r2, r0
 8000b38:	f362 030f 	bfi	r3, r2, #0, #16
 8000b3c:	0c00      	lsrs	r0, r0, #16
 8000b3e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000b42:	b082      	sub	sp, #8
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	b002      	add	sp, #8
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000b4c:	6882      	ldr	r2, [r0, #8]
 8000b4e:	68d0      	ldr	r0, [r2, #12]
 8000b50:	2300      	movs	r3, #0
 8000b52:	b282      	uxth	r2, r0
 8000b54:	f362 030f 	bfi	r3, r2, #0, #16
 8000b58:	0c00      	lsrs	r0, r0, #16
 8000b5a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000b5e:	b082      	sub	sp, #8
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	b002      	add	sp, #8
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000b68:	6882      	ldr	r2, [r0, #8]
 8000b6a:	6910      	ldr	r0, [r2, #16]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	b282      	uxth	r2, r0
 8000b70:	f362 030f 	bfi	r3, r2, #0, #16
 8000b74:	0c00      	lsrs	r0, r0, #16
 8000b76:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000b7a:	b082      	sub	sp, #8
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	b002      	add	sp, #8
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000b84:	6882      	ldr	r2, [r0, #8]
 8000b86:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	b282      	uxth	r2, r0
 8000b8e:	f362 030f 	bfi	r3, r2, #0, #16
 8000b92:	0c00      	lsrs	r0, r0, #16
 8000b94:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000b98:	b082      	sub	sp, #8
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	b002      	add	sp, #8
 8000b9e:	4770      	bx	lr

08000ba0 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000ba0:	6882      	ldr	r2, [r0, #8]
 8000ba2:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	b282      	uxth	r2, r0
 8000baa:	f362 030f 	bfi	r3, r2, #0, #16
 8000bae:	0c00      	lsrs	r0, r0, #16
 8000bb0:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000bb4:	b082      	sub	sp, #8
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	b002      	add	sp, #8
 8000bba:	4770      	bx	lr

08000bbc <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000bbc:	6883      	ldr	r3, [r0, #8]
}
 8000bbe:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000bc2:	4770      	bx	lr

08000bc4 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	6882      	ldr	r2, [r0, #8]
 8000bc8:	f361 030f 	bfi	r3, r1, #0, #16
 8000bcc:	f361 431f 	bfi	r3, r1, #16, #16
 8000bd0:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000bd8:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000bda:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000bde:	f005 f8a7 	bl	8005d30 <STC_GetDefaultIqdref>
 8000be2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000be6:	8220      	strh	r0, [r4, #16]
 8000be8:	8263      	strh	r3, [r4, #18]
}
 8000bea:	bd10      	pop	{r4, pc}

08000bec <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8000bec:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000bee:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000bf2:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000bf6:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000bfa:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000bfe:	4250      	negs	r0, r2
 8000c00:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000c04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000c08:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000c0a:	da05      	bge.n	8000c18 <MCM_Clarke+0x2c>
 8000c0c:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000c0e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000c12:	da0c      	bge.n	8000c2e <MCM_Clarke+0x42>
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <MCM_Clarke+0x50>)
 8000c16:	e001      	b.n	8000c1c <MCM_Clarke+0x30>
 8000c18:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	2000      	movs	r0, #0
 8000c20:	b292      	uxth	r2, r2
 8000c22:	f363 000f 	bfi	r0, r3, #0, #16
 8000c26:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000c2a:	b004      	add	sp, #16
 8000c2c:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <MCM_Clarke+0x50>)
 8000c30:	b20a      	sxth	r2, r1
 8000c32:	4282      	cmp	r2, r0
 8000c34:	bfb8      	it	lt
 8000c36:	4602      	movlt	r2, r0
 8000c38:	e7f0      	b.n	8000c1c <MCM_Clarke+0x30>
 8000c3a:	bf00      	nop
 8000c3c:	ffff8001 	.word	0xffff8001

08000c40 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000c40:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000c44:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000c48:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000c4c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8000c50:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000c52:	d028      	beq.n	8000ca6 <MCM_Trig_Functions+0x66>
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	d816      	bhi.n	8000c8a <MCM_Trig_Functions+0x4a>
 8000c5c:	b361      	cbz	r1, 8000cb8 <MCM_Trig_Functions+0x78>
 8000c5e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000c62:	d109      	bne.n	8000c78 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c64:	b2c0      	uxtb	r0, r0
 8000c66:	43c3      	mvns	r3, r0
 8000c68:	491a      	ldr	r1, [pc, #104]	; (8000cd4 <MCM_Trig_Functions+0x94>)
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c70:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c74:	4252      	negs	r2, r2
 8000c76:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	b292      	uxth	r2, r2
 8000c7e:	f363 000f 	bfi	r0, r3, #0, #16
 8000c82:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000c86:	b002      	add	sp, #8
 8000c88:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000c8a:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000c8e:	d1f3      	bne.n	8000c78 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c90:	4910      	ldr	r1, [pc, #64]	; (8000cd4 <MCM_Trig_Functions+0x94>)
 8000c92:	b2c0      	uxtb	r0, r0
 8000c94:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c96:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c9a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000c9c:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000c9e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ca2:	b21b      	sxth	r3, r3
      break;
 8000ca4:	e7e8      	b.n	8000c78 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ca6:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ca8:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cb2:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      break;
 8000cb6:	e7df      	b.n	8000c78 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cb8:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000cba:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cbc:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cc4:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000cc8:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cca:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ccc:	b21b      	sxth	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cce:	b212      	sxth	r2, r2
      break;
 8000cd0:	e7d2      	b.n	8000c78 <MCM_Trig_Functions+0x38>
 8000cd2:	bf00      	nop
 8000cd4:	08006198 	.word	0x08006198

08000cd8 <MCM_Park>:
{
 8000cd8:	b570      	push	{r4, r5, r6, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	4605      	mov	r5, r0
 8000cde:	9001      	str	r0, [sp, #4]
 8000ce0:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	f7ff ffac 	bl	8000c40 <MCM_Trig_Functions>
 8000ce8:	b22d      	sxth	r5, r5
 8000cea:	b204      	sxth	r4, r0
 8000cec:	1436      	asrs	r6, r6, #16
 8000cee:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000cf0:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000cf4:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8000cf8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000cfc:	da12      	bge.n	8000d24 <MCM_Park+0x4c>
 8000cfe:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000d00:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000d04:	4914      	ldr	r1, [pc, #80]	; (8000d58 <MCM_Park+0x80>)
 8000d06:	da21      	bge.n	8000d4c <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000d08:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000d0c:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8000d10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000d14:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000d18:	da07      	bge.n	8000d2a <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8000d1a:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000d1e:	da0f      	bge.n	8000d40 <MCM_Park+0x68>
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <MCM_Park+0x80>)
 8000d22:	e004      	b.n	8000d2e <MCM_Park+0x56>
 8000d24:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000d28:	e7ee      	b.n	8000d08 <MCM_Park+0x30>
 8000d2a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000d2e:	b28a      	uxth	r2, r1
 8000d30:	2000      	movs	r0, #0
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	f362 000f 	bfi	r0, r2, #0, #16
 8000d38:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000d3c:	b004      	add	sp, #16
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MCM_Park+0x80>)
 8000d42:	b213      	sxth	r3, r2
 8000d44:	4283      	cmp	r3, r0
 8000d46:	bfb8      	it	lt
 8000d48:	4603      	movlt	r3, r0
 8000d4a:	e7f0      	b.n	8000d2e <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4291      	cmp	r1, r2
 8000d50:	bfb8      	it	lt
 8000d52:	4611      	movlt	r1, r2
 8000d54:	e7d8      	b.n	8000d08 <MCM_Park+0x30>
 8000d56:	bf00      	nop
 8000d58:	ffff8001 	.word	0xffff8001

08000d5c <MCM_Rev_Park>:
{
 8000d5c:	b530      	push	{r4, r5, lr}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	4604      	mov	r4, r0
 8000d62:	9001      	str	r0, [sp, #4]
 8000d64:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000d66:	4608      	mov	r0, r1
 8000d68:	f7ff ff6a 	bl	8000c40 <MCM_Trig_Functions>
 8000d6c:	142d      	asrs	r5, r5, #16
 8000d6e:	1403      	asrs	r3, r0, #16
 8000d70:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000d72:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000d76:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000d78:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000d7c:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000d80:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8000d84:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000d8e:	f362 000f 	bfi	r0, r2, #0, #16
 8000d92:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000d96:	b005      	add	sp, #20
 8000d98:	bd30      	pop	{r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9e:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <FOC_Clear+0x74>)
 8000da4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8000da8:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000dac:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 8000dae:	2500      	movs	r5, #0
{
 8000db0:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 8000db2:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000db6:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8000db8:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8000dba:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000dbe:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 8000dc2:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000dc6:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8000dca:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000dce:	4811      	ldr	r0, [pc, #68]	; (8000e14 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8000dd0:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000dd2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000dd6:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000dda:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000ddc:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000dde:	50d5      	str	r5, [r2, r3]
 8000de0:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000de4:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000de6:	f003 ff5d 	bl	8004ca4 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <FOC_Clear+0x7c>)
 8000dec:	4629      	mov	r1, r5
 8000dee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000df2:	f003 ff57 	bl	8004ca4 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <FOC_Clear+0x80>)
 8000df8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000dfc:	f004 fef4 	bl	8005be8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <FOC_Clear+0x84>)
 8000e02:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000e06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000e0a:	f004 b94f 	b.w	80050ac <PWMC_SwitchOffPWM>
 8000e0e:	bf00      	nop
 8000e10:	20000700 	.word	0x20000700
 8000e14:	200006f4 	.word	0x200006f4
 8000e18:	200007b0 	.word	0x200007b0
 8000e1c:	200007b4 	.word	0x200007b4
 8000e20:	200006ec 	.word	0x200006ec

08000e24 <MCboot>:
{
 8000e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e28:	ed2d 8b02 	vpush	{d8}
  STM_Init(&STM[M1]);
 8000e2c:	ed9f 8a5e 	vldr	s16, [pc, #376]	; 8000fa8 <MCboot+0x184>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000e30:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8001000 <MCboot+0x1dc>
  HALL_Init (&HALL_M1);
 8000e34:	4f5d      	ldr	r7, [pc, #372]	; (8000fac <MCboot+0x188>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000e36:	4d5e      	ldr	r5, [pc, #376]	; (8000fb0 <MCboot+0x18c>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000e38:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8001004 <MCboot+0x1e0>
  NTC_Init(&TempSensorParamsM1);
 8000e3c:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8001008 <MCboot+0x1e4>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000e40:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 800100c <MCboot+0x1e8>
{
 8000e44:	b085      	sub	sp, #20
 8000e46:	4602      	mov	r2, r0
  STM_Init(&STM[M1]);
 8000e48:	ee18 0a10 	vmov	r0, s16
{
 8000e4c:	e9cd 2100 	strd	r2, r1, [sp]
  STM_Init(&STM[M1]);
 8000e50:	f004 ff84 	bl	8005d5c <STM_Init>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000e54:	4b57      	ldr	r3, [pc, #348]	; (8000fb4 <MCboot+0x190>)
 8000e56:	4858      	ldr	r0, [pc, #352]	; (8000fb8 <MCboot+0x194>)
  pCLM[M1] = &CircleLimitationM1;
 8000e58:	4a58      	ldr	r2, [pc, #352]	; (8000fbc <MCboot+0x198>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000e5a:	6018      	str	r0, [r3, #0]
  bMCBootCompleted = 0;
 8000e5c:	4b58      	ldr	r3, [pc, #352]	; (8000fc0 <MCboot+0x19c>)
  pCLM[M1] = &CircleLimitationM1;
 8000e5e:	4959      	ldr	r1, [pc, #356]	; (8000fc4 <MCboot+0x1a0>)
 8000e60:	6011      	str	r1, [r2, #0]
  bMCBootCompleted = 0;
 8000e62:	2400      	movs	r4, #0
 8000e64:	701c      	strb	r4, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 8000e66:	f004 fb91 	bl	800558c <R3_1_Init>
  startTimers();
 8000e6a:	f003 ffa1 	bl	8004db0 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000e6e:	4640      	mov	r0, r8
 8000e70:	f003 ff04 	bl	8004c7c <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000e74:	4b54      	ldr	r3, [pc, #336]	; (8000fc8 <MCboot+0x1a4>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000e76:	4a55      	ldr	r2, [pc, #340]	; (8000fcc <MCboot+0x1a8>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000e78:	f8c3 8000 	str.w	r8, [r3]
 8000e7c:	461e      	mov	r6, r3
  HALL_Init (&HALL_M1);
 8000e7e:	4638      	mov	r0, r7
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000e80:	602a      	str	r2, [r5, #0]
  HALL_Init (&HALL_M1);
 8000e82:	f003 fa99 	bl	80043b8 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000e86:	6831      	ldr	r1, [r6, #0]
 8000e88:	6828      	ldr	r0, [r5, #0]
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000e8a:	4e51      	ldr	r6, [pc, #324]	; (8000fd0 <MCboot+0x1ac>)
  oMCInterface[M1] = & Mci[M1];
 8000e8c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8001010 <MCboot+0x1ec>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000e90:	463a      	mov	r2, r7
 8000e92:	f004 fe93 	bl	8005bbc <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000e96:	484e      	ldr	r0, [pc, #312]	; (8000fd0 <MCboot+0x1ac>)
 8000e98:	f003 fef0 	bl	8004c7c <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000e9c:	484d      	ldr	r0, [pc, #308]	; (8000fd4 <MCboot+0x1b0>)
 8000e9e:	f003 feed 	bl	8004c7c <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000ea2:	494d      	ldr	r1, [pc, #308]	; (8000fd8 <MCboot+0x1b4>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8000ea4:	4a4d      	ldr	r2, [pc, #308]	; (8000fdc <MCboot+0x1b8>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000ea6:	484e      	ldr	r0, [pc, #312]	; (8000fe0 <MCboot+0x1bc>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000ea8:	600e      	str	r6, [r1, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000eaa:	4e4a      	ldr	r6, [pc, #296]	; (8000fd4 <MCboot+0x1b0>)
 8000eac:	6016      	str	r6, [r2, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000eae:	f8cb 0000 	str.w	r0, [fp]
  RVBS_Init(pBusSensorM1);
 8000eb2:	f004 fdeb 	bl	8005a8c <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000eb6:	4a4b      	ldr	r2, [pc, #300]	; (8000fe4 <MCboot+0x1c0>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000eb8:	f8db 1000 	ldr.w	r1, [fp]
 8000ebc:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000ec0:	4949      	ldr	r1, [pc, #292]	; (8000fe8 <MCboot+0x1c4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000ec2:	4e4a      	ldr	r6, [pc, #296]	; (8000fec <MCboot+0x1c8>)
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000ec4:	600a      	str	r2, [r1, #0]
  NTC_Init(&TempSensorParamsM1);
 8000ec6:	4648      	mov	r0, r9
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000ec8:	f8c2 a10c 	str.w	sl, [r2, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8000ecc:	f003 fe92 	bl	8004bf4 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000ed0:	4a47      	ldr	r2, [pc, #284]	; (8000ff0 <MCboot+0x1cc>)
 8000ed2:	4848      	ldr	r0, [pc, #288]	; (8000ff4 <MCboot+0x1d0>)
 8000ed4:	6010      	str	r0, [r2, #0]
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000ed6:	f8c6 9000 	str.w	r9, [r6]
  REMNG_Init(pREMNG[M1]);
 8000eda:	f004 fe25 	bl	8005b28 <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000ede:	f04f 0901 	mov.w	r9, #1
  FOC_Clear(M1);
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f7ff ff5a 	bl	8000d9c <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000ee8:	f88a 9024 	strb.w	r9, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000eec:	6828      	ldr	r0, [r5, #0]
 8000eee:	f004 ff1f 	bl	8005d30 <STC_GetDefaultIqdref>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	f3c0 410f 	ubfx	r1, r0, #16, #16
 8000ef8:	f8aa 2010 	strh.w	r2, [sl, #16]
 8000efc:	f8aa 1012 	strh.w	r1, [sl, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000f00:	6828      	ldr	r0, [r5, #0]
 8000f02:	f004 ff15 	bl	8005d30 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8000f06:	493c      	ldr	r1, [pc, #240]	; (8000ff8 <MCboot+0x1d4>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000f08:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000f0a:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000f0e:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000f12:	4653      	mov	r3, sl
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000f14:	f8aa c014 	strh.w	ip, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000f18:	4608      	mov	r0, r1
 8000f1a:	ee18 1a10 	vmov	r1, s16
 8000f1e:	f7ff fd5b 	bl	80009d8 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000f22:	6828      	ldr	r0, [r5, #0]
 8000f24:	f8d8 a000 	ldr.w	sl, [r8]
 8000f28:	f004 fef8 	bl	8005d1c <STC_GetMecSpeedRefUnitDefault>
 8000f2c:	4622      	mov	r2, r4
 8000f2e:	4601      	mov	r1, r0
 8000f30:	4650      	mov	r0, sl
 8000f32:	f7ff fd5f 	bl	80009f4 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000f36:	4824      	ldr	r0, [pc, #144]	; (8000fc8 <MCboot+0x1a4>)
  pMCIList[M1] = oMCInterface[M1];
 8000f38:	f8d8 e000 	ldr.w	lr, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000f3c:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000f40:	f8d6 8000 	ldr.w	r8, [r6]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000f44:	4824      	ldr	r0, [pc, #144]	; (8000fd8 <MCboot+0x1b4>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000f46:	4e28      	ldr	r6, [pc, #160]	; (8000fe8 <MCboot+0x1c4>)
  MCT[M1].pPIDId = pPIDId[M1];
 8000f48:	4924      	ldr	r1, [pc, #144]	; (8000fdc <MCboot+0x1b8>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000f4a:	4a1a      	ldr	r2, [pc, #104]	; (8000fb4 <MCboot+0x190>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <MCboot+0x1d8>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000f4e:	f8db a000 	ldr.w	sl, [fp]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000f52:	6800      	ldr	r0, [r0, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000f54:	f8d6 b000 	ldr.w	fp, [r6]
  pMCIList[M1] = oMCInterface[M1];
 8000f58:	9e00      	ldr	r6, [sp, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000f5a:	6809      	ldr	r1, [r1, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000f5c:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000f5e:	6812      	ldr	r2, [r2, #0]
  pMCIList[M1] = oMCInterface[M1];
 8000f60:	f8c6 e000 	str.w	lr, [r6]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000f64:	e9c3 c000 	strd	ip, r0, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000f68:	e9c3 8a0b 	strd	r8, sl, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8000f6c:	e9c3 4705 	strd	r4, r7, [r3, #20]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8000f70:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000f74:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8000f78:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8000f7c:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  MCT[M1].pPIDId = pPIDId[M1];
 8000f80:	6099      	str	r1, [r3, #8]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000f82:	625d      	str	r5, [r3, #36]	; 0x24
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000f84:	f8c3 b03c 	str.w	fp, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000f88:	60dc      	str	r4, [r3, #12]
  MCT[M1].pStateMachine = &STM[M1];
 8000f8a:	ed83 8a0a 	vstr	s16, [r3, #40]	; 0x28
  MCT[M1].pOTT = MC_NULL;
 8000f8e:	651c      	str	r4, [r3, #80]	; 0x50
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000f90:	611a      	str	r2, [r3, #16]
  pMCTList[M1] = &MCT[M1];
 8000f92:	9a01      	ldr	r2, [sp, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MCboot+0x19c>)
 8000f98:	f883 9000 	strb.w	r9, [r3]
}
 8000f9c:	b005      	add	sp, #20
 8000f9e:	ecbd 8b02 	vpop	{d8}
 8000fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200007a0 	.word	0x200007a0
 8000fac:	200000b4 	.word	0x200000b4
 8000fb0:	200007b4 	.word	0x200007b4
 8000fb4:	200006ec 	.word	0x200006ec
 8000fb8:	20000314 	.word	0x20000314
 8000fbc:	2000077c 	.word	0x2000077c
 8000fc0:	200005b0 	.word	0x200005b0
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	200006f0 	.word	0x200006f0
 8000fcc:	200003d0 	.word	0x200003d0
 8000fd0:	200001a8 	.word	0x200001a8
 8000fd4:	2000017c 	.word	0x2000017c
 8000fd8:	200006f4 	.word	0x200006f4
 8000fdc:	200007b0 	.word	0x200007b0
 8000fe0:	200003a8 	.word	0x200003a8
 8000fe4:	20000200 	.word	0x20000200
 8000fe8:	200007ac 	.word	0x200007ac
 8000fec:	200006e8 	.word	0x200006e8
 8000ff0:	200007a8 	.word	0x200007a8
 8000ff4:	20000390 	.word	0x20000390
 8000ff8:	20000784 	.word	0x20000784
 8000ffc:	20000728 	.word	0x20000728
 8001000:	200001d4 	.word	0x200001d4
 8001004:	20000780 	.word	0x20000780
 8001008:	20000404 	.word	0x20000404
 800100c:	20000700 	.word	0x20000700
 8001010:	200006f8 	.word	0x200006f8

08001014 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001018:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <FOC_CalcCurrRef+0x24>)
 800101c:	2426      	movs	r4, #38	; 0x26
 800101e:	fb04 3400 	mla	r4, r4, r0, r3
 8001022:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001026:	b103      	cbz	r3, 800102a <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001028:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <FOC_CalcCurrRef+0x28>)
 800102c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001030:	f004 fe42 	bl	8005cb8 <STC_CalcTorqueReference>
 8001034:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001036:	8220      	strh	r0, [r4, #16]
}
 8001038:	bd10      	pop	{r4, pc}
 800103a:	bf00      	nop
 800103c:	20000700 	.word	0x20000700
 8001040:	200007b4 	.word	0x200007b4

08001044 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001044:	4b01      	ldr	r3, [pc, #4]	; (800104c <TSK_SetChargeBootCapDelayM1+0x8>)
 8001046:	8018      	strh	r0, [r3, #0]
}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200005b2 	.word	0x200005b2

08001050 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001052:	8818      	ldrh	r0, [r3, #0]
 8001054:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001056:	fab0 f080 	clz	r0, r0
 800105a:	0940      	lsrs	r0, r0, #5
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200005b2 	.word	0x200005b2

08001064 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001064:	4b01      	ldr	r3, [pc, #4]	; (800106c <TSK_SetStopPermanencyTimeM1+0x8>)
 8001066:	8018      	strh	r0, [r3, #0]
}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200005b6 	.word	0x200005b6

08001070 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001072:	8818      	ldrh	r0, [r3, #0]
 8001074:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001076:	fab0 f080 	clz	r0, r0
 800107a:	0940      	lsrs	r0, r0, #5
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200005b6 	.word	0x200005b6

08001084 <TSK_MediumFrequencyTaskM1>:
{
 8001084:	b530      	push	{r4, r5, lr}
 8001086:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001088:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 800108a:	f10d 0106 	add.w	r1, sp, #6
 800108e:	484d      	ldr	r0, [pc, #308]	; (80011c4 <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 8001090:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001094:	f003 fad8 	bl	8004648 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001098:	4d4b      	ldr	r5, [pc, #300]	; (80011c8 <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 800109a:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 800109c:	6828      	ldr	r0, [r5, #0]
 800109e:	f003 fe53 	bl	8004d48 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80010a2:	484a      	ldr	r0, [pc, #296]	; (80011cc <TSK_MediumFrequencyTaskM1+0x148>)
 80010a4:	f004 fef2 	bl	8005e8c <STM_GetState>
  switch ( StateM1 )
 80010a8:	1ec3      	subs	r3, r0, #3
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	d80d      	bhi.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
 80010ae:	e8df f003 	tbb	[pc, r3]
 80010b2:	2b1f      	.short	0x2b1f
 80010b4:	65524330 	.word	0x65524330
 80010b8:	0c0c0c08 	.word	0x0c0c0c08
 80010bc:	6e0c0c0c 	.word	0x6e0c0c0c
 80010c0:	0e7c      	.short	0x0e7c
    STM_NextState( &STM[M1], IDLE );
 80010c2:	4842      	ldr	r0, [pc, #264]	; (80011cc <TSK_MediumFrequencyTaskM1+0x148>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	f004 fe6d 	bl	8005da4 <STM_NextState>
}
 80010ca:	b003      	add	sp, #12
 80010cc:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 80010ce:	483d      	ldr	r0, [pc, #244]	; (80011c4 <TSK_MediumFrequencyTaskM1+0x140>)
 80010d0:	f003 f9f4 	bl	80044bc <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80010d4:	483d      	ldr	r0, [pc, #244]	; (80011cc <TSK_MediumFrequencyTaskM1+0x148>)
 80010d6:	2104      	movs	r1, #4
 80010d8:	f004 fe64 	bl	8005da4 <STM_NextState>
 80010dc:	2800      	cmp	r0, #0
 80010de:	d0f4      	beq.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
      FOC_Clear( M1 );
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fe5b 	bl	8000d9c <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 80010e6:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <TSK_MediumFrequencyTaskM1+0x14c>)
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	f004 f937 	bl	800535c <R3_1_SwitchOnPWM>
 80010ee:	e7ec      	b.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 80010f0:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <TSK_MediumFrequencyTaskM1+0x14c>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	f004 f90a 	bl	800530c <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80010f8:	2014      	movs	r0, #20
 80010fa:	f7ff ffa3 	bl	8001044 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 80010fe:	2110      	movs	r1, #16
 8001100:	4832      	ldr	r0, [pc, #200]	; (80011cc <TSK_MediumFrequencyTaskM1+0x148>)
 8001102:	f004 fe4f 	bl	8005da4 <STM_NextState>
    break;
 8001106:	e7e0      	b.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001108:	2105      	movs	r1, #5
 800110a:	4830      	ldr	r0, [pc, #192]	; (80011cc <TSK_MediumFrequencyTaskM1+0x148>)
 800110c:	f004 fe4a 	bl	8005da4 <STM_NextState>
    break;
 8001110:	e7db      	b.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
	  FOC_InitAdditionalMethods(M1);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff ff7e 	bl	8001014 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff ff7d 	bl	8001018 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800111e:	2106      	movs	r1, #6
 8001120:	482a      	ldr	r0, [pc, #168]	; (80011cc <TSK_MediumFrequencyTaskM1+0x148>)
 8001122:	f004 fe3f 	bl	8005da4 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001126:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <TSK_MediumFrequencyTaskM1+0x150>)
 8001128:	6818      	ldr	r0, [r3, #0]
 800112a:	f004 fe0f 	bl	8005d4c <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <TSK_MediumFrequencyTaskM1+0x154>)
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	f7ff fc95 	bl	8000a60 <MCI_ExecBufferedCommands>
    break;
 8001136:	e7c8      	b.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <TSK_MediumFrequencyTaskM1+0x154>)
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	f7ff fc90 	bl	8000a60 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff ff69 	bl	8001018 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001146:	2c00      	cmp	r4, #0
 8001148:	d1bf      	bne.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 800114a:	4622      	mov	r2, r4
 800114c:	2120      	movs	r1, #32
 800114e:	481f      	ldr	r0, [pc, #124]	; (80011cc <TSK_MediumFrequencyTaskM1+0x148>)
 8001150:	f004 fe0a 	bl	8005d68 <STM_FaultProcessing>
 8001154:	e7b9      	b.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001156:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	f004 f947 	bl	80053ec <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff fe1c 	bl	8000d9c <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001164:	6828      	ldr	r0, [r5, #0]
 8001166:	f003 fd01 	bl	8004b6c <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800116a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800116e:	f7ff ff79 	bl	8001064 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001172:	2108      	movs	r1, #8
 8001174:	4815      	ldr	r0, [pc, #84]	; (80011cc <TSK_MediumFrequencyTaskM1+0x148>)
 8001176:	f004 fe15 	bl	8005da4 <STM_NextState>
    break;
 800117a:	e7a6      	b.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 800117c:	f7ff ff78 	bl	8001070 <TSK_StopPermanencyTimeHasElapsedM1>
 8001180:	2800      	cmp	r0, #0
 8001182:	d0a2      	beq.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001184:	2109      	movs	r1, #9
 8001186:	4811      	ldr	r0, [pc, #68]	; (80011cc <TSK_MediumFrequencyTaskM1+0x148>)
 8001188:	f004 fe0c 	bl	8005da4 <STM_NextState>
 800118c:	e79d      	b.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800118e:	f7ff ff5f 	bl	8001050 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001192:	2800      	cmp	r0, #0
 8001194:	d099      	beq.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001198:	2100      	movs	r1, #0
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f003 ff88 	bl	80050b0 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80011a0:	2111      	movs	r1, #17
 80011a2:	480a      	ldr	r0, [pc, #40]	; (80011cc <TSK_MediumFrequencyTaskM1+0x148>)
 80011a4:	f004 fdfe 	bl	8005da4 <STM_NextState>
 80011a8:	e78f      	b.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <TSK_MediumFrequencyTaskM1+0x14c>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	f003 ff7e 	bl	80050b0 <PWMC_CurrentReadingCalibr>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d088      	beq.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], CLEAR );
 80011b8:	2112      	movs	r1, #18
 80011ba:	4804      	ldr	r0, [pc, #16]	; (80011cc <TSK_MediumFrequencyTaskM1+0x148>)
 80011bc:	f004 fdf2 	bl	8005da4 <STM_NextState>
 80011c0:	e783      	b.n	80010ca <TSK_MediumFrequencyTaskM1+0x46>
 80011c2:	bf00      	nop
 80011c4:	200000b4 	.word	0x200000b4
 80011c8:	200007ac 	.word	0x200007ac
 80011cc:	200007a0 	.word	0x200007a0
 80011d0:	200006ec 	.word	0x200006ec
 80011d4:	200007b4 	.word	0x200007b4
 80011d8:	200006f8 	.word	0x200006f8

080011dc <MC_Scheduler>:
{
 80011dc:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MC_Scheduler+0x48>)
 80011e0:	781c      	ldrb	r4, [r3, #0]
 80011e2:	2c01      	cmp	r4, #1
 80011e4:	d000      	beq.n	80011e8 <MC_Scheduler+0xc>
}
 80011e6:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80011e8:	4d0f      	ldr	r5, [pc, #60]	; (8001228 <MC_Scheduler+0x4c>)
 80011ea:	882b      	ldrh	r3, [r5, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	b1ab      	cbz	r3, 800121c <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 80011f0:	882b      	ldrh	r3, [r5, #0]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <MC_Scheduler+0x50>)
 80011fa:	8813      	ldrh	r3, [r2, #0]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b11b      	cbz	r3, 8001208 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001200:	8813      	ldrh	r3, [r2, #0]
 8001202:	3b01      	subs	r3, #1
 8001204:	b29b      	uxth	r3, r3
 8001206:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001208:	4a09      	ldr	r2, [pc, #36]	; (8001230 <MC_Scheduler+0x54>)
 800120a:	8813      	ldrh	r3, [r2, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0e9      	beq.n	80011e6 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001212:	8813      	ldrh	r3, [r2, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	b29b      	uxth	r3, r3
 8001218:	8013      	strh	r3, [r2, #0]
}
 800121a:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 800121c:	f7ff ff32 	bl	8001084 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001220:	802c      	strh	r4, [r5, #0]
 8001222:	e7e9      	b.n	80011f8 <MC_Scheduler+0x1c>
 8001224:	200005b0 	.word	0x200005b0
 8001228:	200005b4 	.word	0x200005b4
 800122c:	200005b2 	.word	0x200005b2
 8001230:	200005b6 	.word	0x200005b6

08001234 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 8001238:	4830      	ldr	r0, [pc, #192]	; (80012fc <TSK_HighFrequencyTask+0xc8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800123a:	4f31      	ldr	r7, [pc, #196]	; (8001300 <TSK_HighFrequencyTask+0xcc>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800123c:	4c31      	ldr	r4, [pc, #196]	; (8001304 <TSK_HighFrequencyTask+0xd0>)
{
 800123e:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 8001240:	f003 f9e0 	bl	8004604 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001244:	4b30      	ldr	r3, [pc, #192]	; (8001308 <TSK_HighFrequencyTask+0xd4>)
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	f004 fccc 	bl	8005be4 <STC_GetSpeedSensor>
 800124c:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800124e:	f004 fc73 	bl	8005b38 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001252:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001254:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001256:	6838      	ldr	r0, [r7, #0]
 8001258:	f003 fdfe 	bl	8004e58 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 800125c:	9803      	ldr	r0, [sp, #12]
 800125e:	f7ff fcc5 	bl	8000bec <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001262:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001264:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001266:	f7ff fd37 	bl	8000cd8 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 800126a:	4a28      	ldr	r2, [pc, #160]	; (800130c <TSK_HighFrequencyTask+0xd8>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800126c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001270:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001272:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001274:	1ac9      	subs	r1, r1, r3
 8001276:	6810      	ldr	r0, [r2, #0]
 8001278:	f003 fd20 	bl	8004cbc <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800127c:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001280:	4b23      	ldr	r3, [pc, #140]	; (8001310 <TSK_HighFrequencyTask+0xdc>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001282:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001286:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001288:	1a89      	subs	r1, r1, r2
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	f003 fd16 	bl	8004cbc <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <TSK_HighFrequencyTask+0xe0>)
 8001292:	f8ad 8008 	strh.w	r8, [sp, #8]
 8001296:	f8ad 000a 	strh.w	r0, [sp, #10]
 800129a:	9902      	ldr	r1, [sp, #8]
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	f003 f82f 	bl	8004300 <Circle_Limitation>
 80012a2:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80012a4:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80012a6:	fa0f f883 	sxth.w	r8, r3
 80012aa:	141d      	asrs	r5, r3, #16
 80012ac:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80012ae:	f004 fc4b 	bl	8005b48 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80012b2:	4631      	mov	r1, r6
 80012b4:	9802      	ldr	r0, [sp, #8]
 80012b6:	f7ff fd51 	bl	8000d5c <MCM_Rev_Park>
 80012ba:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80012bc:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80012be:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80012c0:	f003 fdcc 	bl	8004e5c <PWMC_SetPhaseVoltage>
 80012c4:	4601      	mov	r1, r0
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80012c6:	9803      	ldr	r0, [sp, #12]
 80012c8:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80012ca:	9804      	ldr	r0, [sp, #16]
 80012cc:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80012ce:	9801      	ldr	r0, [sp, #4]
 80012d0:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 80012d2:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 80012d4:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80012d6:	f8a4 8016 	strh.w	r8, [r4, #22]
 80012da:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 80012dc:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 80012de:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 80012e2:	d003      	beq.n	80012ec <TSK_HighFrequencyTask+0xb8>
}
 80012e4:	2000      	movs	r0, #0
 80012e6:	b006      	add	sp, #24
 80012e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	480a      	ldr	r0, [pc, #40]	; (8001318 <TSK_HighFrequencyTask+0xe4>)
 80012f0:	f004 fd3a 	bl	8005d68 <STM_FaultProcessing>
}
 80012f4:	2000      	movs	r0, #0
 80012f6:	b006      	add	sp, #24
 80012f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012fc:	200000b4 	.word	0x200000b4
 8001300:	200006ec 	.word	0x200006ec
 8001304:	20000700 	.word	0x20000700
 8001308:	200007b4 	.word	0x200007b4
 800130c:	200006f4 	.word	0x200006f4
 8001310:	200007b0 	.word	0x200007b0
 8001314:	2000077c 	.word	0x2000077c
 8001318:	200007a0 	.word	0x200007a0

0800131c <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 800131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001320:	4e20      	ldr	r6, [pc, #128]	; (80013a4 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8001322:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001324:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001328:	f003 fc76 	bl	8004c18 <NTC_CalcAvTemp>
 800132c:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800132e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001332:	f003 fee7 	bl	8005104 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001336:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800133a:	4328      	orrs	r0, r5
 800133c:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 800133e:	b334      	cbz	r4, 800138e <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001340:	4f19      	ldr	r7, [pc, #100]	; (80013a8 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001342:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001346:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800134a:	43ea      	mvns	r2, r5
 800134c:	b292      	uxth	r2, r2
 800134e:	4629      	mov	r1, r5
 8001350:	4638      	mov	r0, r7
 8001352:	f004 fd09 	bl	8005d68 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001356:	4638      	mov	r0, r7
 8001358:	f004 fd98 	bl	8005e8c <STM_GetState>
 800135c:	280a      	cmp	r0, #10
 800135e:	d002      	beq.n	8001366 <TSK_SafetyTask_PWMOFF+0x4a>
 8001360:	280b      	cmp	r0, #11
 8001362:	d00e      	beq.n	8001382 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001366:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800136a:	f003 fe9f 	bl	80050ac <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff fd14 	bl	8000d9c <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <TSK_SafetyTask_PWMOFF+0x90>)
 8001376:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800137a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800137e:	f003 bbf5 	b.w	8004b6c <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001382:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 8001386:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800138a:	f003 be8f 	b.w	80050ac <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <TSK_SafetyTask_PWMOFF+0x94>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f004 fb93 	bl	8005abc <RVBS_CalcAvVbus>
 8001396:	f000 000e 	and.w	r0, r0, #14
 800139a:	4305      	orrs	r5, r0
 800139c:	e7d0      	b.n	8001340 <TSK_SafetyTask_PWMOFF+0x24>
 800139e:	bf00      	nop
 80013a0:	200006e8 	.word	0x200006e8
 80013a4:	200006ec 	.word	0x200006ec
 80013a8:	200007a0 	.word	0x200007a0
 80013ac:	200007ac 	.word	0x200007ac
 80013b0:	20000780 	.word	0x20000780

080013b4 <TSK_SafetyTask>:
{
 80013b4:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <TSK_SafetyTask+0x1c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d000      	beq.n	80013c0 <TSK_SafetyTask+0xc>
}
 80013be:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff ffab 	bl	800131c <TSK_SafetyTask_PWMOFF>
}
 80013c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80013ca:	f000 bd1b 	b.w	8001e04 <RCM_ExecUserConv>
 80013ce:	bf00      	nop
 80013d0:	200005b0 	.word	0x200005b0

080013d4 <MC_RunMotorControlTasks>:
{
 80013d4:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MC_RunMotorControlTasks+0x1c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b903      	cbnz	r3, 80013de <MC_RunMotorControlTasks+0xa>
}
 80013dc:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80013de:	f7ff fefd 	bl	80011dc <MC_Scheduler>
    TSK_SafetyTask();
 80013e2:	f7ff ffe7 	bl	80013b4 <TSK_SafetyTask>
}
 80013e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 80013ea:	f000 bfcd 	b.w	8002388 <UI_Scheduler>
 80013ee:	bf00      	nop
 80013f0:	200005b0 	.word	0x200005b0

080013f4 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80013f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <TSK_HardwareFaultTask+0x18>)
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	f003 fff7 	bl	80053ec <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80013fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <TSK_HardwareFaultTask+0x1c>)
 8001404:	2200      	movs	r2, #0
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	f004 bcae 	b.w	8005d68 <STM_FaultProcessing>
 800140c:	200006ec 	.word	0x200006ec
 8001410:	200007a0 	.word	0x200007a0

08001414 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001414:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001416:	4a44      	ldr	r2, [pc, #272]	; (8001528 <mc_lock_pins+0x114>)
 8001418:	4b44      	ldr	r3, [pc, #272]	; (800152c <mc_lock_pins+0x118>)
 800141a:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800141c:	2108      	movs	r1, #8
 800141e:	b091      	sub	sp, #68	; 0x44
 8001420:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001422:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001424:	69d3      	ldr	r3, [r2, #28]
 8001426:	930f      	str	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001428:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 800142c:	f44f 6580 	mov.w	r5, #1024	; 0x400
  (void) temp;
 8001430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001432:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001434:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001436:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001438:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <mc_lock_pins+0x11c>)
  temp = READ_REG(GPIOx->LCKR);
 800143a:	69d1      	ldr	r1, [r2, #28]
 800143c:	910e      	str	r1, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, PinMask);
 800143e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001442:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  (void) temp;
 8001446:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001448:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800144a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800144c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800144e:	69d9      	ldr	r1, [r3, #28]
 8001450:	910d      	str	r1, [sp, #52]	; 0x34
  (void) temp;
 8001452:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001454:	4937      	ldr	r1, [pc, #220]	; (8001534 <mc_lock_pins+0x120>)
 8001456:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001458:	f44f 7480 	mov.w	r4, #256	; 0x100
 800145c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800145e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001460:	69d9      	ldr	r1, [r3, #28]
 8001462:	910c      	str	r1, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001464:	f44f 7400 	mov.w	r4, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001468:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 800146c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800146e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001470:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001472:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001474:	69d9      	ldr	r1, [r3, #28]
 8001476:	910b      	str	r1, [sp, #44]	; 0x2c
  (void) temp;
 8001478:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800147a:	492f      	ldr	r1, [pc, #188]	; (8001538 <mc_lock_pins+0x124>)
 800147c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800147e:	2440      	movs	r4, #64	; 0x40
 8001480:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001482:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001484:	69d9      	ldr	r1, [r3, #28]
 8001486:	910a      	str	r1, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001488:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800148a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 800148e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001490:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001492:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001494:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001496:	69d6      	ldr	r6, [r2, #28]
 8001498:	9609      	str	r6, [sp, #36]	; 0x24
  (void) temp;
 800149a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800149c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800149e:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014a0:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014a2:	69d8      	ldr	r0, [r3, #28]
 80014a4:	9008      	str	r0, [sp, #32]
  (void) temp;
 80014a6:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014a8:	4824      	ldr	r0, [pc, #144]	; (800153c <mc_lock_pins+0x128>)
 80014aa:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014ac:	2502      	movs	r5, #2
 80014ae:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014b0:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014b2:	69d2      	ldr	r2, [r2, #28]
 80014b4:	9207      	str	r2, [sp, #28]
  (void) temp;
 80014b6:	9e07      	ldr	r6, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014b8:	4a21      	ldr	r2, [pc, #132]	; (8001540 <mc_lock_pins+0x12c>)
 80014ba:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014bc:	2680      	movs	r6, #128	; 0x80
 80014be:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c0:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014c2:	69da      	ldr	r2, [r3, #28]
 80014c4:	9206      	str	r2, [sp, #24]
  (void) temp;
 80014c6:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014ca:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014cc:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	9205      	str	r2, [sp, #20]
  (void) temp;
 80014d2:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014d6:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d8:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014da:	69da      	ldr	r2, [r3, #28]
 80014dc:	9204      	str	r2, [sp, #16]
  (void) temp;
 80014de:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014e0:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014e4:	f8c3 581c 	str.w	r5, [r3, #2076]	; 0x81c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014e8:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
  temp = READ_REG(GPIOx->LCKR);
 80014ec:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80014f0:	9203      	str	r2, [sp, #12]
  (void) temp;
 80014f2:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <mc_lock_pins+0x130>)
 80014f6:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014fa:	2004      	movs	r0, #4
 80014fc:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001500:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  temp = READ_REG(GPIOx->LCKR);
 8001504:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8001508:	9202      	str	r2, [sp, #8]
  (void) temp;
 800150a:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800150c:	f8c3 181c 	str.w	r1, [r3, #2076]	; 0x81c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001510:	f8c3 481c 	str.w	r4, [r3, #2076]	; 0x81c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001514:	f8c3 181c 	str.w	r1, [r3, #2076]	; 0x81c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
  temp = READ_REG(GPIOx->LCKR);
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001520:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 8001522:	b011      	add	sp, #68	; 0x44
 8001524:	bc70      	pop	{r4, r5, r6}
 8001526:	4770      	bx	lr
 8001528:	40020400 	.word	0x40020400
 800152c:	00010008 	.word	0x00010008
 8001530:	40020000 	.word	0x40020000
 8001534:	00010100 	.word	0x00010100
 8001538:	00010040 	.word	0x00010040
 800153c:	00010002 	.word	0x00010002
 8001540:	00010080 	.word	0x00010080
 8001544:	00010004 	.word	0x00010004

08001548 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	460c      	mov	r4, r1
 800154c:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 800154e:	2100      	movs	r1, #0
{
 8001550:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001552:	0962      	lsrs	r2, r4, #5
{
 8001554:	461f      	mov	r7, r3
 8001556:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 8001558:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 800155c:	d122      	bne.n	80015a4 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 800155e:	2c12      	cmp	r4, #18
 8001560:	d814      	bhi.n	800158c <MCP_ReceivedFrame+0x44>
 8001562:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001566:	0016      	.short	0x0016
 8001568:	00d1003f 	.word	0x00d1003f
 800156c:	00130163 	.word	0x00130163
 8001570:	01700013 	.word	0x01700013
 8001574:	01f80241 	.word	0x01f80241
 8001578:	019d021c 	.word	0x019d021c
 800157c:	01cc01b5 	.word	0x01cc01b5
 8001580:	001301e5 	.word	0x001301e5
 8001584:	00130013 	.word	0x00130013
 8001588:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 800158c:	2301      	movs	r3, #1
 800158e:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001592:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001596:	2301      	movs	r3, #1
 8001598:	f10d 020e 	add.w	r2, sp, #14
 800159c:	21ff      	movs	r1, #255	; 0xff
 800159e:	47a0      	blx	r4
    }
  }
}
 80015a0:	b00d      	add	sp, #52	; 0x34
 80015a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80015a4:	3a01      	subs	r2, #1
 80015a6:	f000 ff3d 	bl	8002424 <UI_SetReg>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	f000 8234 	beq.w	8001a18 <MCP_ReceivedFrame+0x4d0>
  switch (Code)
 80015b0:	f004 041f 	and.w	r4, r4, #31
 80015b4:	2c12      	cmp	r4, #18
 80015b6:	f200 8238 	bhi.w	8001a2a <MCP_ReceivedFrame+0x4e2>
 80015ba:	e8df f014 	tbh	[pc, r4, lsl #1]
 80015be:	01ea      	.short	0x01ea
 80015c0:	00a50013 	.word	0x00a50013
 80015c4:	02360137 	.word	0x02360137
 80015c8:	01440236 	.word	0x01440236
 80015cc:	01cc0215 	.word	0x01cc0215
 80015d0:	017101f0 	.word	0x017101f0
 80015d4:	01a00189 	.word	0x01a00189
 80015d8:	023601b9 	.word	0x023601b9
 80015dc:	02360236 	.word	0x02360236
 80015e0:	01ea0236 	.word	0x01ea0236
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80015e4:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 80015e6:	2305      	movs	r3, #5
 80015e8:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80015ec:	2988      	cmp	r1, #136	; 0x88
 80015ee:	f200 8237 	bhi.w	8001a60 <MCP_ReceivedFrame+0x518>
 80015f2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80015f6:	028c      	.short	0x028c
 80015f8:	02350235 	.word	0x02350235
 80015fc:	02350282 	.word	0x02350282
 8001600:	023e023e 	.word	0x023e023e
 8001604:	023e023e 	.word	0x023e023e
 8001608:	023e023e 	.word	0x023e023e
 800160c:	023e023e 	.word	0x023e023e
 8001610:	023e023e 	.word	0x023e023e
 8001614:	025d023e 	.word	0x025d023e
 8001618:	0235025d 	.word	0x0235025d
 800161c:	023e0235 	.word	0x023e0235
 8001620:	023e023e 	.word	0x023e023e
 8001624:	023e023e 	.word	0x023e023e
 8001628:	02350235 	.word	0x02350235
 800162c:	01510235 	.word	0x01510235
 8001630:	02350151 	.word	0x02350151
 8001634:	02350235 	.word	0x02350235
 8001638:	02350235 	.word	0x02350235
 800163c:	02350235 	.word	0x02350235
 8001640:	02350235 	.word	0x02350235
 8001644:	02350235 	.word	0x02350235
 8001648:	02350235 	.word	0x02350235
 800164c:	02350235 	.word	0x02350235
 8001650:	02350235 	.word	0x02350235
 8001654:	02350235 	.word	0x02350235
 8001658:	02350235 	.word	0x02350235
 800165c:	02350235 	.word	0x02350235
 8001660:	02350235 	.word	0x02350235
 8001664:	02350235 	.word	0x02350235
 8001668:	02350235 	.word	0x02350235
 800166c:	02350235 	.word	0x02350235
 8001670:	02350235 	.word	0x02350235
 8001674:	02350235 	.word	0x02350235
 8001678:	0235023e 	.word	0x0235023e
 800167c:	02350235 	.word	0x02350235
 8001680:	025d0235 	.word	0x025d0235
 8001684:	025d025d 	.word	0x025d025d
 8001688:	02350235 	.word	0x02350235
 800168c:	02350235 	.word	0x02350235
 8001690:	02350235 	.word	0x02350235
 8001694:	0235023e 	.word	0x0235023e
 8001698:	02350235 	.word	0x02350235
 800169c:	023e023e 	.word	0x023e023e
 80016a0:	023e023e 	.word	0x023e023e
 80016a4:	023e023e 	.word	0x023e023e
 80016a8:	0235023e 	.word	0x0235023e
 80016ac:	0235025d 	.word	0x0235025d
 80016b0:	02350235 	.word	0x02350235
 80016b4:	02350235 	.word	0x02350235
 80016b8:	0235023e 	.word	0x0235023e
 80016bc:	023e0235 	.word	0x023e0235
 80016c0:	0235023e 	.word	0x0235023e
 80016c4:	02350235 	.word	0x02350235
 80016c8:	02350235 	.word	0x02350235
 80016cc:	02350235 	.word	0x02350235
 80016d0:	02350235 	.word	0x02350235
 80016d4:	02350235 	.word	0x02350235
 80016d8:	02350235 	.word	0x02350235
 80016dc:	02820235 	.word	0x02820235
 80016e0:	025d025d 	.word	0x025d025d
 80016e4:	025d025d 	.word	0x025d025d
 80016e8:	0235025d 	.word	0x0235025d
 80016ec:	02350235 	.word	0x02350235
 80016f0:	025d025d 	.word	0x025d025d
 80016f4:	02350235 	.word	0x02350235
 80016f8:	02350235 	.word	0x02350235
 80016fc:	02350235 	.word	0x02350235
 8001700:	023e0235 	.word	0x023e0235
 8001704:	023e023e 	.word	0x023e023e
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001708:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800170a:	2303      	movs	r3, #3
 800170c:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001710:	2988      	cmp	r1, #136	; 0x88
 8001712:	f200 813e 	bhi.w	8001992 <MCP_ReceivedFrame+0x44a>
 8001716:	e8df f011 	tbh	[pc, r1, lsl #1]
 800171a:	01de      	.short	0x01de
 800171c:	01de01b9 	.word	0x01de01b9
 8001720:	01b901de 	.word	0x01b901de
 8001724:	01910191 	.word	0x01910191
 8001728:	01910191 	.word	0x01910191
 800172c:	01910191 	.word	0x01910191
 8001730:	01910191 	.word	0x01910191
 8001734:	01910191 	.word	0x01910191
 8001738:	01910191 	.word	0x01910191
 800173c:	01910191 	.word	0x01910191
 8001740:	01910191 	.word	0x01910191
 8001744:	01910191 	.word	0x01910191
 8001748:	01910191 	.word	0x01910191
 800174c:	01910191 	.word	0x01910191
 8001750:	013c0191 	.word	0x013c0191
 8001754:	01b9013c 	.word	0x01b9013c
 8001758:	01910191 	.word	0x01910191
 800175c:	01de0191 	.word	0x01de0191
 8001760:	013c013c 	.word	0x013c013c
 8001764:	013c013c 	.word	0x013c013c
 8001768:	013c013c 	.word	0x013c013c
 800176c:	013c013c 	.word	0x013c013c
 8001770:	013c013c 	.word	0x013c013c
 8001774:	013c013c 	.word	0x013c013c
 8001778:	013c013c 	.word	0x013c013c
 800177c:	013c013c 	.word	0x013c013c
 8001780:	013c013c 	.word	0x013c013c
 8001784:	013c013c 	.word	0x013c013c
 8001788:	013c013c 	.word	0x013c013c
 800178c:	013c013c 	.word	0x013c013c
 8001790:	013c013c 	.word	0x013c013c
 8001794:	013c013c 	.word	0x013c013c
 8001798:	013c013c 	.word	0x013c013c
 800179c:	013c0191 	.word	0x013c0191
 80017a0:	013c013c 	.word	0x013c013c
 80017a4:	01b9013c 	.word	0x01b9013c
 80017a8:	01b901b9 	.word	0x01b901b9
 80017ac:	01910191 	.word	0x01910191
 80017b0:	01910191 	.word	0x01910191
 80017b4:	01b901de 	.word	0x01b901de
 80017b8:	01910191 	.word	0x01910191
 80017bc:	01910191 	.word	0x01910191
 80017c0:	01910191 	.word	0x01910191
 80017c4:	01910191 	.word	0x01910191
 80017c8:	01910191 	.word	0x01910191
 80017cc:	01de0191 	.word	0x01de0191
 80017d0:	013c01b9 	.word	0x013c01b9
 80017d4:	01910191 	.word	0x01910191
 80017d8:	01910191 	.word	0x01910191
 80017dc:	013c0191 	.word	0x013c0191
 80017e0:	0191013c 	.word	0x0191013c
 80017e4:	01de0191 	.word	0x01de0191
 80017e8:	01b901de 	.word	0x01b901de
 80017ec:	01b901b9 	.word	0x01b901b9
 80017f0:	01b901b9 	.word	0x01b901b9
 80017f4:	019101de 	.word	0x019101de
 80017f8:	01b90191 	.word	0x01b90191
 80017fc:	0191013c 	.word	0x0191013c
 8001800:	01de0191 	.word	0x01de0191
 8001804:	01b901b9 	.word	0x01b901b9
 8001808:	01b901b9 	.word	0x01b901b9
 800180c:	01b901b9 	.word	0x01b901b9
 8001810:	01b901b9 	.word	0x01b901b9
 8001814:	01b901b9 	.word	0x01b901b9
 8001818:	01de01b9 	.word	0x01de01b9
 800181c:	01de013c 	.word	0x01de013c
 8001820:	01b901b9 	.word	0x01b901b9
 8001824:	019101b9 	.word	0x019101b9
 8001828:	01910191 	.word	0x01910191
      bErrorCode = ERROR_CODE_WRONG_CMD;
 800182c:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 800182e:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001830:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001834:	4628      	mov	r0, r5
 8001836:	f001 f8bd 	bl	80029b4 <UI_ExecCmd>
 800183a:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 800183e:	2800      	cmp	r0, #0
 8001840:	f43f aea7 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
 8001844:	e03c      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
 8001846:	ac04      	add	r4, sp, #16
 8001848:	2100      	movs	r1, #0
 800184a:	4620      	mov	r0, r4
 800184c:	2220      	movs	r2, #32
 800184e:	f004 fc8f 	bl	8006170 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001852:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8001856:	f10d 0012 	add.w	r0, sp, #18
 800185a:	1e71      	subs	r1, r6, #1
 800185c:	2300      	movs	r3, #0
 800185e:	e005      	b.n	800186c <MCP_ReceivedFrame+0x324>
 8001860:	3301      	adds	r3, #1
 8001862:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001864:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001868:	f000 815c 	beq.w	8001b24 <MCP_ReceivedFrame+0x5dc>
 800186c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001870:	2a09      	cmp	r2, #9
 8001872:	d1f5      	bne.n	8001860 <MCP_ReceivedFrame+0x318>
 8001874:	1d5a      	adds	r2, r3, #5
 8001876:	1dd9      	adds	r1, r3, #7
 8001878:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 800187a:	5cb2      	ldrb	r2, [r6, r2]
 800187c:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001880:	5c72      	ldrb	r2, [r6, r1]
 8001882:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001886:	5cf3      	ldrb	r3, [r6, r3]
 8001888:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 800188c:	4622      	mov	r2, r4
 800188e:	2320      	movs	r3, #32
 8001890:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001894:	21f0      	movs	r1, #240	; 0xf0
 8001896:	47a0      	blx	r4
      bNoError = true;
 8001898:	2301      	movs	r3, #1
 800189a:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 800189e:	e00f      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
      hIdRef = buffer[2] + (buffer[3] << 8);
 80018a0:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 80018a2:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 80018a4:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 80018a6:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 80018a8:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 80018ac:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 80018b0:	b212      	sxth	r2, r2
 80018b2:	b209      	sxth	r1, r1
 80018b4:	4628      	mov	r0, r5
 80018b6:	f001 f90f 	bl	8002ad8 <UI_SetCurrentReferences>
      bNoError = true;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80018c0:	2300      	movs	r3, #0
 80018c2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80018c6:	461a      	mov	r2, r3
 80018c8:	21f0      	movs	r1, #240	; 0xf0
 80018ca:	47a0      	blx	r4
}
 80018cc:	b00d      	add	sp, #52	; 0x34
 80018ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80018d0:	4c96      	ldr	r4, [pc, #600]	; (8001b2c <MCP_ReceivedFrame+0x5e4>)
      stepList.data = buffer;
 80018d2:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80018d4:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80018d6:	4621      	mov	r1, r4
 80018d8:	a804      	add	r0, sp, #16
      stepList.len = Size;
 80018da:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80018de:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80018e2:	f001 f909 	bl	8002af8 <UI_GetMPInfo>
 80018e6:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 80018ea:	2800      	cmp	r0, #0
 80018ec:	f43f ae51 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 80018f0:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 80018f4:	7923      	ldrb	r3, [r4, #4]
 80018f6:	6822      	ldr	r2, [r4, #0]
 80018f8:	21f0      	movs	r1, #240	; 0xf0
 80018fa:	47b0      	blx	r6
  if (RequireAck)
 80018fc:	e650      	b.n	80015a0 <MCP_ReceivedFrame+0x58>
 80018fe:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8001902:	ac04      	add	r4, sp, #16
 8001904:	3b01      	subs	r3, #1
 8001906:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001908:	2000      	movs	r0, #0
 800190a:	e004      	b.n	8001916 <MCP_ReceivedFrame+0x3ce>
 800190c:	3001      	adds	r0, #1
 800190e:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001910:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001914:	d0ba      	beq.n	800188c <MCP_ReceivedFrame+0x344>
 8001916:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800191a:	b2c6      	uxtb	r6, r0
 800191c:	2900      	cmp	r1, #0
 800191e:	d1f5      	bne.n	800190c <MCP_ReceivedFrame+0x3c4>
        outBuff[i] = 0;
 8001920:	f1c6 021f 	rsb	r2, r6, #31
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	3201      	adds	r2, #1
 8001928:	4420      	add	r0, r4
 800192a:	f004 fc21 	bl	8006170 <memset>
 800192e:	e7ad      	b.n	800188c <MCP_ReceivedFrame+0x344>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001930:	7970      	ldrb	r0, [r6, #5]
 8001932:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001934:	7873      	ldrb	r3, [r6, #1]
 8001936:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001938:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800193c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001940:	b292      	uxth	r2, r2
 8001942:	b209      	sxth	r1, r1
 8001944:	4628      	mov	r0, r5
 8001946:	f001 f883 	bl	8002a50 <UI_ExecTorqueRamp>
 800194a:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 800194e:	2800      	cmp	r0, #0
 8001950:	f43f ae1f 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
 8001954:	e7b4      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001956:	f10d 030e 	add.w	r3, sp, #14
 800195a:	7831      	ldrb	r1, [r6, #0]
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	f10d 020a 	add.w	r2, sp, #10
 8001962:	ab03      	add	r3, sp, #12
 8001964:	4628      	mov	r0, r5
 8001966:	f001 f87d 	bl	8002a64 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800196a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 800196e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8001972:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001976:	f8ad 1014 	strh.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800197a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800197e:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001980:	9304      	str	r3, [sp, #16]
      outBuff[6] = (uint8_t)(Durationms);
 8001982:	f8ad 2016 	strh.w	r2, [sp, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001986:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 800198a:	2308      	movs	r3, #8
 800198c:	aa04      	add	r2, sp, #16
 800198e:	21f0      	movs	r1, #240	; 0xf0
 8001990:	47a0      	blx	r4
  if (RequireAck)
 8001992:	f89d 0009 	ldrb.w	r0, [sp, #9]
    if (bNoError)
 8001996:	2800      	cmp	r0, #0
 8001998:	f43f adfb 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
 800199c:	e790      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800199e:	78b1      	ldrb	r1, [r6, #2]
 80019a0:	7873      	ldrb	r3, [r6, #1]
 80019a2:	78f2      	ldrb	r2, [r6, #3]
 80019a4:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80019a6:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 80019a8:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80019aa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80019ae:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80019b2:	4a5f      	ldr	r2, [pc, #380]	; (8001b30 <MCP_ReceivedFrame+0x5e8>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80019b4:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80019b6:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80019ba:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 80019be:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80019c0:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80019c4:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80019c8:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 80019ca:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80019ce:	7831      	ldrb	r1, [r6, #0]
 80019d0:	9000      	str	r0, [sp, #0]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	b292      	uxth	r2, r2
 80019d6:	4628      	mov	r0, r5
 80019d8:	f001 f862 	bl	8002aa0 <UI_SetRevupData>
 80019dc:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80019e0:	2800      	cmp	r0, #0
 80019e2:	f43f add6 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
 80019e6:	e76b      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019e8:	7877      	ldrb	r7, [r6, #1]
 80019ea:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019ec:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019ee:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019f0:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019f2:	78f1      	ldrb	r1, [r6, #3]
 80019f4:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80019f8:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019fc:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001a00:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001a04:	b292      	uxth	r2, r2
 8001a06:	4628      	mov	r0, r5
 8001a08:	f001 f810 	bl	8002a2c <UI_ExecSpeedRamp>
 8001a0c:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001a10:	2800      	cmp	r0, #0
 8001a12:	f43f adbe 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
 8001a16:	e753      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001a18:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a1c:	230b      	movs	r3, #11
 8001a1e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001a22:	2800      	cmp	r0, #0
 8001a24:	f43f adb5 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
 8001a28:	e74a      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
 8001a2a:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001a34:	2800      	cmp	r0, #0
 8001a36:	f43f adac 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
 8001a3a:	e741      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001a3c:	f10d 0209 	add.w	r2, sp, #9
 8001a40:	4628      	mov	r0, r5
 8001a42:	f000 fdaf 	bl	80025a4 <UI_GetReg>
          if ( bNoError == true )
 8001a46:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001a4a:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f43f ada0 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001a52:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001a56:	2302      	movs	r3, #2
 8001a58:	aa04      	add	r2, sp, #16
 8001a5a:	21f0      	movs	r1, #240	; 0xf0
 8001a5c:	47a0      	blx	r4
  if (RequireAck)
 8001a5e:	e59f      	b.n	80015a0 <MCP_ReceivedFrame+0x58>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001a60:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a64:	2302      	movs	r3, #2
 8001a66:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	f43f ad91 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
 8001a70:	e726      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001a72:	78b2      	ldrb	r2, [r6, #2]
 8001a74:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001a76:	4628      	mov	r0, r5
 8001a78:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001a7c:	f000 fcd2 	bl	8002424 <UI_SetReg>
 8001a80:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001a84:	2800      	cmp	r0, #0
 8001a86:	f43f ad84 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
 8001a8a:	e719      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001a8c:	f10d 0209 	add.w	r2, sp, #9
 8001a90:	4628      	mov	r0, r5
 8001a92:	f000 fd87 	bl	80025a4 <UI_GetReg>
          if ( bNoError == true )
 8001a96:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001a9a:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f43f ad78 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001aa2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	aa04      	add	r2, sp, #16
 8001aaa:	21f0      	movs	r1, #240	; 0xf0
 8001aac:	47a0      	blx	r4
  if (RequireAck)
 8001aae:	e577      	b.n	80015a0 <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001ab0:	78b4      	ldrb	r4, [r6, #2]
 8001ab2:	7873      	ldrb	r3, [r6, #1]
 8001ab4:	78f0      	ldrb	r0, [r6, #3]
 8001ab6:	7932      	ldrb	r2, [r6, #4]
 8001ab8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001abc:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001ac0:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	f000 fcad 	bl	8002424 <UI_SetReg>
 8001aca:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	f43f ad5f 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
 8001ad4:	e6f4      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001ad6:	f10d 0209 	add.w	r2, sp, #9
 8001ada:	4628      	mov	r0, r5
 8001adc:	f000 fd62 	bl	80025a4 <UI_GetReg>
           if ( bNoError == true )
 8001ae0:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001ae4:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f43f ad53 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001aec:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001af0:	2301      	movs	r3, #1
 8001af2:	aa04      	add	r2, sp, #16
 8001af4:	21f0      	movs	r1, #240	; 0xf0
 8001af6:	47a0      	blx	r4
  if (RequireAck)
 8001af8:	e552      	b.n	80015a0 <MCP_ReceivedFrame+0x58>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001afa:	7872      	ldrb	r2, [r6, #1]
 8001afc:	4628      	mov	r0, r5
 8001afe:	f000 fc91 	bl	8002424 <UI_SetReg>
 8001b02:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001b06:	2800      	cmp	r0, #0
 8001b08:	f43f ad43 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
 8001b0c:	e6d8      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001b0e:	7872      	ldrb	r2, [r6, #1]
 8001b10:	2100      	movs	r1, #0
 8001b12:	4628      	mov	r0, r5
 8001b14:	f000 fc86 	bl	8002424 <UI_SetReg>
 8001b18:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	f43f ad38 	beq.w	8001592 <MCP_ReceivedFrame+0x4a>
 8001b22:	e6cd      	b.n	80018c0 <MCP_ReceivedFrame+0x378>
 8001b24:	2326      	movs	r3, #38	; 0x26
 8001b26:	2124      	movs	r1, #36	; 0x24
 8001b28:	2222      	movs	r2, #34	; 0x22
 8001b2a:	e6a6      	b.n	800187a <MCP_ReceivedFrame+0x332>
 8001b2c:	200005b8 	.word	0x200005b8
 8001b30:	2aaaaaab 	.word	0x2aaaaaab

08001b34 <MCP_WaitNextFrame>:
{
 8001b34:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001b36:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001b38:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001b3a:	6980      	ldr	r0, [r0, #24]
 8001b3c:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8001b44:	69a0      	ldr	r0, [r4, #24]
 8001b46:	6a23      	ldr	r3, [r4, #32]
}
 8001b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001b4c:	4718      	bx	r3
 8001b4e:	bf00      	nop

08001b50 <MCP_Init>:
{
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	b083      	sub	sp, #12
 8001b54:	4604      	mov	r4, r0
  FCP_SetClient( pFCP, pHandle,
 8001b56:	4f0b      	ldr	r7, [pc, #44]	; (8001b84 <MCP_Init+0x34>)
{
 8001b58:	4608      	mov	r0, r1
 8001b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8001b5c:	61a0      	str	r0, [r4, #24]
  pHandle->s_fwVer = s_fwVer;
 8001b5e:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
{
 8001b62:	4616      	mov	r6, r2
 8001b64:	461d      	mov	r5, r3
  FCP_SetClient( pFCP, pHandle,
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <MCP_Init+0x38>)
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <MCP_Init+0x3c>)
 8001b6a:	9700      	str	r7, [sp, #0]
 8001b6c:	4621      	mov	r1, r4
{
 8001b6e:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8001b70:	f002 fc04 	bl	800437c <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8001b74:	e9c4 6507 	strd	r6, r5, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001b78:	6267      	str	r7, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f7ff ffda 	bl	8001b34 <MCP_WaitNextFrame>
}
 8001b80:	b003      	add	sp, #12
 8001b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b84:	08001b91 	.word	0x08001b91
 8001b88:	08001b99 	.word	0x08001b99
 8001b8c:	08001549 	.word	0x08001549

08001b90 <MCP_OnTimeOut>:
{
 8001b90:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001b92:	f7ff ffcf 	bl	8001b34 <MCP_WaitNextFrame>
}
 8001b96:	bd08      	pop	{r3, pc}

08001b98 <MCP_SentFrame>:
{
 8001b98:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001b9a:	f7ff ffcb 	bl	8001b34 <MCP_WaitNextFrame>
}
 8001b9e:	bd08      	pop	{r3, pc}

08001ba0 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001ba0:	b530      	push	{r4, r5, lr}
 8001ba2:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001ba4:	f001 fe72 	bl	800388c <HAL_RCC_GetHCLKFreq>
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001baa:	4d0c      	ldr	r5, [pc, #48]	; (8001bdc <MX_MotorControl_Init+0x3c>)
 8001bac:	4c0c      	ldr	r4, [pc, #48]	; (8001be0 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001bae:	fba3 3000 	umull	r3, r0, r3, r0
 8001bb2:	09c0      	lsrs	r0, r0, #7
 8001bb4:	f001 fa98 	bl	80030e8 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001bb8:	4629      	mov	r1, r5
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff f932 	bl	8000e24 <MCboot>
  mc_lock_pins();
 8001bc0:	f7ff fc28 	bl	8001414 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <MX_MotorControl_Init+0x44>)
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	4807      	ldr	r0, [pc, #28]	; (8001be8 <MX_MotorControl_Init+0x48>)
 8001bca:	462b      	mov	r3, r5
 8001bcc:	4622      	mov	r2, r4
 8001bce:	2101      	movs	r1, #1
 8001bd0:	f000 fb9a 	bl	8002308 <UI_TaskInit>
}
 8001bd4:	b003      	add	sp, #12
 8001bd6:	bd30      	pop	{r4, r5, pc}
 8001bd8:	10624dd3 	.word	0x10624dd3
 8001bdc:	200007bc 	.word	0x200007bc
 8001be0:	200007b8 	.word	0x200007b8
 8001be4:	08006408 	.word	0x08006408
 8001be8:	20000568 	.word	0x20000568

08001bec <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001bec:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <RCM_RegisterRegConv+0x19c>)
 8001bee:	681a      	ldr	r2, [r3, #0]
{
 8001bf0:	b4f0      	push	{r4, r5, r6, r7}
 8001bf2:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001bf4:	2a00      	cmp	r2, #0
 8001bf6:	f000 808f 	beq.w	8001d18 <RCM_RegisterRegConv+0x12c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001bfa:	7904      	ldrb	r4, [r0, #4]
 8001bfc:	7910      	ldrb	r0, [r2, #4]
 8001bfe:	4284      	cmp	r4, r0
 8001c00:	d01e      	beq.n	8001c40 <RCM_RegisterRegConv+0x54>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c02:	685d      	ldr	r5, [r3, #4]
 8001c04:	2d00      	cmp	r5, #0
 8001c06:	f000 80ad 	beq.w	8001d64 <RCM_RegisterRegConv+0x178>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c0a:	792a      	ldrb	r2, [r5, #4]
 8001c0c:	42a2      	cmp	r2, r4
  uint8_t handle=255;
 8001c0e:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c12:	f000 8089 	beq.w	8001d28 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c16:	689e      	ldr	r6, [r3, #8]
 8001c18:	b1fe      	cbz	r6, 8001c5a <RCM_RegisterRegConv+0x6e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c1a:	7932      	ldrb	r2, [r6, #4]
 8001c1c:	42a2      	cmp	r2, r4
 8001c1e:	f000 8094 	beq.w	8001d4a <RCM_RegisterRegConv+0x15e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c22:	68dd      	ldr	r5, [r3, #12]
 8001c24:	2d00      	cmp	r5, #0
 8001c26:	f000 8099 	beq.w	8001d5c <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c2a:	792a      	ldrb	r2, [r5, #4]
 8001c2c:	42a2      	cmp	r2, r4
 8001c2e:	f000 80a8 	beq.w	8001d82 <RCM_RegisterRegConv+0x196>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001c32:	2803      	cmp	r0, #3
 8001c34:	bf98      	it	ls
 8001c36:	680a      	ldrls	r2, [r1, #0]
 8001c38:	d91e      	bls.n	8001c78 <RCM_RegisterRegConv+0x8c>
 8001c3a:	20ff      	movs	r0, #255	; 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001c3c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c3e:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c40:	6810      	ldr	r0, [r2, #0]
 8001c42:	680a      	ldr	r2, [r1, #0]
 8001c44:	4290      	cmp	r0, r2
 8001c46:	f000 8087 	beq.w	8001d58 <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c4a:	685d      	ldr	r5, [r3, #4]
 8001c4c:	2d00      	cmp	r5, #0
 8001c4e:	d1dc      	bne.n	8001c0a <RCM_RegisterRegConv+0x1e>
 8001c50:	689e      	ldr	r6, [r3, #8]
      i++;
 8001c52:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c54:	2e00      	cmp	r6, #0
 8001c56:	d1e0      	bne.n	8001c1a <RCM_RegisterRegConv+0x2e>
 8001c58:	e004      	b.n	8001c64 <RCM_RegisterRegConv+0x78>
 8001c5a:	2804      	cmp	r0, #4
 8001c5c:	f240 808e 	bls.w	8001d7c <RCM_RegisterRegConv+0x190>
 8001c60:	680a      	ldr	r2, [r1, #0]
      i++;
 8001c62:	2002      	movs	r0, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c64:	68dd      	ldr	r5, [r3, #12]
 8001c66:	b13d      	cbz	r5, 8001c78 <RCM_RegisterRegConv+0x8c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c68:	792e      	ldrb	r6, [r5, #4]
 8001c6a:	790c      	ldrb	r4, [r1, #4]
 8001c6c:	42a6      	cmp	r6, r4
 8001c6e:	d103      	bne.n	8001c78 <RCM_RegisterRegConv+0x8c>
 8001c70:	682c      	ldr	r4, [r5, #0]
 8001c72:	4294      	cmp	r4, r2
 8001c74:	d1dd      	bne.n	8001c32 <RCM_RegisterRegConv+0x46>
      i++;
 8001c76:	2003      	movs	r0, #3
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001c78:	6894      	ldr	r4, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001c7a:	4d44      	ldr	r5, [pc, #272]	; (8001d8c <RCM_RegisterRegConv+0x1a0>)
      RCM_handle_array [handle] = regConv;
 8001c7c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001c80:	2300      	movs	r3, #0
 8001c82:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001c86:	07e3      	lsls	r3, r4, #31
 8001c88:	d411      	bmi.n	8001cae <RCM_RegisterRegConv+0xc2>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001c8a:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001c8c:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001c90:	f023 0320 	bic.w	r3, r3, #32
 8001c94:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001c96:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001c98:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001c9a:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ca2:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001ca4:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001ca6:	6893      	ldr	r3, [r2, #8]
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001cae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001cb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001cb4:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001cb6:	790b      	ldrb	r3, [r1, #4]
 8001cb8:	2b09      	cmp	r3, #9
 8001cba:	d83c      	bhi.n	8001d36 <RCM_RegisterRegConv+0x14a>
 8001cbc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8001cc0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8001cc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001cd0:	fa94 f4a4 	rbit	r4, r4
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001cd4:	fab4 f484 	clz	r4, r4
 8001cd8:	40e6      	lsrs	r6, r4
 8001cda:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8001cdc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001ce0:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8001ce4:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 8001ce8:	fa94 f7a4 	rbit	r7, r4
 8001cec:	fab7 f787 	clz	r7, r7
 8001cf0:	fa94 f4a4 	rbit	r4, r4
 8001cf4:	f04f 0c07 	mov.w	ip, #7
 8001cf8:	6889      	ldr	r1, [r1, #8]
 8001cfa:	fab4 f484 	clz	r4, r4
 8001cfe:	fa23 f707 	lsr.w	r7, r3, r7
 8001d02:	fa0c f707 	lsl.w	r7, ip, r7
 8001d06:	40e3      	lsrs	r3, r4
 8001d08:	4099      	lsls	r1, r3
 8001d0a:	ea25 0307 	bic.w	r3, r5, r7
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
}
 8001d14:	bcf0      	pop	{r4, r5, r6, r7}
 8001d16:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d18:	685d      	ldr	r5, [r3, #4]
 8001d1a:	b355      	cbz	r5, 8001d72 <RCM_RegisterRegConv+0x186>
 8001d1c:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8001d1e:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d20:	792a      	ldrb	r2, [r5, #4]
 8001d22:	42a2      	cmp	r2, r4
 8001d24:	f47f af77 	bne.w	8001c16 <RCM_RegisterRegConv+0x2a>
 8001d28:	682d      	ldr	r5, [r5, #0]
 8001d2a:	680a      	ldr	r2, [r1, #0]
 8001d2c:	4295      	cmp	r5, r2
 8001d2e:	f47f af72 	bne.w	8001c16 <RCM_RegisterRegConv+0x2a>
 8001d32:	2001      	movs	r0, #1
 8001d34:	e7a0      	b.n	8001c78 <RCM_RegisterRegConv+0x8c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001d36:	2403      	movs	r4, #3
 8001d38:	f06f 051d 	mvn.w	r5, #29
 8001d3c:	fb14 5403 	smlabb	r4, r4, r3, r5
 8001d40:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8001d44:	f003 7600 	and.w	r6, r3, #33554432	; 0x2000000
 8001d48:	e7c0      	b.n	8001ccc <RCM_RegisterRegConv+0xe0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d4a:	6835      	ldr	r5, [r6, #0]
 8001d4c:	680a      	ldr	r2, [r1, #0]
 8001d4e:	4295      	cmp	r5, r2
 8001d50:	f47f af67 	bne.w	8001c22 <RCM_RegisterRegConv+0x36>
      i++;
 8001d54:	2002      	movs	r0, #2
 8001d56:	e78f      	b.n	8001c78 <RCM_RegisterRegConv+0x8c>
  uint8_t i=0;
 8001d58:	2000      	movs	r0, #0
 8001d5a:	e78d      	b.n	8001c78 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d5c:	2804      	cmp	r0, #4
 8001d5e:	680a      	ldr	r2, [r1, #0]
 8001d60:	d889      	bhi.n	8001c76 <RCM_RegisterRegConv+0x8a>
 8001d62:	e789      	b.n	8001c78 <RCM_RegisterRegConv+0x8c>
 8001d64:	689e      	ldr	r6, [r3, #8]
      i++;
 8001d66:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d68:	2e00      	cmp	r6, #0
 8001d6a:	f47f af56 	bne.w	8001c1a <RCM_RegisterRegConv+0x2e>
 8001d6e:	680a      	ldr	r2, [r1, #0]
 8001d70:	e778      	b.n	8001c64 <RCM_RegisterRegConv+0x78>
 8001d72:	689e      	ldr	r6, [r3, #8]
 8001d74:	b116      	cbz	r6, 8001d7c <RCM_RegisterRegConv+0x190>
 8001d76:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8001d78:	4628      	mov	r0, r5
 8001d7a:	e74e      	b.n	8001c1a <RCM_RegisterRegConv+0x2e>
 8001d7c:	680a      	ldr	r2, [r1, #0]
 8001d7e:	4630      	mov	r0, r6
 8001d80:	e770      	b.n	8001c64 <RCM_RegisterRegConv+0x78>
 8001d82:	680a      	ldr	r2, [r1, #0]
 8001d84:	e774      	b.n	8001c70 <RCM_RegisterRegConv+0x84>
 8001d86:	bf00      	nop
 8001d88:	200007e8 	.word	0x200007e8
 8001d8c:	200007c4 	.word	0x200007c4

08001d90 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8001d90:	b430      	push	{r4, r5}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <RCM_ExecRegularConv+0x70>)
 8001d94:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d98:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	d827      	bhi.n	8001df0 <RCM_ExecRegularConv+0x60>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001da0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001da4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001da8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dac:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001db0:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001db4:	f44f 7500 	mov.w	r5, #512	; 0x200
 8001db8:	fab1 f181 	clz	r1, r1
 8001dbc:	40cd      	lsrs	r5, r1
 8001dbe:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8001dca:	f020 001f 	bic.w	r0, r0, #31
 8001dce:	4303      	orrs	r3, r0

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8001dd0:	0151      	lsls	r1, r2, #5
 8001dd2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8001dd6:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8001dda:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001ddc:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8001dde:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001de2:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001de4:	079b      	lsls	r3, r3, #30
 8001de6:	d5fc      	bpl.n	8001de2 <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001de8:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8001dea:	bc30      	pop	{r4, r5}
 8001dec:	b280      	uxth	r0, r0
 8001dee:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001df0:	2103      	movs	r1, #3
 8001df2:	f06f 001d 	mvn.w	r0, #29
 8001df6:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001dfa:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8001dfe:	e7d5      	b.n	8001dac <RCM_ExecRegularConv+0x1c>
 8001e00:	200007e8 	.word	0x200007e8

08001e04 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8001e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001e08:	4c0f      	ldr	r4, [pc, #60]	; (8001e48 <RCM_ExecUserConv+0x44>)
 8001e0a:	7823      	ldrb	r3, [r4, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d001      	beq.n	8001e14 <RCM_ExecUserConv+0x10>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e14:	4d0d      	ldr	r5, [pc, #52]	; (8001e4c <RCM_ExecUserConv+0x48>)
 8001e16:	4f0e      	ldr	r7, [pc, #56]	; (8001e50 <RCM_ExecUserConv+0x4c>)
 8001e18:	7828      	ldrb	r0, [r5, #0]
 8001e1a:	f7ff ffb9 	bl	8001d90 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e1e:	782d      	ldrb	r5, [r5, #0]
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <RCM_ExecUserConv+0x50>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e22:	8038      	strh	r0, [r7, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e24:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001e28:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e2a:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001e2c:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e2e:	2e00      	cmp	r6, #0
 8001e30:	d0ee      	beq.n	8001e10 <RCM_ExecUserConv+0xc>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001e36:	2000      	movs	r0, #0
 8001e38:	7020      	strb	r0, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	4633      	mov	r3, r6
}
 8001e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e44:	4718      	bx	r3
 8001e46:	bf00      	nop
 8001e48:	200007e4 	.word	0x200007e4
 8001e4c:	200007c0 	.word	0x200007c0
 8001e50:	200007f8 	.word	0x200007f8
 8001e54:	200007c4 	.word	0x200007c4

08001e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_MspInit+0x38>)
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	9100      	str	r1, [sp, #0]
 8001e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
 8001e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e6a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e6e:	9200      	str	r2, [sp, #0]
 8001e70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	9101      	str	r1, [sp, #4]
 8001e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001e86:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e88:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001e8a:	f001 b8d3 	b.w	8003034 <HAL_NVIC_SetPriorityGrouping>
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800

08001e94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e94:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001e96:	6802      	ldr	r2, [r0, #0]
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <HAL_ADC_MspInit+0x84>)
{
 8001e9a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001e9e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001ea4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001ea8:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8001eaa:	d001      	beq.n	8001eb0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001eac:	b00b      	add	sp, #44	; 0x2c
 8001eae:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eb0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001eb4:	9401      	str	r4, [sp, #4]
 8001eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb8:	4818      	ldr	r0, [pc, #96]	; (8001f1c <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ebe:	645a      	str	r2, [r3, #68]	; 0x44
 8001ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ec2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001ec6:	9201      	str	r2, [sp, #4]
 8001ec8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eca:	9402      	str	r4, [sp, #8]
 8001ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ece:	f042 0204 	orr.w	r2, r2, #4
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed6:	f002 0204 	and.w	r2, r2, #4
 8001eda:	9202      	str	r2, [sp, #8]
 8001edc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	9403      	str	r4, [sp, #12]
 8001ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8001ef8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efc:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efe:	f001 f913 	bl	8003128 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8001f02:	2203      	movs	r2, #3
 8001f04:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	4806      	ldr	r0, [pc, #24]	; (8001f20 <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8001f0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f001 f90a 	bl	8003128 <HAL_GPIO_Init>
}
 8001f14:	b00b      	add	sp, #44	; 0x2c
 8001f16:	bd30      	pop	{r4, r5, pc}
 8001f18:	40012000 	.word	0x40012000
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020000 	.word	0x40020000

08001f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f24:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8001f26:	6802      	ldr	r2, [r0, #0]
 8001f28:	4938      	ldr	r1, [pc, #224]	; (800200c <HAL_TIM_Base_MspInit+0xe8>)
{
 8001f2a:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8001f2e:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001f34:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8001f38:	930a      	str	r3, [sp, #40]	; 0x28
  if(htim_base->Instance==TIM1)
 8001f3a:	d004      	beq.n	8001f46 <HAL_TIM_Base_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001f3c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001f40:	d026      	beq.n	8001f90 <HAL_TIM_Base_MspInit+0x6c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f42:	b00c      	add	sp, #48	; 0x30
 8001f44:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f46:	4a32      	ldr	r2, [pc, #200]	; (8002010 <HAL_TIM_Base_MspInit+0xec>)
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001f4c:	4831      	ldr	r0, [pc, #196]	; (8002014 <HAL_TIM_Base_MspInit+0xf0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4e:	f041 0101 	orr.w	r1, r1, #1
 8001f52:	6451      	str	r1, [r2, #68]	; 0x44
 8001f54:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f56:	f001 0101 	and.w	r1, r1, #1
 8001f5a:	9101      	str	r1, [sp, #4]
 8001f5c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	9302      	str	r3, [sp, #8]
 8001f60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6313      	str	r3, [r2, #48]	; 0x30
 8001f68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f70:	2301      	movs	r3, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f74:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001f76:	2201      	movs	r2, #1
 8001f78:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001f7c:	2440      	movs	r4, #64	; 0x40
 8001f7e:	2502      	movs	r5, #2
 8001f80:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001f84:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001f88:	f001 f8ce 	bl	8003128 <HAL_GPIO_Init>
}
 8001f8c:	b00c      	add	sp, #48	; 0x30
 8001f8e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f90:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8001f94:	9303      	str	r3, [sp, #12]
 8001f96:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f98:	481f      	ldr	r0, [pc, #124]	; (8002018 <HAL_TIM_Base_MspInit+0xf4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9a:	f041 0101 	orr.w	r1, r1, #1
 8001f9e:	6411      	str	r1, [r2, #64]	; 0x40
 8001fa0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001fa2:	f001 0101 	and.w	r1, r1, #1
 8001fa6:	9103      	str	r1, [sp, #12]
 8001fa8:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	9304      	str	r3, [sp, #16]
 8001fac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001fae:	f041 0102 	orr.w	r1, r1, #2
 8001fb2:	6311      	str	r1, [r2, #48]	; 0x30
 8001fb4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001fb6:	f001 0102 	and.w	r1, r1, #2
 8001fba:	9104      	str	r1, [sp, #16]
 8001fbc:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	9305      	str	r3, [sp, #20]
 8001fc0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	9305      	str	r3, [sp, #20]
 8001fd0:	9905      	ldr	r1, [sp, #20]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 8001fd2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	2400      	movs	r4, #0
 8001fda:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fdc:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 8001fe0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001fe4:	e9cd 4508 	strd	r4, r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fe8:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f001 f89d 	bl	8003128 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8001fee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ff2:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <HAL_TIM_Base_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ff6:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8001ff8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8001ffa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001ffe:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002002:	f001 f891 	bl	8003128 <HAL_GPIO_Init>
}
 8002006:	b00c      	add	sp, #48	; 0x30
 8002008:	bd70      	pop	{r4, r5, r6, pc}
 800200a:	bf00      	nop
 800200c:	40010000 	.word	0x40010000
 8002010:	40023800 	.word	0x40023800
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400

0800201c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800201c:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800201e:	6801      	ldr	r1, [r0, #0]
 8002020:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <HAL_TIM_MspPostInit+0x9c>)
{
 8002022:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8002026:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800202c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002030:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8002032:	d001      	beq.n	8002038 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002034:	b008      	add	sp, #32
 8002036:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8002040:	481e      	ldr	r0, [pc, #120]	; (80020bc <HAL_TIM_MspPostInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	f041 0101 	orr.w	r1, r1, #1
 8002046:	6311      	str	r1, [r2, #48]	; 0x30
 8002048:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800204a:	f001 0101 	and.w	r1, r1, #1
 800204e:	9100      	str	r1, [sp, #0]
 8002050:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	6313      	str	r3, [r2, #48]	; 0x30
 800205c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002064:	2401      	movs	r4, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002068:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	2302      	movs	r3, #2
 800206e:	2601      	movs	r6, #1
 8002070:	2702      	movs	r7, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8002072:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8002074:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002078:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 800207c:	f001 f854 	bl	8003128 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002080:	2203      	movs	r2, #3
 8002082:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	a902      	add	r1, sp, #8
 8002086:	480e      	ldr	r0, [pc, #56]	; (80020c0 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002088:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800208a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800208e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002092:	f44f 66e0 	mov.w	r6, #1792	; 0x700
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	f001 f847 	bl	8003128 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800209a:	2702      	movs	r7, #2
 800209c:	2202      	movs	r2, #2
 800209e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a0:	4806      	ldr	r0, [pc, #24]	; (80020bc <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020a2:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80020a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80020aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	f001 f83b 	bl	8003128 <HAL_GPIO_Init>
}
 80020b2:	b008      	add	sp, #32
 80020b4:	bdd0      	pop	{r4, r6, r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40010000 	.word	0x40010000
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40020400 	.word	0x40020400

080020c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80020c6:	6801      	ldr	r1, [r0, #0]
 80020c8:	4a18      	ldr	r2, [pc, #96]	; (800212c <HAL_UART_MspInit+0x68>)
{
 80020ca:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80020ce:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80020d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80020d8:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 80020da:	d001      	beq.n	80020e0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020dc:	b009      	add	sp, #36	; 0x24
 80020de:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e0:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	4811      	ldr	r0, [pc, #68]	; (8002130 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ea:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80020ee:	6411      	str	r1, [r2, #64]	; 0x40
 80020f0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80020f2:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 80020f6:	9100      	str	r1, [sp, #0]
 80020f8:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6313      	str	r3, [r2, #48]	; 0x30
 8002104:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800210c:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002110:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002112:	2200      	movs	r2, #0
 8002114:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002118:	240c      	movs	r4, #12
 800211a:	2502      	movs	r5, #2
 800211c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002120:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f001 f800 	bl	8003128 <HAL_GPIO_Init>
}
 8002128:	b009      	add	sp, #36	; 0x24
 800212a:	bd30      	pop	{r4, r5, pc}
 800212c:	40004400 	.word	0x40004400
 8002130:	40020000 	.word	0x40020000

08002134 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <ADC_IRQHandler+0x18>)
 8002136:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8002138:	0752      	lsls	r2, r2, #29
 800213a:	d400      	bmi.n	800213e <ADC_IRQHandler+0xa>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800213c:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	f022 020c 	bic.w	r2, r2, #12
 8002144:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8002146:	f7ff b875 	b.w	8001234 <TSK_HighFrequencyTask>
 800214a:	bf00      	nop
 800214c:	40012000 	.word	0x40012000

08002150 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8002150:	4803      	ldr	r0, [pc, #12]	; (8002160 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002152:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002154:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002156:	f06f 0201 	mvn.w	r2, #1
 800215a:	611a      	str	r2, [r3, #16]
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800215c:	f003 bb3a 	b.w	80057d4 <R3_1_TIMx_UP_IRQHandler>
 8002160:	20000314 	.word	0x20000314

08002164 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002164:	4807      	ldr	r0, [pc, #28]	; (8002184 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 8002166:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002168:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800216a:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	0612      	lsls	r2, r2, #24
 8002170:	d504      	bpl.n	800217c <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002172:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002176:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 8002178:	f003 fb4a 	bl	8005810 <R3_1_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800217c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002180:	f7ff b82c 	b.w	80011dc <MC_Scheduler>
 8002184:	20000314 	.word	0x20000314

08002188 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8002188:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 800218a:	4c0c      	ldr	r4, [pc, #48]	; (80021bc <TIM2_IRQHandler+0x34>)
 800218c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	07d1      	lsls	r1, r2, #31
 8002192:	d40b      	bmi.n	80021ac <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	0792      	lsls	r2, r2, #30
 8002198:	d507      	bpl.n	80021aa <TIM2_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800219a:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 800219e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 80021a2:	4806      	ldr	r0, [pc, #24]	; (80021bc <TIM2_IRQHandler+0x34>)
 80021a4:	611a      	str	r2, [r3, #16]
 80021a6:	f002 ba99 	b.w	80046dc <HALL_TIMx_CC_IRQHandler>
}
 80021aa:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80021ac:	f06f 0201 	mvn.w	r2, #1
 80021b0:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 80021b2:	4620      	mov	r0, r4
 80021b4:	f002 fc26 	bl	8004a04 <HALL_TIMx_UP_IRQHandler>
 80021b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021ba:	e7eb      	b.n	8002194 <TIM2_IRQHandler+0xc>
 80021bc:	200000b4 	.word	0x200000b4

080021c0 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 80021c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80021c2:	4c1f      	ldr	r4, [pc, #124]	; (8002240 <USART2_IRQHandler+0x80>)
 80021c4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	0691      	lsls	r1, r2, #26
{
 80021cc:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80021ce:	d407      	bmi.n	80021e0 <USART2_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80021d0:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80021d2:	0612      	lsls	r2, r2, #24
 80021d4:	d413      	bmi.n	80021fe <USART2_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80021d6:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80021d8:	071b      	lsls	r3, r3, #28
 80021da:	d418      	bmi.n	800220e <USART2_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 80021dc:	b002      	add	sp, #8
 80021de:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80021e0:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 80021e2:	4620      	mov	r0, r4
 80021e4:	b2c9      	uxtb	r1, r1
 80021e6:	f003 feff 	bl	8005fe8 <UFCP_RX_IRQ_Handler>
 80021ea:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d021      	beq.n	8002234 <USART2_IRQHandler+0x74>
    if (retVal == 2)
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d01c      	beq.n	800222e <USART2_IRQHandler+0x6e>
 80021f4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80021f8:	681a      	ldr	r2, [r3, #0]
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80021fa:	0612      	lsls	r2, r2, #24
 80021fc:	d5eb      	bpl.n	80021d6 <USART2_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 80021fe:	4810      	ldr	r0, [pc, #64]	; (8002240 <USART2_IRQHandler+0x80>)
 8002200:	f003 fe5a 	bl	8005eb8 <UFCP_TX_IRQ_Handler>
 8002204:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002208:	681b      	ldr	r3, [r3, #0]
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800220a:	071b      	lsls	r3, r3, #28
 800220c:	d5e6      	bpl.n	80021dc <USART2_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 800220e:	480c      	ldr	r0, [pc, #48]	; (8002240 <USART2_IRQHandler+0x80>)
 8002210:	f003 ff4c 	bl	80060ac <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002214:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800221c:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002222:	9b01      	ldr	r3, [sp, #4]
}
 8002224:	b002      	add	sp, #8
 8002226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 800222a:	f000 b8cf 	b.w	80023cc <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStop();
 800222e:	f000 f8cd 	bl	80023cc <UI_SerialCommunicationTimeOutStop>
 8002232:	e7df      	b.n	80021f4 <USART2_IRQHandler+0x34>
      UI_SerialCommunicationTimeOutStart();
 8002234:	f000 f8d0 	bl	80023d8 <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 8002238:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800223c:	e7c8      	b.n	80021d0 <USART2_IRQHandler+0x10>
 800223e:	bf00      	nop
 8002240:	2000042c 	.word	0x2000042c

08002244 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002244:	b530      	push	{r4, r5, lr}
 8002246:	b083      	sub	sp, #12
 8002248:	4c1c      	ldr	r4, [pc, #112]	; (80022bc <HardFault_Handler+0x78>)
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800224a:	f7ff f8d3 	bl	80013f4 <TSK_HardwareFaultTask>
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 800224e:	4625      	mov	r5, r4
 8002250:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002254:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002256:	0712      	lsls	r2, r2, #28
 8002258:	d41d      	bmi.n	8002296 <HardFault_Handler+0x52>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800225a:	681a      	ldr	r2, [r3, #0]
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800225c:	0610      	lsls	r0, r2, #24
 800225e:	d40f      	bmi.n	8002280 <HardFault_Handler+0x3c>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002260:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002262:	0692      	lsls	r2, r2, #26
 8002264:	d5f6      	bpl.n	8002254 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002266:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002268:	4628      	mov	r0, r5
 800226a:	b2c9      	uxtb	r1, r1
 800226c:	f003 febc 	bl	8005fe8 <UFCP_RX_IRQ_Handler>
 8002270:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002272:	2b01      	cmp	r3, #1
 8002274:	d01f      	beq.n	80022b6 <HardFault_Handler+0x72>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002276:	2b02      	cmp	r3, #2
 8002278:	d1ea      	bne.n	8002250 <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 800227a:	f000 f8a7 	bl	80023cc <UI_SerialCommunicationTimeOutStop>
 800227e:	e7e7      	b.n	8002250 <HardFault_Handler+0xc>
        UFCP_TX_IRQ_Handler(&pUSART);
 8002280:	4628      	mov	r0, r5
 8002282:	f003 fe19 	bl	8005eb8 <UFCP_TX_IRQ_Handler>
 8002286:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800228a:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800228c:	0691      	lsls	r1, r2, #26
 800228e:	d4ea      	bmi.n	8002266 <HardFault_Handler+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002290:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002292:	0712      	lsls	r2, r2, #28
 8002294:	d5e1      	bpl.n	800225a <HardFault_Handler+0x16>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002296:	4628      	mov	r0, r5
 8002298:	f003 ff08 	bl	80060ac <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800229c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80022a4:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80022aa:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 80022ac:	f000 f88e 	bl	80023cc <UI_SerialCommunicationTimeOutStop>
 80022b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80022b4:	e7d1      	b.n	800225a <HardFault_Handler+0x16>
          UI_SerialCommunicationTimeOutStart();
 80022b6:	f000 f88f 	bl	80023d8 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 80022ba:	e7c9      	b.n	8002250 <HardFault_Handler+0xc>
 80022bc:	2000042c 	.word	0x2000042c

080022c0 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80022c0:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80022c2:	4c0a      	ldr	r4, [pc, #40]	; (80022ec <SysTick_Handler+0x2c>)
 80022c4:	7823      	ldrb	r3, [r4, #0]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d006      	beq.n	80022d8 <SysTick_Handler+0x18>
 80022ca:	3301      	adds	r3, #1
 80022cc:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 80022ce:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80022d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80022d4:	f7ff b87e 	b.w	80013d4 <MC_RunMotorControlTasks>
    HAL_IncTick();
 80022d8:	f000 fc5c 	bl	8002b94 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80022dc:	f000 ff20 	bl	8003120 <HAL_SYSTICK_IRQHandler>
 80022e0:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 80022e2:	7023      	strb	r3, [r4, #0]
}
 80022e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80022e8:	f7ff b874 	b.w	80013d4 <MC_RunMotorControlTasks>
 80022ec:	2000056c 	.word	0x2000056c

080022f0 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <EXTI15_10_IRQHandler+0x14>)
 80022f2:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 80022f4:	0492      	lsls	r2, r2, #18
 80022f6:	d400      	bmi.n	80022fa <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

}
 80022f8:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80022fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022fe:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002300:	f000 b870 	b.w	80023e4 <UI_HandleStartStopButton_cb>
 8002304:	40013c00 	.word	0x40013c00

08002308 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 800230c:	4d17      	ldr	r5, [pc, #92]	; (800236c <UI_TaskInit+0x64>)
    pMCP = &MCP_UI_Params;
 800230e:	f8df c070 	ldr.w	ip, [pc, #112]	; 8002380 <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 8002312:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002384 <UI_TaskInit+0x7c>
{
 8002316:	468e      	mov	lr, r1
 8002318:	4681      	mov	r9, r0
 800231a:	4616      	mov	r6, r2
 800231c:	461f      	mov	r7, r3
    pMCP->_Super = UI_Params;
 800231e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002320:	4664      	mov	r4, ip
 8002322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002324:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 8002328:	b082      	sub	sp, #8
    pMCP = &MCP_UI_Params;
 800232a:	4d11      	ldr	r5, [pc, #68]	; (8002370 <UI_TaskInit+0x68>)
{
 800232c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    pMCP = &MCP_UI_Params;
 8002330:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 8002334:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 8002338:	4640      	mov	r0, r8
{
 800233a:	4674      	mov	r4, lr
    UFCP_Init( & pUSART );
 800233c:	f003 fdba 	bl	8005eb4 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002340:	f8cd a004 	str.w	sl, [sp, #4]
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <UI_TaskInit+0x6c>)
 8002346:	6828      	ldr	r0, [r5, #0]
 8002348:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <UI_TaskInit+0x70>)
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4641      	mov	r1, r8
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <UI_TaskInit+0x74>)
 8002350:	f7ff fbfe 	bl	8001b50 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002354:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8002358:	6828      	ldr	r0, [r5, #0]
 800235a:	463b      	mov	r3, r7
 800235c:	4632      	mov	r2, r6
 800235e:	4621      	mov	r1, r4

}
 8002360:	b002      	add	sp, #8
 8002362:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002366:	f000 b849 	b.w	80023fc <UI_Init>
 800236a:	bf00      	nop
 800236c:	20000598 	.word	0x20000598
 8002370:	200005c4 	.word	0x200005c4
 8002374:	080060c9 	.word	0x080060c9
 8002378:	08005f39 	.word	0x08005f39
 800237c:	08005f19 	.word	0x08005f19
 8002380:	200007fc 	.word	0x200007fc
 8002384:	2000042c 	.word	0x2000042c

08002388 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <UI_Scheduler+0x38>)
 800238a:	8813      	ldrh	r3, [r2, #0]
 800238c:	b29b      	uxth	r3, r3
 800238e:	b11b      	cbz	r3, 8002398 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002390:	8813      	ldrh	r3, [r2, #0]
 8002392:	3b01      	subs	r3, #1
 8002394:	b29b      	uxth	r3, r3
 8002396:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <UI_Scheduler+0x3c>)
 800239a:	8813      	ldrh	r3, [r2, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d903      	bls.n	80023aa <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 80023a2:	8813      	ldrh	r3, [r2, #0]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 80023aa:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <UI_Scheduler+0x40>)
 80023ac:	8813      	ldrh	r3, [r2, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d903      	bls.n	80023bc <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 80023b4:	8813      	ldrh	r3, [r2, #0]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	8013      	strh	r3, [r2, #0]
  }
}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	200005c2 	.word	0x200005c2
 80023c4:	200005c0 	.word	0x200005c0
 80023c8:	2000056e 	.word	0x2000056e

080023cc <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 80023cc:	4b01      	ldr	r3, [pc, #4]	; (80023d4 <UI_SerialCommunicationTimeOutStop+0x8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	801a      	strh	r2, [r3, #0]
}
 80023d2:	4770      	bx	lr
 80023d4:	200005c0 	.word	0x200005c0

080023d8 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80023d8:	4b01      	ldr	r3, [pc, #4]	; (80023e0 <UI_SerialCommunicationTimeOutStart+0x8>)
 80023da:	224f      	movs	r2, #79	; 0x4f
 80023dc:	801a      	strh	r2, [r3, #0]
}
 80023de:	4770      	bx	lr
 80023e0:	200005c0 	.word	0x200005c0

080023e4 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80023e4:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 80023e6:	f7fe faf1 	bl	80009cc <MC_GetSTMStateMotor1>
 80023ea:	b918      	cbnz	r0, 80023f4 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80023ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 80023f0:	f7fe bae0 	b.w	80009b4 <MC_StartMotor1>
}
 80023f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 80023f8:	f7fe bae2 	b.w	80009c0 <MC_StopMotor1>

080023fc <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 80023fc:	b430      	push	{r4, r5}
 80023fe:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002400:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 8002402:	2500      	movs	r5, #0
 8002404:	7505      	strb	r5, [r0, #20]
  pHandle->pMCT = pMCT;
 8002406:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 800240a:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 800240c:	7101      	strb	r1, [r0, #4]
}
 800240e:	4770      	bx	lr

08002410 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002410:	7903      	ldrb	r3, [r0, #4]
 8002412:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002414:	bf86      	itte	hi
 8002416:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8002418:	2001      	movhi	r0, #1
    retVal = false;
 800241a:	2000      	movls	r0, #0
  }
  return retVal;
}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop

08002420 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002420:	7d00      	ldrb	r0, [r0, #20]
 8002422:	4770      	bx	lr

08002424 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002424:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002426:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800242a:	7d03      	ldrb	r3, [r0, #20]
{
 800242c:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800242e:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002432:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
{
 8002436:	4614      	mov	r4, r2
 8002438:	295b      	cmp	r1, #91	; 0x5b
 800243a:	d82f      	bhi.n	800249c <UI_SetReg+0x78>
 800243c:	e8df f001 	tbb	[pc, r1]
 8002440:	412e2e3d 	.word	0x412e2e3d
 8002444:	544e482e 	.word	0x544e482e
 8002448:	726c665a 	.word	0x726c665a
 800244c:	908a8478 	.word	0x908a8478
 8002450:	2e2e2e2e 	.word	0x2e2e2e2e
 8002454:	2e2e2e2e 	.word	0x2e2e2e2e
 8002458:	2e2e2e2e 	.word	0x2e2e2e2e
 800245c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002460:	2e2e2e2e 	.word	0x2e2e2e2e
 8002464:	2e2e2e2e 	.word	0x2e2e2e2e
 8002468:	2e2e2e2e 	.word	0x2e2e2e2e
 800246c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002470:	2e2e2e2e 	.word	0x2e2e2e2e
 8002474:	2e2e2e2e 	.word	0x2e2e2e2e
 8002478:	2e2e2e2e 	.word	0x2e2e2e2e
 800247c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002480:	2e2e962e 	.word	0x2e2e962e
 8002484:	2e2e2e2e 	.word	0x2e2e2e2e
 8002488:	2e2e2e2e 	.word	0x2e2e2e2e
 800248c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002490:	2e2e2e2e 	.word	0x2e2e2e2e
 8002494:	2e2e2e2e 	.word	0x2e2e2e2e
 8002498:	312e2e2e 	.word	0x312e2e2e
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800249c:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 800249e:	b003      	add	sp, #12
 80024a0:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 80024a2:	493f      	ldr	r1, [pc, #252]	; (80025a0 <UI_SetReg+0x17c>)
 80024a4:	fb81 3104 	smull	r3, r1, r1, r4
 80024a8:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 80024ac:	4628      	mov	r0, r5
 80024ae:	b209      	sxth	r1, r1
 80024b0:	2200      	movs	r2, #0
 80024b2:	f7fe fa9f 	bl	80009f4 <MCI_ExecSpeedRamp>
  bool retVal = true;
 80024b6:	2001      	movs	r0, #1
    break;
 80024b8:	e7f1      	b.n	800249e <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 80024ba:	b2e1      	uxtb	r1, r4
 80024bc:	f7ff ffa8 	bl	8002410 <UI_SelectMC>
    break;
 80024c0:	e7ed      	b.n	800249e <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 80024c2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80024c6:	d057      	beq.n	8002578 <UI_SetReg+0x154>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 80024c8:	2c01      	cmp	r4, #1
 80024ca:	d05f      	beq.n	800258c <UI_SetReg+0x168>
  bool retVal = true;
 80024cc:	2001      	movs	r0, #1
 80024ce:	e7e6      	b.n	800249e <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	b221      	sxth	r1, r4
 80024d4:	f002 fbda 	bl	8004c8c <PID_SetKP>
  bool retVal = true;
 80024d8:	2001      	movs	r0, #1
    break;
 80024da:	e7e0      	b.n	800249e <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	b221      	sxth	r1, r4
 80024e0:	f002 fbd6 	bl	8004c90 <PID_SetKI>
  bool retVal = true;
 80024e4:	2001      	movs	r0, #1
    break;
 80024e6:	e7da      	b.n	800249e <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	b221      	sxth	r1, r4
 80024ec:	f002 fbe0 	bl	8004cb0 <PID_SetKD>
  bool retVal = true;
 80024f0:	2001      	movs	r0, #1
    break;
 80024f2:	e7d4      	b.n	800249e <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 80024f4:	4628      	mov	r0, r5
 80024f6:	f7fe fb37 	bl	8000b68 <MCI_GetIqdref>
 80024fa:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 80024fc:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002500:	4628      	mov	r0, r5
 8002502:	9901      	ldr	r1, [sp, #4]
 8002504:	f7fe fa8c 	bl	8000a20 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002508:	2001      	movs	r0, #1
    break;
 800250a:	e7c8      	b.n	800249e <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 800250c:	6858      	ldr	r0, [r3, #4]
 800250e:	b221      	sxth	r1, r4
 8002510:	f002 fbbc 	bl	8004c8c <PID_SetKP>
  bool retVal = true;
 8002514:	2001      	movs	r0, #1
    break;
 8002516:	e7c2      	b.n	800249e <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002518:	6858      	ldr	r0, [r3, #4]
 800251a:	b221      	sxth	r1, r4
 800251c:	f002 fbb8 	bl	8004c90 <PID_SetKI>
  bool retVal = true;
 8002520:	2001      	movs	r0, #1
    break;
 8002522:	e7bc      	b.n	800249e <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002524:	6858      	ldr	r0, [r3, #4]
 8002526:	b221      	sxth	r1, r4
 8002528:	f002 fbc2 	bl	8004cb0 <PID_SetKD>
  bool retVal = true;
 800252c:	2001      	movs	r0, #1
    break;
 800252e:	e7b6      	b.n	800249e <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 8002530:	4628      	mov	r0, r5
 8002532:	f7fe fb19 	bl	8000b68 <MCI_GetIqdref>
 8002536:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002538:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 800253c:	4628      	mov	r0, r5
 800253e:	9901      	ldr	r1, [sp, #4]
 8002540:	f7fe fa6e 	bl	8000a20 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002544:	2001      	movs	r0, #1
    break;
 8002546:	e7aa      	b.n	800249e <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002548:	6898      	ldr	r0, [r3, #8]
 800254a:	b221      	sxth	r1, r4
 800254c:	f002 fb9e 	bl	8004c8c <PID_SetKP>
  bool retVal = true;
 8002550:	2001      	movs	r0, #1
    break;
 8002552:	e7a4      	b.n	800249e <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002554:	6898      	ldr	r0, [r3, #8]
 8002556:	b221      	sxth	r1, r4
 8002558:	f002 fb9a 	bl	8004c90 <PID_SetKI>
  bool retVal = true;
 800255c:	2001      	movs	r0, #1
    break;
 800255e:	e79e      	b.n	800249e <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002560:	6898      	ldr	r0, [r3, #8]
 8002562:	b221      	sxth	r1, r4
 8002564:	f002 fba4 	bl	8004cb0 <PID_SetKD>
  bool retVal = true;
 8002568:	2001      	movs	r0, #1
    break;
 800256a:	e798      	b.n	800249e <UI_SetReg+0x7a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 800256c:	4628      	mov	r0, r5
 800256e:	b221      	sxth	r1, r4
 8002570:	f7fe fb28 	bl	8000bc4 <MCI_SetIdref>
  bool retVal = true;
 8002574:	2001      	movs	r0, #1
    break;
 8002576:	e792      	b.n	800249e <UI_SetReg+0x7a>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002578:	4628      	mov	r0, r5
 800257a:	f7fe fb1f 	bl	8000bbc <MCI_GetTeref>
 800257e:	4622      	mov	r2, r4
 8002580:	4601      	mov	r1, r0
 8002582:	4628      	mov	r0, r5
 8002584:	f7fe fa42 	bl	8000a0c <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002588:	2001      	movs	r0, #1
 800258a:	e788      	b.n	800249e <UI_SetReg+0x7a>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 800258c:	4628      	mov	r0, r5
 800258e:	f7fe fabd 	bl	8000b0c <MCI_GetMecSpeedRefUnit>
 8002592:	2200      	movs	r2, #0
 8002594:	4601      	mov	r1, r0
 8002596:	4628      	mov	r0, r5
 8002598:	f7fe fa2c 	bl	80009f4 <MCI_ExecSpeedRamp>
  bool retVal = true;
 800259c:	4620      	mov	r0, r4
 800259e:	e77e      	b.n	800249e <UI_SetReg+0x7a>
 80025a0:	2aaaaaab 	.word	0x2aaaaaab

080025a4 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 80025a4:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80025a6:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80025aa:	7d03      	ldrb	r3, [r0, #20]
{
 80025ac:	b08c      	sub	sp, #48	; 0x30
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80025ae:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80025b2:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 80025b6:	2a00      	cmp	r2, #0
 80025b8:	f000 8089 	beq.w	80026ce <UI_GetReg+0x12a>
  {
    *success = true;
 80025bc:	2601      	movs	r6, #1
 80025be:	7016      	strb	r6, [r2, #0]
  }

  switch (bRegID)
 80025c0:	2981      	cmp	r1, #129	; 0x81
 80025c2:	f200 81e3 	bhi.w	800298c <UI_GetReg+0x3e8>
 80025c6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80025ca:	0133      	.short	0x0133
 80025cc:	010b012d 	.word	0x010b012d
 80025d0:	016d0107 	.word	0x016d0107
 80025d4:	015d0161 	.word	0x015d0161
 80025d8:	01020159 	.word	0x01020159
 80025dc:	01290169 	.word	0x01290169
 80025e0:	00fa0125 	.word	0x00fa0125
 80025e4:	011b011f 	.word	0x011b011f
 80025e8:	01e10117 	.word	0x01e10117
 80025ec:	01e101e1 	.word	0x01e101e1
 80025f0:	01e101e1 	.word	0x01e101e1
 80025f4:	01e101e1 	.word	0x01e101e1
 80025f8:	01e101e1 	.word	0x01e101e1
 80025fc:	010f0113 	.word	0x010f0113
 8002600:	01e10165 	.word	0x01e10165
 8002604:	014d01e1 	.word	0x014d01e1
 8002608:	017f0184 	.word	0x017f0184
 800260c:	017901e1 	.word	0x017901e1
 8002610:	018e0174 	.word	0x018e0174
 8002614:	01540189 	.word	0x01540189
 8002618:	017f0184 	.word	0x017f0184
 800261c:	00fa0102 	.word	0x00fa0102
 8002620:	01dc0193 	.word	0x01dc0193
 8002624:	01d201d7 	.word	0x01d201d7
 8002628:	01a801bd 	.word	0x01a801bd
 800262c:	01e101e1 	.word	0x01e101e1
 8002630:	01e101e1 	.word	0x01e101e1
 8002634:	01e101e1 	.word	0x01e101e1
 8002638:	01e101e1 	.word	0x01e101e1
 800263c:	01e101e1 	.word	0x01e101e1
 8002640:	01e101e1 	.word	0x01e101e1
 8002644:	01e101e1 	.word	0x01e101e1
 8002648:	019a01a1 	.word	0x019a01a1
 800264c:	01e100fa 	.word	0x01e100fa
 8002650:	01e101e1 	.word	0x01e101e1
 8002654:	01e101e1 	.word	0x01e101e1
 8002658:	01e101e1 	.word	0x01e101e1
 800265c:	01e101e1 	.word	0x01e101e1
 8002660:	01e101e1 	.word	0x01e101e1
 8002664:	01e101e1 	.word	0x01e101e1
 8002668:	01e101e1 	.word	0x01e101e1
 800266c:	01e101e1 	.word	0x01e101e1
 8002670:	01e101e1 	.word	0x01e101e1
 8002674:	01e101e1 	.word	0x01e101e1
 8002678:	01e101e1 	.word	0x01e101e1
 800267c:	01e101e1 	.word	0x01e101e1
 8002680:	01e10140 	.word	0x01e10140
 8002684:	01e101e1 	.word	0x01e101e1
 8002688:	01e101e1 	.word	0x01e101e1
 800268c:	01e101e1 	.word	0x01e101e1
 8002690:	01e101e1 	.word	0x01e101e1
 8002694:	01e101e1 	.word	0x01e101e1
 8002698:	01e101e1 	.word	0x01e101e1
 800269c:	01e101e1 	.word	0x01e101e1
 80026a0:	01e101e1 	.word	0x01e101e1
 80026a4:	013c01e1 	.word	0x013c01e1
 80026a8:	01360138 	.word	0x01360138
 80026ac:	019801e1 	.word	0x019801e1
 80026b0:	01e10123 	.word	0x01e10123
 80026b4:	01e101e1 	.word	0x01e101e1
 80026b8:	01e101e1 	.word	0x01e101e1
 80026bc:	01e101e1 	.word	0x01e101e1
 80026c0:	01e101e1 	.word	0x01e101e1
 80026c4:	01e101e1 	.word	0x01e101e1
 80026c8:	01e101e1 	.word	0x01e101e1
 80026cc:	0100      	.short	0x0100
 80026ce:	2973      	cmp	r1, #115	; 0x73
 80026d0:	d87b      	bhi.n	80027ca <UI_GetReg+0x226>
 80026d2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80026d6:	00ad      	.short	0x00ad
 80026d8:	008500a7 	.word	0x008500a7
 80026dc:	00e70081 	.word	0x00e70081
 80026e0:	00d700db 	.word	0x00d700db
 80026e4:	007c00d3 	.word	0x007c00d3
 80026e8:	00a300e3 	.word	0x00a300e3
 80026ec:	0074009f 	.word	0x0074009f
 80026f0:	00950099 	.word	0x00950099
 80026f4:	007a0091 	.word	0x007a0091
 80026f8:	007a007a 	.word	0x007a007a
 80026fc:	007a007a 	.word	0x007a007a
 8002700:	007a007a 	.word	0x007a007a
 8002704:	007a007a 	.word	0x007a007a
 8002708:	0089008d 	.word	0x0089008d
 800270c:	007a00df 	.word	0x007a00df
 8002710:	00c7007a 	.word	0x00c7007a
 8002714:	00f900fe 	.word	0x00f900fe
 8002718:	00f3007a 	.word	0x00f3007a
 800271c:	010800ee 	.word	0x010800ee
 8002720:	00ce0103 	.word	0x00ce0103
 8002724:	00f900fe 	.word	0x00f900fe
 8002728:	0074007c 	.word	0x0074007c
 800272c:	0156010d 	.word	0x0156010d
 8002730:	014c0151 	.word	0x014c0151
 8002734:	01220137 	.word	0x01220137
 8002738:	007a007a 	.word	0x007a007a
 800273c:	007a007a 	.word	0x007a007a
 8002740:	007a007a 	.word	0x007a007a
 8002744:	007a007a 	.word	0x007a007a
 8002748:	007a007a 	.word	0x007a007a
 800274c:	007a007a 	.word	0x007a007a
 8002750:	007a007a 	.word	0x007a007a
 8002754:	0114011b 	.word	0x0114011b
 8002758:	007a0074 	.word	0x007a0074
 800275c:	007a007a 	.word	0x007a007a
 8002760:	007a007a 	.word	0x007a007a
 8002764:	007a007a 	.word	0x007a007a
 8002768:	007a007a 	.word	0x007a007a
 800276c:	007a007a 	.word	0x007a007a
 8002770:	007a007a 	.word	0x007a007a
 8002774:	007a007a 	.word	0x007a007a
 8002778:	007a007a 	.word	0x007a007a
 800277c:	007a007a 	.word	0x007a007a
 8002780:	007a007a 	.word	0x007a007a
 8002784:	007a007a 	.word	0x007a007a
 8002788:	007a007a 	.word	0x007a007a
 800278c:	007a00ba 	.word	0x007a00ba
 8002790:	007a007a 	.word	0x007a007a
 8002794:	007a007a 	.word	0x007a007a
 8002798:	007a007a 	.word	0x007a007a
 800279c:	007a007a 	.word	0x007a007a
 80027a0:	007a007a 	.word	0x007a007a
 80027a4:	007a007a 	.word	0x007a007a
 80027a8:	007a007a 	.word	0x007a007a
 80027ac:	007a007a 	.word	0x007a007a
 80027b0:	00b6007a 	.word	0x00b6007a
 80027b4:	00b000b2 	.word	0x00b000b2
 80027b8:	0112007a 	.word	0x0112007a
 80027bc:	009d      	.short	0x009d
    }
    break;

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 80027be:	4620      	mov	r0, r4
 80027c0:	f7fe f9d2 	bl	8000b68 <MCI_GetIqdref>
 80027c4:	1400      	asrs	r0, r0, #16
      }
	}
    break;
  }
  return bRetVal;
}
 80027c6:	b00c      	add	sp, #48	; 0x30
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
  int32_t bRetVal = 0;
 80027ca:	2000      	movs	r0, #0
 80027cc:	e7fb      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqdref(pMCI).q;
 80027ce:	4620      	mov	r0, r4
 80027d0:	f7fe f9ca 	bl	8000b68 <MCI_GetIqdref>
 80027d4:	b200      	sxth	r0, r0
    break;
 80027d6:	e7f6      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 80027d8:	4620      	mov	r0, r4
 80027da:	f7fe f981 	bl	8000ae0 <MCI_GetControlMode>
    break;
 80027de:	e7f2      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 80027e0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80027e2:	f003 fb53 	bl	8005e8c <STM_GetState>
	break;
 80027e6:	e7ee      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80027e8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80027ea:	f002 fa31 	bl	8004c50 <NTC_GetAvTemp_C>
    break;
 80027ee:	e7ea      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80027f0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80027f2:	f001 fd7f 	bl	80042f4 <VBS_GetAvBusVoltage_V>
    break;
 80027f6:	e7e6      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 80027f8:	68a8      	ldr	r0, [r5, #8]
 80027fa:	f002 fa5b 	bl	8004cb4 <PID_GetKD>
    break;
 80027fe:	e7e2      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8002800:	68a8      	ldr	r0, [r5, #8]
 8002802:	f002 fa4b 	bl	8004c9c <PID_GetKI>
    break;
 8002806:	e7de      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8002808:	68a8      	ldr	r0, [r5, #8]
 800280a:	f002 fa43 	bl	8004c94 <PID_GetKP>
    break;
 800280e:	e7da      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = PWBDID;
 8002810:	2004      	movs	r0, #4
 8002812:	e7d8      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8002814:	6868      	ldr	r0, [r5, #4]
 8002816:	f002 fa4d 	bl	8004cb4 <PID_GetKD>
    break;
 800281a:	e7d4      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 800281c:	6868      	ldr	r0, [r5, #4]
 800281e:	f002 fa3d 	bl	8004c9c <PID_GetKI>
    break;
 8002822:	e7d0      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002824:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
 8002826:	b00c      	add	sp, #48	; 0x30
 8002828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 800282c:	f003 bb3c 	b.w	8005ea8 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002830:	f7ff fdf6 	bl	8002420 <UI_GetSelectedMC>
    break;
 8002834:	e7c7      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)(MC_UID);
 8002836:	485e      	ldr	r0, [pc, #376]	; (80029b0 <UI_GetReg+0x40c>)
 8002838:	e7c5      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 800283a:	6828      	ldr	r0, [r5, #0]
 800283c:	f002 fa36 	bl	8004cac <PID_GetKIDivisor>
    break;
 8002840:	e7c1      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002842:	6828      	ldr	r0, [r5, #0]
 8002844:	f002 fa30 	bl	8004ca8 <PID_GetKPDivisor>
    break;
 8002848:	e7bd      	b.n	80027c6 <UI_GetReg+0x222>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 800284a:	4620      	mov	r0, r4
 800284c:	f7fe f948 	bl	8000ae0 <MCI_GetControlMode>
 8002850:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002852:	4620      	mov	r0, r4
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002854:	f000 80a5 	beq.w	80029a2 <UI_GetReg+0x3fe>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002858:	f7fe f958 	bl	8000b0c <MCI_GetMecSpeedRefUnit>
 800285c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002860:	0040      	lsls	r0, r0, #1
 8002862:	e7b0      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002864:	4620      	mov	r0, r4
 8002866:	f7fe f949 	bl	8000afc <MCI_GetAvrgMecSpeedUnit>
 800286a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800286e:	0040      	lsls	r0, r0, #1
    break;
 8002870:	e7a9      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002872:	4620      	mov	r0, r4
 8002874:	f7fe f95c 	bl	8000b30 <MCI_GetIalphabeta>
 8002878:	1400      	asrs	r0, r0, #16
    break;
 800287a:	e7a4      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800287c:	6828      	ldr	r0, [r5, #0]
 800287e:	f002 fa19 	bl	8004cb4 <PID_GetKD>
    break;
 8002882:	e7a0      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002884:	6828      	ldr	r0, [r5, #0]
 8002886:	f002 fa09 	bl	8004c9c <PID_GetKI>
    break;
 800288a:	e79c      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 800288c:	6828      	ldr	r0, [r5, #0]
 800288e:	f002 fa01 	bl	8004c94 <PID_GetKP>
    break;
 8002892:	e798      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8002894:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8002896:	f002 f997 	bl	8004bc8 <MPM_GetAvrgElMotorPowerW>
    break;
 800289a:	e794      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 800289c:	6868      	ldr	r0, [r5, #4]
 800289e:	f002 f9f9 	bl	8004c94 <PID_GetKP>
    break;
 80028a2:	e790      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 80028a4:	4620      	mov	r0, r4
 80028a6:	f7fe f931 	bl	8000b0c <MCI_GetMecSpeedRefUnit>
 80028aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80028ae:	0040      	lsls	r0, r0, #1
    break;
 80028b0:	e789      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = MCI_GetIab(pMCI).a;
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7fe f92e 	bl	8000b14 <MCI_GetIab>
 80028b8:	b200      	sxth	r0, r0
    break;
 80028ba:	e784      	b.n	80027c6 <UI_GetReg+0x222>
      if (pMCT->pRevupCtrl)
 80028bc:	6968      	ldr	r0, [r5, #20]
 80028be:	2800      	cmp	r0, #0
 80028c0:	d083      	beq.n	80027ca <UI_GetReg+0x226>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80028c2:	f003 fc2d 	bl	8006120 <RUC_GetNumberOfPhases>
 80028c6:	e77e      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqd(pMCI).d;
 80028c8:	4620      	mov	r0, r4
 80028ca:	f7fe f93f 	bl	8000b4c <MCI_GetIqd>
 80028ce:	1400      	asrs	r0, r0, #16
    break;
 80028d0:	e779      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = MCI_GetIqd(pMCI).q;
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7fe f93a 	bl	8000b4c <MCI_GetIqd>
 80028d8:	b200      	sxth	r0, r0
    break;
 80028da:	e774      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80028dc:	4620      	mov	r0, r4
 80028de:	f7fe f927 	bl	8000b30 <MCI_GetIalphabeta>
 80028e2:	b200      	sxth	r0, r0
    break;
 80028e4:	e76f      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = MCI_GetIab(pMCI).b;
 80028e6:	4620      	mov	r0, r4
 80028e8:	f7fe f914 	bl	8000b14 <MCI_GetIab>
 80028ec:	1400      	asrs	r0, r0, #16
    break;
 80028ee:	e76a      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = MCI_GetVqd(pMCI).q;
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7fe f947 	bl	8000b84 <MCI_GetVqd>
 80028f6:	b200      	sxth	r0, r0
    break;
 80028f8:	e765      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = CTRBDID;
 80028fa:	201a      	movs	r0, #26
 80028fc:	e763      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 80028fe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002900:	f003 fa12 	bl	8005d28 <STC_GetMinAppNegativeMecSpeedUnit>
 8002904:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002908:	0040      	lsls	r0, r0, #1
    break;
 800290a:	e75c      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 800290c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800290e:	f003 fa09 	bl	8005d24 <STC_GetMaxAppPositiveMecSpeedUnit>
 8002912:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002916:	0040      	lsls	r0, r0, #1
    break;
 8002918:	e755      	b.n	80027c6 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800291a:	6902      	ldr	r2, [r0, #16]
 800291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002920:	0f1a      	lsrs	r2, r3, #28
 8002922:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002924:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002928:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800292a:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800292e:	d934      	bls.n	800299a <UI_GetReg+0x3f6>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002930:	2b01      	cmp	r3, #1
 8002932:	f63f af4a 	bhi.w	80027ca <UI_GetReg+0x226>
        pSPD = pMCT->pSpeedSensorAux;
 8002936:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002938:	2800      	cmp	r0, #0
 800293a:	f43f af46 	beq.w	80027ca <UI_GetReg+0x226>
        bRetVal = SPD_GetS16Speed(pSPD);
 800293e:	f003 f933 	bl	8005ba8 <SPD_GetS16Speed>
 8002942:	e740      	b.n	80027c6 <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002944:	6902      	ldr	r2, [r0, #16]
 8002946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800294a:	0f1a      	lsrs	r2, r3, #28
 800294c:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800294e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002952:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002954:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002958:	d91b      	bls.n	8002992 <UI_GetReg+0x3ee>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800295a:	2b01      	cmp	r3, #1
 800295c:	f63f af35 	bhi.w	80027ca <UI_GetReg+0x226>
        pSPD = pMCT->pSpeedSensorAux;
 8002960:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002962:	2800      	cmp	r0, #0
 8002964:	f43f af31 	beq.w	80027ca <UI_GetReg+0x226>
        bRetVal = SPD_GetElAngle(pSPD);
 8002968:	f003 f8e6 	bl	8005b38 <SPD_GetElAngle>
 800296c:	e72b      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 800296e:	4620      	mov	r0, r4
 8002970:	f7fe f916 	bl	8000ba0 <MCI_GetValphabeta>
 8002974:	1400      	asrs	r0, r0, #16
    break;
 8002976:	e726      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8002978:	4620      	mov	r0, r4
 800297a:	f7fe f911 	bl	8000ba0 <MCI_GetValphabeta>
 800297e:	b200      	sxth	r0, r0
    break;
 8002980:	e721      	b.n	80027c6 <UI_GetReg+0x222>
      bRetVal = MCI_GetVqd(pMCI).d;
 8002982:	4620      	mov	r0, r4
 8002984:	f7fe f8fe 	bl	8000b84 <MCI_GetVqd>
 8002988:	1400      	asrs	r0, r0, #16
    break;
 800298a:	e71c      	b.n	80027c6 <UI_GetReg+0x222>
        *success = false;
 800298c:	2000      	movs	r0, #0
 800298e:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8002990:	e719      	b.n	80027c6 <UI_GetReg+0x222>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002992:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8002994:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002996:	d8e4      	bhi.n	8002962 <UI_GetReg+0x3be>
 8002998:	e7e2      	b.n	8002960 <UI_GetReg+0x3bc>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800299a:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 800299c:	69a8      	ldr	r0, [r5, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800299e:	d8cb      	bhi.n	8002938 <UI_GetReg+0x394>
 80029a0:	e7c9      	b.n	8002936 <UI_GetReg+0x392>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80029a2:	f7fe f89f 	bl	8000ae4 <MCI_GetLastRampFinalSpeed>
 80029a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80029aa:	0040      	lsls	r0, r0, #1
 80029ac:	e70b      	b.n	80027c6 <UI_GetReg+0x222>
 80029ae:	bf00      	nop
 80029b0:	34a6847a 	.word	0x34a6847a

080029b4 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80029b4:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80029b6:	6883      	ldr	r3, [r0, #8]
 80029b8:	7d02      	ldrb	r2, [r0, #20]
 80029ba:	3901      	subs	r1, #1
 80029bc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 80029c0:	290d      	cmp	r1, #13
 80029c2:	d808      	bhi.n	80029d6 <UI_ExecCmd+0x22>
 80029c4:	e8df f001 	tbb	[pc, r1]
 80029c8:	0e091419 	.word	0x0e091419
 80029cc:	231e100e 	.word	0x231e100e
 80029d0:	07070728 	.word	0x07070728
 80029d4:	1407      	.short	0x1407
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80029d6:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 80029d8:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 80029da:	4620      	mov	r0, r4
 80029dc:	f7fe f87c 	bl	8000ad8 <MCI_GetSTMState>
 80029e0:	2806      	cmp	r0, #6
 80029e2:	d01e      	beq.n	8002a22 <UI_ExecCmd+0x6e>
  bool retVal = true;
 80029e4:	2001      	movs	r0, #1
}
 80029e6:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7fe f875 	bl	8000ad8 <MCI_GetSTMState>
 80029ee:	b120      	cbz	r0, 80029fa <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7fe f829 	bl	8000a48 <MCI_StopMotor>
  bool retVal = true;
 80029f6:	2001      	movs	r0, #1
}
 80029f8:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 80029fa:	4620      	mov	r0, r4
 80029fc:	f7fe f81a 	bl	8000a34 <MCI_StartMotor>
  bool retVal = true;
 8002a00:	2001      	movs	r0, #1
}
 8002a02:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002a04:	4620      	mov	r0, r4
 8002a06:	f7fe f823 	bl	8000a50 <MCI_FaultAcknowledged>
  bool retVal = true;
 8002a0a:	2001      	movs	r0, #1
}
 8002a0c:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f7fe f822 	bl	8000a58 <MCI_EncoderAlign>
  bool retVal = true;
 8002a14:	2001      	movs	r0, #1
}
 8002a16:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7fe f8dd 	bl	8000bd8 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002a1e:	2001      	movs	r0, #1
}
 8002a20:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7fe f866 	bl	8000af4 <MCI_StopRamp>
  bool retVal = true;
 8002a28:	2001      	movs	r0, #1
}
 8002a2a:	bd10      	pop	{r4, pc}

08002a2c <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002a2c:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a30:	7d04      	ldrb	r4, [r0, #20]
 8002a32:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002a34:	fb83 c301 	smull	ip, r3, r3, r1
 8002a38:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002a3c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002a40:	b209      	sxth	r1, r1
 8002a42:	f7fd ffd7 	bl	80009f4 <MCI_ExecSpeedRamp>
  return true;
}
 8002a46:	2001      	movs	r0, #1
 8002a48:	bd10      	pop	{r4, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2aaaaaab 	.word	0x2aaaaaab

08002a50 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002a50:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a52:	6883      	ldr	r3, [r0, #8]
 8002a54:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002a56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002a5a:	f7fd ffd7 	bl	8000a0c <MCI_ExecTorqueRamp>
  return true;
}
 8002a5e:	2001      	movs	r0, #1
 8002a60:	bd10      	pop	{r4, pc}
 8002a62:	bf00      	nop

08002a64 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002a66:	7d04      	ldrb	r4, [r0, #20]
 8002a68:	68c0      	ldr	r0, [r0, #12]
 8002a6a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002a6e:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8002a70:	b19c      	cbz	r4, 8002a9a <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002a72:	4620      	mov	r0, r4
 8002a74:	461e      	mov	r6, r3
 8002a76:	4617      	mov	r7, r2
 8002a78:	460d      	mov	r5, r1
 8002a7a:	f003 fb3b 	bl	80060f4 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002a7e:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002a80:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002a82:	4620      	mov	r0, r4
 8002a84:	f003 fb3c 	bl	8006100 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002a88:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002a8a:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f003 fb3f 	bl	8006110 <RUC_GetPhaseFinalTorque>
 8002a92:	9b06      	ldr	r3, [sp, #24]
 8002a94:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8002a96:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8002a9a:	4620      	mov	r0, r4
}
 8002a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a9e:	bf00      	nop

08002aa0 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002aa0:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002aa2:	7d04      	ldrb	r4, [r0, #20]
 8002aa4:	68c0      	ldr	r0, [r0, #12]
{
 8002aa6:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002aa8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 8002aac:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002ab0:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002ab2:	9001      	str	r0, [sp, #4]
{
 8002ab4:	461d      	mov	r5, r3
 8002ab6:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002ab8:	f003 fb0a 	bl	80060d0 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002abc:	9801      	ldr	r0, [sp, #4]
 8002abe:	462a      	mov	r2, r5
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	f003 fb0b 	bl	80060dc <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002ac6:	9801      	ldr	r0, [sp, #4]
 8002ac8:	4632      	mov	r2, r6
 8002aca:	4621      	mov	r1, r4
 8002acc:	f003 fb0c 	bl	80060e8 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	b002      	add	sp, #8
 8002ad4:	bd70      	pop	{r4, r5, r6, pc}
 8002ad6:	bf00      	nop

08002ad8 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002ad8:	b410      	push	{r4}
 8002ada:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002adc:	7d04      	ldrb	r4, [r0, #20]
 8002ade:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8002ae0:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8002ae4:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002ae8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002aec:	9901      	ldr	r1, [sp, #4]
}
 8002aee:	b003      	add	sp, #12
 8002af0:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 8002af4:	f7fd bf94 	b.w	8000a20 <MCI_SetCurrentReferences>

08002af8 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002af8:	2000      	movs	r0, #0
 8002afa:	4770      	bx	lr

08002afc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <SystemInit+0x18>)
 8002afe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b06:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b0e:	6099      	str	r1, [r3, #8]
#endif
}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b18:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <HAL_InitTick+0x3c>)
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_InitTick+0x40>)
 8002b1e:	7812      	ldrb	r2, [r2, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
{
 8002b22:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b28:	fbb0 f0f2 	udiv	r0, r0, r2
 8002b2c:	fbb3 f0f0 	udiv	r0, r3, r0
 8002b30:	f000 fada 	bl	80030e8 <HAL_SYSTICK_Config>
 8002b34:	b908      	cbnz	r0, 8002b3a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b36:	2d0f      	cmp	r5, #15
 8002b38:	d901      	bls.n	8002b3e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002b3a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002b3c:	bd38      	pop	{r3, r4, r5, pc}
 8002b3e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b40:	4602      	mov	r2, r0
 8002b42:	4629      	mov	r1, r5
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	f000 fa88 	bl	800305c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <HAL_InitTick+0x44>)
 8002b4e:	4620      	mov	r0, r4
 8002b50:	601d      	str	r5, [r3, #0]
}
 8002b52:	bd38      	pop	{r3, r4, r5, pc}
 8002b54:	20000574 	.word	0x20000574
 8002b58:	20000570 	.word	0x20000570
 8002b5c:	20000578 	.word	0x20000578

08002b60 <HAL_Init>:
{
 8002b60:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_Init+0x30>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b72:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b7a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b7c:	2003      	movs	r0, #3
 8002b7e:	f000 fa59 	bl	8003034 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b82:	2004      	movs	r0, #4
 8002b84:	f7ff ffc8 	bl	8002b18 <HAL_InitTick>
  HAL_MspInit();
 8002b88:	f7ff f966 	bl	8001e58 <HAL_MspInit>
}
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	bd08      	pop	{r3, pc}
 8002b90:	40023c00 	.word	0x40023c00

08002b94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002b94:	4a03      	ldr	r2, [pc, #12]	; (8002ba4 <HAL_IncTick+0x10>)
 8002b96:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <HAL_IncTick+0x14>)
 8002b98:	6811      	ldr	r1, [r2, #0]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	440b      	add	r3, r1
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	200008ac 	.word	0x200008ac
 8002ba8:	20000574 	.word	0x20000574

08002bac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002bac:	4b01      	ldr	r3, [pc, #4]	; (8002bb4 <HAL_GetTick+0x8>)
 8002bae:	6818      	ldr	r0, [r3, #0]
}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	200008ac 	.word	0x200008ac

08002bb8 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	f000 80a0 	beq.w	8002cfe <HAL_ADC_Init+0x146>
{
 8002bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bc0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	b13d      	cbz	r5, 8002bd6 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bc8:	06db      	lsls	r3, r3, #27
 8002bca:	d50c      	bpl.n	8002be6 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8002bd2:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8002bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8002bd6:	f7ff f95d 	bl	8001e94 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002bda:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8002bde:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002be2:	06db      	lsls	r3, r3, #27
 8002be4:	d4f2      	bmi.n	8002bcc <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8002be6:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002be8:	4948      	ldr	r1, [pc, #288]	; (8002d0c <HAL_ADC_Init+0x154>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bea:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bec:	4d48      	ldr	r5, [pc, #288]	; (8002d10 <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8002bee:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002bf2:	f022 0202 	bic.w	r2, r2, #2
 8002bf6:	f042 0202 	orr.w	r2, r2, #2
 8002bfa:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bfc:	684a      	ldr	r2, [r1, #4]
 8002bfe:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002c02:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c04:	684a      	ldr	r2, [r1, #4]
 8002c06:	6860      	ldr	r0, [r4, #4]
 8002c08:	4302      	orrs	r2, r0
 8002c0a:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c0c:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c0e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c10:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c12:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c14:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002c18:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c22:	6858      	ldr	r0, [r3, #4]
 8002c24:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8002c28:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c2a:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c2e:	4339      	orrs	r1, r7
 8002c30:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c32:	6899      	ldr	r1, [r3, #8]
 8002c34:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002c38:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c3a:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c3c:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c3e:	ea42 0206 	orr.w	r2, r2, r6
 8002c42:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c44:	d052      	beq.n	8002cec <HAL_ADC_Init+0x134>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c46:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c48:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c4a:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8002c4e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	4310      	orrs	r0, r2
 8002c54:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c56:	6899      	ldr	r1, [r3, #8]
 8002c58:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8002c5c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	432a      	orrs	r2, r5
 8002c62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	f022 0202 	bic.w	r2, r2, #2
 8002c6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	7e21      	ldrb	r1, [r4, #24]
 8002c70:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002c74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c76:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002c7a:	2a00      	cmp	r2, #0
 8002c7c:	d041      	beq.n	8002d02 <HAL_ADC_Init+0x14a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c7e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c80:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	3901      	subs	r1, #1
 8002c94:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002c98:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c9c:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c9e:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ca0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ca6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ca8:	3801      	subs	r0, #1
 8002caa:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 8002cae:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cb0:	6899      	ldr	r1, [r3, #8]
 8002cb2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002cb6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cb8:	6899      	ldr	r1, [r3, #8]
 8002cba:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8002cbe:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8002cc2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cc4:	6899      	ldr	r1, [r3, #8]
 8002cc6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002cca:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ccc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002cce:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cd0:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8002cd4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002cd6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002cd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cda:	f023 0303 	bic.w	r3, r3, #3
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cf2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	e7b2      	b.n	8002c64 <HAL_ADC_Init+0xac>
    return HAL_ERROR;
 8002cfe:	2001      	movs	r0, #1
}
 8002d00:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	e7c6      	b.n	8002c9a <HAL_ADC_Init+0xe2>
 8002d0c:	40012300 	.word	0x40012300
 8002d10:	0f000001 	.word	0x0f000001

08002d14 <HAL_ADC_ConfigChannel>:
{
 8002d14:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8002d16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002d1a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002d1c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002d1e:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8002d20:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002d22:	f000 8094 	beq.w	8002e4e <HAL_ADC_ConfigChannel+0x13a>
 8002d26:	2301      	movs	r3, #1
 8002d28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d2c:	680d      	ldr	r5, [r1, #0]
 8002d2e:	2d09      	cmp	r5, #9
 8002d30:	d829      	bhi.n	8002d86 <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d32:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d34:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d36:	6922      	ldr	r2, [r4, #16]
 8002d38:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002d3c:	2607      	movs	r6, #7
 8002d3e:	40be      	lsls	r6, r7
 8002d40:	ea22 0206 	bic.w	r2, r2, r6
 8002d44:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d46:	6922      	ldr	r2, [r4, #16]
 8002d48:	40bb      	lsls	r3, r7
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 8002d4e:	684b      	ldr	r3, [r1, #4]
 8002d50:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d52:	462e      	mov	r6, r5
  if (sConfig->Rank < 7U)
 8002d54:	d82c      	bhi.n	8002db0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d5a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002d5c:	3b05      	subs	r3, #5
 8002d5e:	211f      	movs	r1, #31
 8002d60:	4099      	lsls	r1, r3
 8002d62:	ea22 0201 	bic.w	r2, r2, r1
 8002d66:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d68:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002d6a:	fa06 f303 	lsl.w	r3, r6, r3
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d72:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <HAL_ADC_ConfigChannel+0x144>)
 8002d74:	429c      	cmp	r4, r3
 8002d76:	d02f      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0xc4>
  __HAL_UNLOCK(hadc);
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002d7e:	4618      	mov	r0, r3
}
 8002d80:	b002      	add	sp, #8
 8002d82:	bcf0      	pop	{r4, r5, r6, r7}
 8002d84:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d86:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d88:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d8a:	68e7      	ldr	r7, [r4, #12]
 8002d8c:	b2ae      	uxth	r6, r5
 8002d8e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8002d92:	3a1e      	subs	r2, #30
 8002d94:	f04f 0c07 	mov.w	ip, #7
 8002d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8002d9c:	ea27 070c 	bic.w	r7, r7, ip
 8002da0:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002da2:	68e7      	ldr	r7, [r4, #12]
 8002da4:	4093      	lsls	r3, r2
 8002da6:	433b      	orrs	r3, r7
 8002da8:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8002daa:	684b      	ldr	r3, [r1, #4]
 8002dac:	2b06      	cmp	r3, #6
 8002dae:	d9d2      	bls.n	8002d56 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d837      	bhi.n	8002e24 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002db4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002db8:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8002dbc:	221f      	movs	r2, #31
 8002dbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dc0:	408a      	lsls	r2, r1
 8002dc2:	ea23 0302 	bic.w	r3, r3, r2
 8002dc6:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dca:	fa06 f101 	lsl.w	r1, r6, r1
 8002dce:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dd0:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <HAL_ADC_ConfigChannel+0x144>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dd2:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dd4:	429c      	cmp	r4, r3
 8002dd6:	d1cf      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x64>
 8002dd8:	2d12      	cmp	r5, #18
 8002dda:	d032      	beq.n	8002e42 <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ddc:	f1a5 0310 	sub.w	r3, r5, #16
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d8c9      	bhi.n	8002d78 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002de4:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <HAL_ADC_ConfigChannel+0x148>)
 8002de6:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002de8:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dee:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002df0:	d1c2      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x64>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_ADC_ConfigChannel+0x14c>)
 8002df4:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8002dfe:	f202 3283 	addw	r2, r2, #899	; 0x383
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0c9b      	lsrs	r3, r3, #18
 8002e08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002e10:	9b01      	ldr	r3, [sp, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0b0      	beq.n	8002d78 <HAL_ADC_ConfigChannel+0x64>
        counter--;
 8002e16:	9b01      	ldr	r3, [sp, #4]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002e1c:	9b01      	ldr	r3, [sp, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f9      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x102>
 8002e22:	e7a9      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e24:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002e28:	3a41      	subs	r2, #65	; 0x41
 8002e2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e2c:	211f      	movs	r1, #31
 8002e2e:	4091      	lsls	r1, r2
 8002e30:	ea23 0301 	bic.w	r3, r3, r1
 8002e34:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e38:	fa06 f102 	lsl.w	r1, r6, r2
 8002e3c:	4319      	orrs	r1, r3
 8002e3e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002e40:	e797      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x5e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e42:	4a06      	ldr	r2, [pc, #24]	; (8002e5c <HAL_ADC_ConfigChannel+0x148>)
 8002e44:	6853      	ldr	r3, [r2, #4]
 8002e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e4a:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e4c:	e794      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x64>
  __HAL_LOCK(hadc);
 8002e4e:	2002      	movs	r0, #2
}
 8002e50:	b002      	add	sp, #8
 8002e52:	bcf0      	pop	{r4, r5, r6, r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40012000 	.word	0x40012000
 8002e5c:	40012300 	.word	0x40012300
 8002e60:	20000570 	.word	0x20000570

08002e64 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002e64:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e66:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002e6a:	698f      	ldr	r7, [r1, #24]
  __HAL_LOCK(hadc);
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	f000 80d9 	beq.w	8003024 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8002e72:	2301      	movs	r3, #1
 8002e74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002e78:	680e      	ldr	r6, [r1, #0]
 8002e7a:	2e09      	cmp	r6, #9
 8002e7c:	d870      	bhi.n	8002f60 <HAL_ADCEx_InjectedConfigChannel+0xfc>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002e7e:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002e80:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002e82:	691c      	ldr	r4, [r3, #16]
 8002e84:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8002e88:	2507      	movs	r5, #7
 8002e8a:	fa05 f50c 	lsl.w	r5, r5, ip
 8002e8e:	ea24 0405 	bic.w	r4, r4, r5
 8002e92:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002e94:	691c      	ldr	r4, [r3, #16]
 8002e96:	fa02 f20c 	lsl.w	r2, r2, ip
 8002e9a:	4322      	orrs	r2, r4
 8002e9c:	611a      	str	r2, [r3, #16]
 8002e9e:	4634      	mov	r4, r6
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002ea2:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002ea6:	684d      	ldr	r5, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002ea8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002eac:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb0:	f10e 3cff 	add.w	ip, lr, #4294967295
 8002eb4:	ea42 5c0c 	orr.w	ip, r2, ip, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002eb8:	1cea      	adds	r2, r5, #3
 8002eba:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002ebe:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
 8002ec8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ecc:	f04f 0e1f 	mov.w	lr, #31
 8002ed0:	fa0e fe02 	lsl.w	lr, lr, r2
 8002ed4:	ea2c 0c0e 	bic.w	ip, ip, lr
 8002ed8:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002edc:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002ee0:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8003030 <HAL_ADCEx_InjectedConfigChannel+0x1cc>
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002ee4:	fa04 f202 	lsl.w	r2, r4, r2
 8002ee8:	ea42 020e 	orr.w	r2, r2, lr
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002eec:	4567      	cmp	r7, ip
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002ef0:	d072      	beq.n	8002fd8 <HAL_ADCEx_InjectedConfigChannel+0x174>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002ef2:	689c      	ldr	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002ef4:	f8d1 c01c 	ldr.w	ip, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002ef8:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 8002efc:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	4317      	orrs	r7, r2
 8002f02:	609f      	str	r7, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002f04:	689c      	ldr	r4, [r3, #8]
 8002f06:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8002f0a:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	ea42 020c 	orr.w	r2, r2, ip
 8002f12:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002f14:	7d4a      	ldrb	r2, [r1, #21]
 8002f16:	2a00      	cmp	r2, #0
 8002f18:	d039      	beq.n	8002f8e <HAL_ADCEx_InjectedConfigChannel+0x12a>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f20:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002f22:	7d0a      	ldrb	r2, [r1, #20]
 8002f24:	2a00      	cmp	r2, #0
 8002f26:	d039      	beq.n	8002f9c <HAL_ADCEx_InjectedConfigChannel+0x138>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002f28:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8002f2a:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002f2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f30:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8002f32:	d039      	beq.n	8002fa8 <HAL_ADCEx_InjectedConfigChannel+0x144>
 8002f34:	2d03      	cmp	r5, #3
 8002f36:	d063      	beq.n	8003000 <HAL_ADCEx_InjectedConfigChannel+0x19c>
 8002f38:	2d01      	cmp	r5, #1
 8002f3a:	d056      	beq.n	8002fea <HAL_ADCEx_InjectedConfigChannel+0x186>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002f3e:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002f40:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002f44:	f022 020f 	bic.w	r2, r2, #15
 8002f48:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002f4a:	6a1a      	ldr	r2, [r3, #32]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002f50:	4a35      	ldr	r2, [pc, #212]	; (8003028 <HAL_ADCEx_InjectedConfigChannel+0x1c4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d035      	beq.n	8002fc2 <HAL_ADCEx_InjectedConfigChannel+0x15e>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f56:	2300      	movs	r3, #0
 8002f58:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f5c:	4618      	mov	r0, r3
}
 8002f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002f60:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002f62:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002f64:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8002f68:	b2b4      	uxth	r4, r6
 8002f6a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8002f6e:	3d1e      	subs	r5, #30
 8002f70:	f04f 0e07 	mov.w	lr, #7
 8002f74:	fa0e fe05 	lsl.w	lr, lr, r5
 8002f78:	ea2c 0c0e 	bic.w	ip, ip, lr
 8002f7c:	f8c3 c00c 	str.w	ip, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002f80:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8002f84:	40aa      	lsls	r2, r5
 8002f86:	ea42 020c 	orr.w	r2, r2, ip
 8002f8a:	60da      	str	r2, [r3, #12]
 8002f8c:	e788      	b.n	8002ea0 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f94:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002f96:	7d0a      	ldrb	r2, [r1, #20]
 8002f98:	2a00      	cmp	r2, #0
 8002f9a:	d1c5      	bne.n	8002f28 <HAL_ADCEx_InjectedConfigChannel+0xc4>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002f9c:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8002f9e:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002fa0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fa4:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8002fa6:	d1c5      	bne.n	8002f34 <HAL_ADCEx_InjectedConfigChannel+0xd0>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002fa8:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002faa:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002fac:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002fb0:	f022 020f 	bic.w	r2, r2, #15
 8002fb4:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002fbc:	4a1a      	ldr	r2, [pc, #104]	; (8003028 <HAL_ADCEx_InjectedConfigChannel+0x1c4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d1c9      	bne.n	8002f56 <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8002fc2:	2e12      	cmp	r6, #18
 8002fc4:	d027      	beq.n	8003016 <HAL_ADCEx_InjectedConfigChannel+0x1b2>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002fc6:	3e10      	subs	r6, #16
 8002fc8:	2e01      	cmp	r6, #1
 8002fca:	d8c4      	bhi.n	8002f56 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 8002fce:	6853      	ldr	r3, [r2, #4]
 8002fd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fd4:	6053      	str	r3, [r2, #4]
 8002fd6:	e7be      	b.n	8002f56 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002fde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	e794      	b.n	8002f14 <HAL_ADCEx_InjectedConfigChannel+0xb0>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002fea:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002fec:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002fee:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002ff2:	f022 020f 	bic.w	r2, r2, #15
 8002ff6:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	615a      	str	r2, [r3, #20]
      break;
 8002ffe:	e7a7      	b.n	8002f50 <HAL_ADCEx_InjectedConfigChannel+0xec>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003000:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003002:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003004:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003008:	f022 020f 	bic.w	r2, r2, #15
 800300c:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	430a      	orrs	r2, r1
 8003012:	61da      	str	r2, [r3, #28]
      break;
 8003014:	e79c      	b.n	8002f50 <HAL_ADCEx_InjectedConfigChannel+0xec>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003016:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800301a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800301e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003022:	e798      	b.n	8002f56 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __HAL_LOCK(hadc);
 8003024:	2002      	movs	r0, #2
}
 8003026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003028:	40012000 	.word	0x40012000
 800302c:	40012300 	.word	0x40012300
 8003030:	000f0001 	.word	0x000f0001

08003034 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003034:	4908      	ldr	r1, [pc, #32]	; (8003058 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8003036:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800303a:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800303c:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8003040:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003042:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800304c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003050:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8003054:	60cb      	str	r3, [r1, #12]
 8003056:	4770      	bx	lr
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_NVIC_SetPriority+0x68>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003064:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003066:	f1c3 0507 	rsb	r5, r3, #7
 800306a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003070:	bf28      	it	cs
 8003072:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003074:	2c06      	cmp	r4, #6
 8003076:	d919      	bls.n	80030ac <HAL_NVIC_SetPriority+0x50>
 8003078:	3b03      	subs	r3, #3
 800307a:	f04f 34ff 	mov.w	r4, #4294967295
 800307e:	409c      	lsls	r4, r3
 8003080:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	f04f 34ff 	mov.w	r4, #4294967295
 8003088:	40ac      	lsls	r4, r5
 800308a:	ea21 0104 	bic.w	r1, r1, r4
 800308e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003090:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003092:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003096:	db0c      	blt.n	80030b2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003098:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800309c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80030a0:	0109      	lsls	r1, r1, #4
 80030a2:	b2c9      	uxtb	r1, r1
 80030a4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80030a8:	bc30      	pop	{r4, r5}
 80030aa:	4770      	bx	lr
 80030ac:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ae:	4613      	mov	r3, r2
 80030b0:	e7e8      	b.n	8003084 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_NVIC_SetPriority+0x6c>)
 80030b4:	f000 000f 	and.w	r0, r0, #15
 80030b8:	0109      	lsls	r1, r1, #4
 80030ba:	4403      	add	r3, r0
 80030bc:	b2c9      	uxtb	r1, r1
 80030be:	7619      	strb	r1, [r3, #24]
 80030c0:	bc30      	pop	{r4, r5}
 80030c2:	4770      	bx	lr
 80030c4:	e000ed00 	.word	0xe000ed00
 80030c8:	e000ecfc 	.word	0xe000ecfc

080030cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80030cc:	2800      	cmp	r0, #0
 80030ce:	db07      	blt.n	80030e0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d0:	f000 011f 	and.w	r1, r0, #31
 80030d4:	4a03      	ldr	r2, [pc, #12]	; (80030e4 <HAL_NVIC_EnableIRQ+0x18>)
 80030d6:	0940      	lsrs	r0, r0, #5
 80030d8:	2301      	movs	r3, #1
 80030da:	408b      	lsls	r3, r1
 80030dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e100 	.word	0xe000e100

080030e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	3801      	subs	r0, #1
 80030ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80030ee:	d20e      	bcs.n	800310e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f4:	4c08      	ldr	r4, [pc, #32]	; (8003118 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f8:	20f0      	movs	r0, #240	; 0xf0
 80030fa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030fe:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003100:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003102:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003104:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8003106:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310a:	6019      	str	r1, [r3, #0]
 800310c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800310e:	2001      	movs	r0, #1
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000e010 	.word	0xe000e010
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop

08003120 <HAL_SYSTICK_IRQHandler>:
{
 8003120:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003122:	f7ff fffb 	bl	800311c <HAL_SYSTICK_Callback>
}
 8003126:	bd08      	pop	{r3, pc}

08003128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800312c:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 800330c <HAL_GPIO_Init+0x1e4>
 8003130:	680d      	ldr	r5, [r1, #0]
{
 8003132:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003134:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8003136:	f04f 0b01 	mov.w	fp, #1
 800313a:	e003      	b.n	8003144 <HAL_GPIO_Init+0x1c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313c:	3301      	adds	r3, #1
 800313e:	2b10      	cmp	r3, #16
 8003140:	f000 808a 	beq.w	8003258 <HAL_GPIO_Init+0x130>
    ioposition = 0x01U << position;
 8003144:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003148:	ea02 0a05 	and.w	sl, r2, r5
    if(iocurrent == ioposition)
 800314c:	43aa      	bics	r2, r5
 800314e:	d1f5      	bne.n	800313c <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003150:	684c      	ldr	r4, [r1, #4]
 8003152:	f024 0e10 	bic.w	lr, r4, #16
 8003156:	f10e 32ff 	add.w	r2, lr, #4294967295
 800315a:	2a01      	cmp	r2, #1
 800315c:	ea4f 0643 	mov.w	r6, r3, lsl #1
 8003160:	d97d      	bls.n	800325e <HAL_GPIO_Init+0x136>
      temp = GPIOx->PUPDR;
 8003162:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003164:	2203      	movs	r2, #3
 8003166:	40b2      	lsls	r2, r6
 8003168:	ea27 0e02 	bic.w	lr, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800316c:	688f      	ldr	r7, [r1, #8]
 800316e:	40b7      	lsls	r7, r6
 8003170:	ea47 070e 	orr.w	r7, r7, lr
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003174:	43d2      	mvns	r2, r2
 8003176:	9201      	str	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 8003178:	60c7      	str	r7, [r0, #12]
      temp = GPIOx->MODER;
 800317a:	f8d0 e000 	ldr.w	lr, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800317e:	9a01      	ldr	r2, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003180:	f004 0703 	and.w	r7, r4, #3
 8003184:	fa07 f606 	lsl.w	r6, r7, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003188:	ea0e 0e02 	and.w	lr, lr, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800318c:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003190:	00e7      	lsls	r7, r4, #3
      GPIOx->MODER = temp;
 8003192:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003194:	d5d2      	bpl.n	800313c <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003196:	4e58      	ldr	r6, [pc, #352]	; (80032f8 <HAL_GPIO_Init+0x1d0>)
 8003198:	2200      	movs	r2, #0
 800319a:	9203      	str	r2, [sp, #12]
 800319c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800319e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a2:	6472      	str	r2, [r6, #68]	; 0x44
 80031a4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80031a6:	f023 0703 	bic.w	r7, r3, #3
 80031aa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80031ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80031b2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80031b6:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031b8:	f003 0603 	and.w	r6, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031bc:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80031be:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031c2:	00b6      	lsls	r6, r6, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	40b2      	lsls	r2, r6
 80031c8:	ea2e 0802 	bic.w	r8, lr, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031cc:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <HAL_GPIO_Init+0x1d4>)
 80031ce:	4290      	cmp	r0, r2
 80031d0:	d015      	beq.n	80031fe <HAL_GPIO_Init+0xd6>
 80031d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031d6:	4290      	cmp	r0, r2
 80031d8:	d07b      	beq.n	80032d2 <HAL_GPIO_Init+0x1aa>
 80031da:	4a49      	ldr	r2, [pc, #292]	; (8003300 <HAL_GPIO_Init+0x1d8>)
 80031dc:	4290      	cmp	r0, r2
 80031de:	d07d      	beq.n	80032dc <HAL_GPIO_Init+0x1b4>
 80031e0:	4a48      	ldr	r2, [pc, #288]	; (8003304 <HAL_GPIO_Init+0x1dc>)
 80031e2:	4290      	cmp	r0, r2
 80031e4:	f000 8081 	beq.w	80032ea <HAL_GPIO_Init+0x1c2>
 80031e8:	4a47      	ldr	r2, [pc, #284]	; (8003308 <HAL_GPIO_Init+0x1e0>)
 80031ea:	4290      	cmp	r0, r2
 80031ec:	bf0c      	ite	eq
 80031ee:	f04f 0e04 	moveq.w	lr, #4
 80031f2:	f04f 0e07 	movne.w	lr, #7
 80031f6:	fa0e f606 	lsl.w	r6, lr, r6
 80031fa:	ea48 0806 	orr.w	r8, r8, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031fe:	f8c7 8008 	str.w	r8, [r7, #8]
        temp = EXTI->IMR;
 8003202:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003206:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8003208:	ea6f 070a 	mvn.w	r7, sl
 800320c:	bf54      	ite	pl
 800320e:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8003210:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8003214:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 8003218:	f8dc 6004 	ldr.w	r6, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800321c:	03a2      	lsls	r2, r4, #14
        temp &= ~((uint32_t)iocurrent);
 800321e:	bf54      	ite	pl
 8003220:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8003222:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->EMR = temp;
 8003226:	f8cc 6004 	str.w	r6, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800322a:	f8dc 6008 	ldr.w	r6, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800322e:	02e2      	lsls	r2, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8003230:	bf54      	ite	pl
 8003232:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8003234:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->RTSR = temp;
 8003238:	f8cc 6008 	str.w	r6, [ip, #8]

        temp = EXTI->FTSR;
 800323c:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003240:	02a4      	lsls	r4, r4, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003242:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8003246:	bf54      	ite	pl
 8003248:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800324a:	ea4a 0202 	orrmi.w	r2, sl, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324e:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8003250:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003254:	f47f af76 	bne.w	8003144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003258:	b005      	add	sp, #20
 800325a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800325e:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003260:	688a      	ldr	r2, [r1, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003262:	f04f 0803 	mov.w	r8, #3
 8003266:	fa08 f806 	lsl.w	r8, r8, r6
 800326a:	ea27 0908 	bic.w	r9, r7, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800326e:	68cf      	ldr	r7, [r1, #12]
 8003270:	40b7      	lsls	r7, r6
 8003272:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8003276:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003278:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800327c:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003280:	ea29 090a 	bic.w	r9, r9, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003284:	409f      	lsls	r7, r3
 8003286:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 800328a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800328c:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800328e:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003290:	ea27 0708 	bic.w	r7, r7, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003294:	4317      	orrs	r7, r2
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003296:	f1be 0f02 	cmp.w	lr, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800329a:	ea6f 0208 	mvn.w	r2, r8
 800329e:	9201      	str	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 80032a0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032a2:	f47f af6a 	bne.w	800317a <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3U];
 80032a6:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80032aa:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ae:	f003 0707 	and.w	r7, r3, #7
 80032b2:	00ba      	lsls	r2, r7, #2
        temp = GPIOx->AFR[position >> 3U];
 80032b4:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032b8:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ba:	f04f 0e0f 	mov.w	lr, #15
 80032be:	fa0e fe02 	lsl.w	lr, lr, r2
 80032c2:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c6:	4097      	lsls	r7, r2
 80032c8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80032cc:	f8c8 7020 	str.w	r7, [r8, #32]
 80032d0:	e753      	b.n	800317a <HAL_GPIO_Init+0x52>
 80032d2:	fa0b f606 	lsl.w	r6, fp, r6
 80032d6:	ea48 0806 	orr.w	r8, r8, r6
 80032da:	e790      	b.n	80031fe <HAL_GPIO_Init+0xd6>
 80032dc:	f04f 0e02 	mov.w	lr, #2
 80032e0:	fa0e f606 	lsl.w	r6, lr, r6
 80032e4:	ea48 0806 	orr.w	r8, r8, r6
 80032e8:	e789      	b.n	80031fe <HAL_GPIO_Init+0xd6>
 80032ea:	f04f 0e03 	mov.w	lr, #3
 80032ee:	fa0e f606 	lsl.w	r6, lr, r6
 80032f2:	ea48 0806 	orr.w	r8, r8, r6
 80032f6:	e782      	b.n	80031fe <HAL_GPIO_Init+0xd6>
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40020000 	.word	0x40020000
 8003300:	40020800 	.word	0x40020800
 8003304:	40020c00 	.word	0x40020c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40013c00 	.word	0x40013c00

08003310 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003310:	b902      	cbnz	r2, 8003314 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003312:	0409      	lsls	r1, r1, #16
 8003314:	6181      	str	r1, [r0, #24]
  }
}
 8003316:	4770      	bx	lr

08003318 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003318:	2800      	cmp	r0, #0
 800331a:	f000 819f 	beq.w	800365c <HAL_RCC_OscConfig+0x344>
{
 800331e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003322:	6803      	ldr	r3, [r0, #0]
 8003324:	07dd      	lsls	r5, r3, #31
{
 8003326:	b082      	sub	sp, #8
 8003328:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	d52f      	bpl.n	800338c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800332c:	49ac      	ldr	r1, [pc, #688]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
 800332e:	688a      	ldr	r2, [r1, #8]
 8003330:	f002 020c 	and.w	r2, r2, #12
 8003334:	2a04      	cmp	r2, #4
 8003336:	f000 80ec 	beq.w	8003512 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333a:	688a      	ldr	r2, [r1, #8]
 800333c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003340:	2a08      	cmp	r2, #8
 8003342:	f000 80e2 	beq.w	800350a <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003346:	6863      	ldr	r3, [r4, #4]
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334c:	f000 80eb 	beq.w	8003526 <HAL_RCC_OscConfig+0x20e>
 8003350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003354:	f000 8172 	beq.w	800363c <HAL_RCC_OscConfig+0x324>
 8003358:	4da1      	ldr	r5, [pc, #644]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
 800335a:	682a      	ldr	r2, [r5, #0]
 800335c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003360:	602a      	str	r2, [r5, #0]
 8003362:	682a      	ldr	r2, [r5, #0]
 8003364:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003368:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 80e0 	bne.w	8003530 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7ff fc1c 	bl	8002bac <HAL_GetTick>
 8003374:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003376:	e005      	b.n	8003384 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003378:	f7ff fc18 	bl	8002bac <HAL_GetTick>
 800337c:	1b80      	subs	r0, r0, r6
 800337e:	2864      	cmp	r0, #100	; 0x64
 8003380:	f200 8100 	bhi.w	8003584 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	039b      	lsls	r3, r3, #14
 8003388:	d4f6      	bmi.n	8003378 <HAL_RCC_OscConfig+0x60>
 800338a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338c:	079f      	lsls	r7, r3, #30
 800338e:	d528      	bpl.n	80033e2 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003390:	4a93      	ldr	r2, [pc, #588]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
 8003392:	6891      	ldr	r1, [r2, #8]
 8003394:	f011 0f0c 	tst.w	r1, #12
 8003398:	f000 8090 	beq.w	80034bc <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800339c:	6891      	ldr	r1, [r2, #8]
 800339e:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033a2:	2908      	cmp	r1, #8
 80033a4:	f000 8086 	beq.w	80034b4 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033a8:	68e3      	ldr	r3, [r4, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8106 	beq.w	80035bc <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b0:	4b8c      	ldr	r3, [pc, #560]	; (80035e4 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b2:	4e8b      	ldr	r6, [pc, #556]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033b8:	f7ff fbf8 	bl	8002bac <HAL_GetTick>
 80033bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033be:	e005      	b.n	80033cc <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c0:	f7ff fbf4 	bl	8002bac <HAL_GetTick>
 80033c4:	1b40      	subs	r0, r0, r5
 80033c6:	2802      	cmp	r0, #2
 80033c8:	f200 80dc 	bhi.w	8003584 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033cc:	6833      	ldr	r3, [r6, #0]
 80033ce:	0798      	lsls	r0, r3, #30
 80033d0:	d5f6      	bpl.n	80033c0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d2:	6833      	ldr	r3, [r6, #0]
 80033d4:	6922      	ldr	r2, [r4, #16]
 80033d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80033da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80033de:	6033      	str	r3, [r6, #0]
 80033e0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	071a      	lsls	r2, r3, #28
 80033e4:	d452      	bmi.n	800348c <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e6:	0758      	lsls	r0, r3, #29
 80033e8:	d52f      	bpl.n	800344a <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ea:	4a7d      	ldr	r2, [pc, #500]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
 80033ec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80033ee:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80033f2:	d07e      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 80033f4:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	4e7c      	ldr	r6, [pc, #496]	; (80035e8 <HAL_RCC_OscConfig+0x2d0>)
 80033f8:	6833      	ldr	r3, [r6, #0]
 80033fa:	05d9      	lsls	r1, r3, #23
 80033fc:	f140 80b2 	bpl.w	8003564 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003400:	68a3      	ldr	r3, [r4, #8]
 8003402:	2b01      	cmp	r3, #1
 8003404:	f000 80c2 	beq.w	800358c <HAL_RCC_OscConfig+0x274>
 8003408:	2b05      	cmp	r3, #5
 800340a:	f000 8129 	beq.w	8003660 <HAL_RCC_OscConfig+0x348>
 800340e:	4e74      	ldr	r6, [pc, #464]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
 8003410:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	6732      	str	r2, [r6, #112]	; 0x70
 8003418:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800341a:	f022 0204 	bic.w	r2, r2, #4
 800341e:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003420:	2b00      	cmp	r3, #0
 8003422:	f040 80b8 	bne.w	8003596 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003426:	f7ff fbc1 	bl	8002bac <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800342e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003430:	e005      	b.n	800343e <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7ff fbbb 	bl	8002bac <HAL_GetTick>
 8003436:	1bc0      	subs	r0, r0, r7
 8003438:	4540      	cmp	r0, r8
 800343a:	f200 80a3 	bhi.w	8003584 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003440:	0798      	lsls	r0, r3, #30
 8003442:	d4f6      	bmi.n	8003432 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003444:	2d00      	cmp	r5, #0
 8003446:	f040 8103 	bne.w	8003650 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800344a:	69a0      	ldr	r0, [r4, #24]
 800344c:	b1d0      	cbz	r0, 8003484 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800344e:	4d64      	ldr	r5, [pc, #400]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
 8003450:	68ab      	ldr	r3, [r5, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b08      	cmp	r3, #8
 8003458:	f000 80cc 	beq.w	80035f4 <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345c:	4b63      	ldr	r3, [pc, #396]	; (80035ec <HAL_RCC_OscConfig+0x2d4>)
 800345e:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003460:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003462:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003464:	f000 8106 	beq.w	8003674 <HAL_RCC_OscConfig+0x35c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7ff fba0 	bl	8002bac <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346c:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800346e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003470:	e005      	b.n	800347e <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003472:	f7ff fb9b 	bl	8002bac <HAL_GetTick>
 8003476:	1b40      	subs	r0, r0, r5
 8003478:	2802      	cmp	r0, #2
 800347a:	f200 8083 	bhi.w	8003584 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	d4f6      	bmi.n	8003472 <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003484:	2000      	movs	r0, #0
}
 8003486:	b002      	add	sp, #8
 8003488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800348c:	6963      	ldr	r3, [r4, #20]
 800348e:	b303      	cbz	r3, 80034d2 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8003490:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	4e53      	ldr	r6, [pc, #332]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003498:	f7ff fb88 	bl	8002bac <HAL_GetTick>
 800349c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	e004      	b.n	80034aa <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a0:	f7ff fb84 	bl	8002bac <HAL_GetTick>
 80034a4:	1b40      	subs	r0, r0, r5
 80034a6:	2802      	cmp	r0, #2
 80034a8:	d86c      	bhi.n	8003584 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80034ac:	079b      	lsls	r3, r3, #30
 80034ae:	d5f7      	bpl.n	80034a0 <HAL_RCC_OscConfig+0x188>
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	e798      	b.n	80033e6 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b4:	6852      	ldr	r2, [r2, #4]
 80034b6:	0256      	lsls	r6, r2, #9
 80034b8:	f53f af76 	bmi.w	80033a8 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034bc:	4a48      	ldr	r2, [pc, #288]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	0795      	lsls	r5, r2, #30
 80034c2:	d543      	bpl.n	800354c <HAL_RCC_OscConfig+0x234>
 80034c4:	68e2      	ldr	r2, [r4, #12]
 80034c6:	2a01      	cmp	r2, #1
 80034c8:	d040      	beq.n	800354c <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 80034ca:	2001      	movs	r0, #1
}
 80034cc:	b002      	add	sp, #8
 80034ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80034d2:	4a47      	ldr	r2, [pc, #284]	; (80035f0 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	4e42      	ldr	r6, [pc, #264]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 80034d6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80034d8:	f7ff fb68 	bl	8002bac <HAL_GetTick>
 80034dc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034de:	e004      	b.n	80034ea <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e0:	f7ff fb64 	bl	8002bac <HAL_GetTick>
 80034e4:	1b40      	subs	r0, r0, r5
 80034e6:	2802      	cmp	r0, #2
 80034e8:	d84c      	bhi.n	8003584 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ea:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80034ec:	079f      	lsls	r7, r3, #30
 80034ee:	d4f7      	bmi.n	80034e0 <HAL_RCC_OscConfig+0x1c8>
 80034f0:	e7de      	b.n	80034b0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80034f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fa:	6413      	str	r3, [r2, #64]	; 0x40
 80034fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003506:	2501      	movs	r5, #1
 8003508:	e775      	b.n	80033f6 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350a:	684a      	ldr	r2, [r1, #4]
 800350c:	0250      	lsls	r0, r2, #9
 800350e:	f57f af1a 	bpl.w	8003346 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003512:	4a33      	ldr	r2, [pc, #204]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	0391      	lsls	r1, r2, #14
 8003518:	f57f af38 	bpl.w	800338c <HAL_RCC_OscConfig+0x74>
 800351c:	6862      	ldr	r2, [r4, #4]
 800351e:	2a00      	cmp	r2, #0
 8003520:	f47f af34 	bne.w	800338c <HAL_RCC_OscConfig+0x74>
 8003524:	e7d1      	b.n	80034ca <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003526:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
 8003528:	6813      	ldr	r3, [r2, #0]
 800352a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003530:	f7ff fb3c 	bl	8002bac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003534:	4e2a      	ldr	r6, [pc, #168]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8003536:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003538:	e004      	b.n	8003544 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800353a:	f7ff fb37 	bl	8002bac <HAL_GetTick>
 800353e:	1b40      	subs	r0, r0, r5
 8003540:	2864      	cmp	r0, #100	; 0x64
 8003542:	d81f      	bhi.n	8003584 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003544:	6833      	ldr	r3, [r6, #0]
 8003546:	039a      	lsls	r2, r3, #14
 8003548:	d5f7      	bpl.n	800353a <HAL_RCC_OscConfig+0x222>
 800354a:	e71e      	b.n	800338a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354c:	4924      	ldr	r1, [pc, #144]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
 800354e:	6920      	ldr	r0, [r4, #16]
 8003550:	680a      	ldr	r2, [r1, #0]
 8003552:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003556:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800355a:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355c:	071a      	lsls	r2, r3, #28
 800355e:	f57f af42 	bpl.w	80033e6 <HAL_RCC_OscConfig+0xce>
 8003562:	e793      	b.n	800348c <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003564:	6833      	ldr	r3, [r6, #0]
 8003566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800356c:	f7ff fb1e 	bl	8002bac <HAL_GetTick>
 8003570:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003572:	6833      	ldr	r3, [r6, #0]
 8003574:	05da      	lsls	r2, r3, #23
 8003576:	f53f af43 	bmi.w	8003400 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7ff fb17 	bl	8002bac <HAL_GetTick>
 800357e:	1bc0      	subs	r0, r0, r7
 8003580:	2802      	cmp	r0, #2
 8003582:	d9f6      	bls.n	8003572 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8003584:	2003      	movs	r0, #3
}
 8003586:	b002      	add	sp, #8
 8003588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358c:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
 800358e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003596:	f7ff fb09 	bl	8002bac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359a:	4f11      	ldr	r7, [pc, #68]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800359c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	e004      	b.n	80035ae <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7ff fb02 	bl	8002bac <HAL_GetTick>
 80035a8:	1b80      	subs	r0, r0, r6
 80035aa:	4540      	cmp	r0, r8
 80035ac:	d8ea      	bhi.n	8003584 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b0:	079b      	lsls	r3, r3, #30
 80035b2:	d5f7      	bpl.n	80035a4 <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 80035b4:	2d00      	cmp	r5, #0
 80035b6:	f43f af48 	beq.w	800344a <HAL_RCC_OscConfig+0x132>
 80035ba:	e049      	b.n	8003650 <HAL_RCC_OscConfig+0x338>
        __HAL_RCC_HSI_DISABLE();
 80035bc:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	4e08      	ldr	r6, [pc, #32]	; (80035e0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 80035c0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80035c2:	f7ff faf3 	bl	8002bac <HAL_GetTick>
 80035c6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c8:	e004      	b.n	80035d4 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ca:	f7ff faef 	bl	8002bac <HAL_GetTick>
 80035ce:	1b40      	subs	r0, r0, r5
 80035d0:	2802      	cmp	r0, #2
 80035d2:	d8d7      	bhi.n	8003584 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d4:	6833      	ldr	r3, [r6, #0]
 80035d6:	0799      	lsls	r1, r3, #30
 80035d8:	d4f7      	bmi.n	80035ca <HAL_RCC_OscConfig+0x2b2>
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	e701      	b.n	80033e2 <HAL_RCC_OscConfig+0xca>
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	42470000 	.word	0x42470000
 80035e8:	40007000 	.word	0x40007000
 80035ec:	42470060 	.word	0x42470060
 80035f0:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f4:	2801      	cmp	r0, #1
 80035f6:	f43f af46 	beq.w	8003486 <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 80035fa:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fc:	69e2      	ldr	r2, [r4, #28]
 80035fe:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8003602:	4291      	cmp	r1, r2
 8003604:	f47f af61 	bne.w	80034ca <HAL_RCC_OscConfig+0x1b2>
 8003608:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800360a:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	4291      	cmp	r1, r2
 8003610:	f47f af5b 	bne.w	80034ca <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003614:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003616:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800361a:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800361c:	428a      	cmp	r2, r1
 800361e:	f47f af54 	bne.w	80034ca <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003622:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003624:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003628:	4291      	cmp	r1, r2
 800362a:	f47f af4e 	bne.w	80034ca <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800362e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003630:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
        return HAL_ERROR;
 8003634:	1a18      	subs	r0, r3, r0
 8003636:	bf18      	it	ne
 8003638:	2001      	movne	r0, #1
 800363a:	e724      	b.n	8003486 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363c:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <HAL_RCC_OscConfig+0x3b8>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800364c:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800364e:	e76f      	b.n	8003530 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003650:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <HAL_RCC_OscConfig+0x3b8>)
 8003652:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003658:	6413      	str	r3, [r2, #64]	; 0x40
 800365a:	e6f6      	b.n	800344a <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 800365c:	2001      	movs	r0, #1
}
 800365e:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCC_OscConfig+0x3b8>)
 8003662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003664:	f042 0204 	orr.w	r2, r2, #4
 8003668:	671a      	str	r2, [r3, #112]	; 0x70
 800366a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800366c:	f042 0201 	orr.w	r2, r2, #1
 8003670:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003672:	e790      	b.n	8003596 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8003674:	f7ff fa9a 	bl	8002bac <HAL_GetTick>
 8003678:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	e005      	b.n	8003688 <HAL_RCC_OscConfig+0x370>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367c:	f7ff fa96 	bl	8002bac <HAL_GetTick>
 8003680:	1b80      	subs	r0, r0, r6
 8003682:	2802      	cmp	r0, #2
 8003684:	f63f af7e 	bhi.w	8003584 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	0199      	lsls	r1, r3, #6
 800368c:	d4f6      	bmi.n	800367c <HAL_RCC_OscConfig+0x364>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800368e:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8003692:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8003696:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003698:	4333      	orrs	r3, r6
 800369a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800369e:	0852      	lsrs	r2, r2, #1
 80036a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80036a4:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80036a6:	490b      	ldr	r1, [pc, #44]	; (80036d4 <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a8:	4e09      	ldr	r6, [pc, #36]	; (80036d0 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80036ae:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036b0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80036b2:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 80036b4:	f7ff fa7a 	bl	8002bac <HAL_GetTick>
 80036b8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ba:	e005      	b.n	80036c8 <HAL_RCC_OscConfig+0x3b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036bc:	f7ff fa76 	bl	8002bac <HAL_GetTick>
 80036c0:	1b00      	subs	r0, r0, r4
 80036c2:	2802      	cmp	r0, #2
 80036c4:	f63f af5e 	bhi.w	8003584 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c8:	6833      	ldr	r3, [r6, #0]
 80036ca:	019a      	lsls	r2, r3, #6
 80036cc:	d5f6      	bpl.n	80036bc <HAL_RCC_OscConfig+0x3a4>
 80036ce:	e6d9      	b.n	8003484 <HAL_RCC_OscConfig+0x16c>
 80036d0:	40023800 	.word	0x40023800
 80036d4:	42470060 	.word	0x42470060

080036d8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80036d8:	4b01      	ldr	r3, [pc, #4]	; (80036e0 <HAL_RCC_EnableCSS+0x8>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
}
 80036de:	4770      	bx	lr
 80036e0:	4247004c 	.word	0x4247004c

080036e4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e4:	4917      	ldr	r1, [pc, #92]	; (8003744 <HAL_RCC_GetSysClockFreq+0x60>)
{
 80036e6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e8:	688b      	ldr	r3, [r1, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d01b      	beq.n	800372a <HAL_RCC_GetSysClockFreq+0x46>
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d117      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036f8:	684b      	ldr	r3, [r1, #4]
 80036fa:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003702:	d114      	bne.n	800372e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003704:	6849      	ldr	r1, [r1, #4]
 8003706:	4810      	ldr	r0, [pc, #64]	; (8003748 <HAL_RCC_GetSysClockFreq+0x64>)
 8003708:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800370c:	fba1 0100 	umull	r0, r1, r1, r0
 8003710:	f7fc fd60 	bl	80001d4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_GetSysClockFreq+0x60>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800371c:	3301      	adds	r3, #1
 800371e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003720:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003724:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003726:	4808      	ldr	r0, [pc, #32]	; (8003748 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003728:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800372a:	4808      	ldr	r0, [pc, #32]	; (800374c <HAL_RCC_GetSysClockFreq+0x68>)
}
 800372c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372e:	684b      	ldr	r3, [r1, #4]
 8003730:	4806      	ldr	r0, [pc, #24]	; (800374c <HAL_RCC_GetSysClockFreq+0x68>)
 8003732:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003736:	fba3 0100 	umull	r0, r1, r3, r0
 800373a:	2300      	movs	r3, #0
 800373c:	f7fc fd4a 	bl	80001d4 <__aeabi_uldivmod>
 8003740:	e7e8      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x30>
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	00f42400 	.word	0x00f42400
 800374c:	007a1200 	.word	0x007a1200

08003750 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003750:	2800      	cmp	r0, #0
 8003752:	f000 8087 	beq.w	8003864 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003756:	4a48      	ldr	r2, [pc, #288]	; (8003878 <HAL_RCC_ClockConfig+0x128>)
 8003758:	6813      	ldr	r3, [r2, #0]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	428b      	cmp	r3, r1
{
 8003760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003764:	460d      	mov	r5, r1
 8003766:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003768:	d209      	bcs.n	800377e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	b2cb      	uxtb	r3, r1
 800376c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	6813      	ldr	r3, [r2, #0]
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	428b      	cmp	r3, r1
 8003776:	d002      	beq.n	800377e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003778:	2001      	movs	r0, #1
}
 800377a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	0798      	lsls	r0, r3, #30
 8003782:	d514      	bpl.n	80037ae <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	0759      	lsls	r1, r3, #29
 8003786:	d504      	bpl.n	8003792 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003788:	493c      	ldr	r1, [pc, #240]	; (800387c <HAL_RCC_ClockConfig+0x12c>)
 800378a:	688a      	ldr	r2, [r1, #8]
 800378c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003790:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003792:	071a      	lsls	r2, r3, #28
 8003794:	d504      	bpl.n	80037a0 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003796:	4939      	ldr	r1, [pc, #228]	; (800387c <HAL_RCC_ClockConfig+0x12c>)
 8003798:	688a      	ldr	r2, [r1, #8]
 800379a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800379e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a0:	4936      	ldr	r1, [pc, #216]	; (800387c <HAL_RCC_ClockConfig+0x12c>)
 80037a2:	68a0      	ldr	r0, [r4, #8]
 80037a4:	688a      	ldr	r2, [r1, #8]
 80037a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80037aa:	4302      	orrs	r2, r0
 80037ac:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ae:	07df      	lsls	r7, r3, #31
 80037b0:	d521      	bpl.n	80037f6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	6862      	ldr	r2, [r4, #4]
 80037b4:	2a01      	cmp	r2, #1
 80037b6:	d057      	beq.n	8003868 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b8:	1e93      	subs	r3, r2, #2
 80037ba:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037bc:	4b2f      	ldr	r3, [pc, #188]	; (800387c <HAL_RCC_ClockConfig+0x12c>)
 80037be:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c0:	d94d      	bls.n	800385e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c2:	0799      	lsls	r1, r3, #30
 80037c4:	d5d8      	bpl.n	8003778 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c6:	4e2d      	ldr	r6, [pc, #180]	; (800387c <HAL_RCC_ClockConfig+0x12c>)
 80037c8:	68b3      	ldr	r3, [r6, #8]
 80037ca:	f023 0303 	bic.w	r3, r3, #3
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80037d2:	f7ff f9eb 	bl	8002bac <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80037da:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037dc:	e004      	b.n	80037e8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037de:	f7ff f9e5 	bl	8002bac <HAL_GetTick>
 80037e2:	1bc0      	subs	r0, r0, r7
 80037e4:	4540      	cmp	r0, r8
 80037e6:	d844      	bhi.n	8003872 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e8:	68b3      	ldr	r3, [r6, #8]
 80037ea:	6862      	ldr	r2, [r4, #4]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80037f4:	d1f3      	bne.n	80037de <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f6:	4a20      	ldr	r2, [pc, #128]	; (8003878 <HAL_RCC_ClockConfig+0x128>)
 80037f8:	6813      	ldr	r3, [r2, #0]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	42ab      	cmp	r3, r5
 8003800:	d906      	bls.n	8003810 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003802:	b2eb      	uxtb	r3, r5
 8003804:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	6813      	ldr	r3, [r2, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	42ab      	cmp	r3, r5
 800380e:	d1b3      	bne.n	8003778 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	075a      	lsls	r2, r3, #29
 8003814:	d506      	bpl.n	8003824 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003816:	4919      	ldr	r1, [pc, #100]	; (800387c <HAL_RCC_ClockConfig+0x12c>)
 8003818:	68e0      	ldr	r0, [r4, #12]
 800381a:	688a      	ldr	r2, [r1, #8]
 800381c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003820:	4302      	orrs	r2, r0
 8003822:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003824:	071b      	lsls	r3, r3, #28
 8003826:	d507      	bpl.n	8003838 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003828:	4a14      	ldr	r2, [pc, #80]	; (800387c <HAL_RCC_ClockConfig+0x12c>)
 800382a:	6921      	ldr	r1, [r4, #16]
 800382c:	6893      	ldr	r3, [r2, #8]
 800382e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003832:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003836:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003838:	f7ff ff54 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 800383c:	4a0f      	ldr	r2, [pc, #60]	; (800387c <HAL_RCC_ClockConfig+0x12c>)
 800383e:	4c10      	ldr	r4, [pc, #64]	; (8003880 <HAL_RCC_ClockConfig+0x130>)
 8003840:	6892      	ldr	r2, [r2, #8]
 8003842:	4910      	ldr	r1, [pc, #64]	; (8003884 <HAL_RCC_ClockConfig+0x134>)
 8003844:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003848:	4603      	mov	r3, r0
 800384a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 800384c:	480e      	ldr	r0, [pc, #56]	; (8003888 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800384e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003850:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003852:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003854:	f7ff f960 	bl	8002b18 <HAL_InitTick>
  return HAL_OK;
 8003858:	2000      	movs	r0, #0
}
 800385a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385e:	0198      	lsls	r0, r3, #6
 8003860:	d4b1      	bmi.n	80037c6 <HAL_RCC_ClockConfig+0x76>
 8003862:	e789      	b.n	8003778 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003864:	2001      	movs	r0, #1
}
 8003866:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003868:	4b04      	ldr	r3, [pc, #16]	; (800387c <HAL_RCC_ClockConfig+0x12c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	039e      	lsls	r6, r3, #14
 800386e:	d4aa      	bmi.n	80037c6 <HAL_RCC_ClockConfig+0x76>
 8003870:	e782      	b.n	8003778 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003872:	2003      	movs	r0, #3
 8003874:	e781      	b.n	800377a <HAL_RCC_ClockConfig+0x2a>
 8003876:	bf00      	nop
 8003878:	40023c00 	.word	0x40023c00
 800387c:	40023800 	.word	0x40023800
 8003880:	08006428 	.word	0x08006428
 8003884:	20000570 	.word	0x20000570
 8003888:	20000578 	.word	0x20000578

0800388c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800388c:	4b01      	ldr	r3, [pc, #4]	; (8003894 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000570 	.word	0x20000570

08003898 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800389a:	4a05      	ldr	r2, [pc, #20]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800389c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800389e:	4905      	ldr	r1, [pc, #20]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038a0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80038a4:	6808      	ldr	r0, [r1, #0]
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
}
 80038a8:	40d8      	lsrs	r0, r3
 80038aa:	4770      	bx	lr
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08006438 	.word	0x08006438
 80038b4:	20000570 	.word	0x20000570

080038b8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80038ba:	4a05      	ldr	r2, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80038bc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80038be:	4905      	ldr	r1, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038c0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80038c4:	6808      	ldr	r0, [r1, #0]
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80038c8:	40d8      	lsrs	r0, r3
 80038ca:	4770      	bx	lr
 80038cc:	40023800 	.word	0x40023800
 80038d0:	08006438 	.word	0x08006438
 80038d4:	20000570 	.word	0x20000570

080038d8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d8:	2800      	cmp	r0, #0
 80038da:	d064      	beq.n	80039a6 <HAL_TIM_Base_Init+0xce>
{
 80038dc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80038e2:	4604      	mov	r4, r0
 80038e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d043      	beq.n	8003974 <HAL_TIM_Base_Init+0x9c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ec:	6821      	ldr	r1, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ee:	4a2f      	ldr	r2, [pc, #188]	; (80039ac <HAL_TIM_Base_Init+0xd4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	2302      	movs	r3, #2
 80038f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f6:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 80038f8:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038fa:	d040      	beq.n	800397e <HAL_TIM_Base_Init+0xa6>
 80038fc:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8003900:	d021      	beq.n	8003946 <HAL_TIM_Base_Init+0x6e>
 8003902:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003906:	4291      	cmp	r1, r2
 8003908:	d01d      	beq.n	8003946 <HAL_TIM_Base_Init+0x6e>
 800390a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800390e:	4291      	cmp	r1, r2
 8003910:	d019      	beq.n	8003946 <HAL_TIM_Base_Init+0x6e>
 8003912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003916:	4291      	cmp	r1, r2
 8003918:	d015      	beq.n	8003946 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800391a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800391e:	4291      	cmp	r1, r2
 8003920:	d015      	beq.n	800394e <HAL_TIM_Base_Init+0x76>
 8003922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003926:	4291      	cmp	r1, r2
 8003928:	d011      	beq.n	800394e <HAL_TIM_Base_Init+0x76>
 800392a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800392e:	4291      	cmp	r1, r2
 8003930:	d00d      	beq.n	800394e <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003932:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003934:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003936:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800393c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800393e:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003940:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003942:	628a      	str	r2, [r1, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003944:	e010      	b.n	8003968 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8003946:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800394c:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394e:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003950:	69a2      	ldr	r2, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003952:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003958:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800395a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395e:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8003960:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003962:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003964:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003966:	628a      	str	r2, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003968:	2301      	movs	r3, #1
 800396a:	614b      	str	r3, [r1, #20]
  htim->State = HAL_TIM_STATE_READY;
 800396c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003970:	2000      	movs	r0, #0
}
 8003972:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8003974:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003978:	f7fe fad4 	bl	8001f24 <HAL_TIM_Base_MspInit>
 800397c:	e7b6      	b.n	80038ec <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800397e:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003980:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003982:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003988:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003994:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003996:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003998:	68e3      	ldr	r3, [r4, #12]
 800399a:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800399c:	6863      	ldr	r3, [r4, #4]
 800399e:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80039a0:	6963      	ldr	r3, [r4, #20]
 80039a2:	630b      	str	r3, [r1, #48]	; 0x30
 80039a4:	e7e0      	b.n	8003968 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 80039a6:	2001      	movs	r0, #1
}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40010000 	.word	0x40010000

080039b0 <HAL_TIM_PWM_MspInit>:
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop

080039b4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d064      	beq.n	8003a82 <HAL_TIM_PWM_Init+0xce>
{
 80039b8:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80039ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039be:	4604      	mov	r4, r0
 80039c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d043      	beq.n	8003a50 <HAL_TIM_PWM_Init+0x9c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c8:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039ca:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <HAL_TIM_PWM_Init+0xd4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	2302      	movs	r3, #2
 80039ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d2:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 80039d4:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d6:	d040      	beq.n	8003a5a <HAL_TIM_PWM_Init+0xa6>
 80039d8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80039dc:	d021      	beq.n	8003a22 <HAL_TIM_PWM_Init+0x6e>
 80039de:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80039e2:	4291      	cmp	r1, r2
 80039e4:	d01d      	beq.n	8003a22 <HAL_TIM_PWM_Init+0x6e>
 80039e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039ea:	4291      	cmp	r1, r2
 80039ec:	d019      	beq.n	8003a22 <HAL_TIM_PWM_Init+0x6e>
 80039ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039f2:	4291      	cmp	r1, r2
 80039f4:	d015      	beq.n	8003a22 <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039f6:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80039fa:	4291      	cmp	r1, r2
 80039fc:	d015      	beq.n	8003a2a <HAL_TIM_PWM_Init+0x76>
 80039fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a02:	4291      	cmp	r1, r2
 8003a04:	d011      	beq.n	8003a2a <HAL_TIM_PWM_Init+0x76>
 8003a06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a0a:	4291      	cmp	r1, r2
 8003a0c:	d00d      	beq.n	8003a2a <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a0e:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a10:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003a12:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a18:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003a1a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a1c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a1e:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a20:	e010      	b.n	8003a44 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8003a22:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a28:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2a:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a2c:	69a2      	ldr	r2, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a2e:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a34:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a3a:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8003a3c:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003a3e:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a40:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a42:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003a44:	2301      	movs	r3, #1
 8003a46:	614b      	str	r3, [r1, #20]
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a4c:	2000      	movs	r0, #0
}
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8003a50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003a54:	f7ff ffac 	bl	80039b0 <HAL_TIM_PWM_MspInit>
 8003a58:	e7b6      	b.n	80039c8 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003a5a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a5e:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a64:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a70:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003a72:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a74:	68e3      	ldr	r3, [r4, #12]
 8003a76:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a78:	6863      	ldr	r3, [r4, #4]
 8003a7a:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003a7c:	6963      	ldr	r3, [r4, #20]
 8003a7e:	630b      	str	r3, [r1, #48]	; 0x30
 8003a80:	e7e0      	b.n	8003a44 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 8003a82:	2001      	movs	r0, #1
}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000

08003a8c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8003a8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	f000 80c5 	beq.w	8003c20 <HAL_TIM_PWM_ConfigChannel+0x194>
{
 8003a96:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003a9a:	2401      	movs	r4, #1
 8003a9c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003aa4:	2a0c      	cmp	r2, #12
 8003aa6:	d832      	bhi.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x82>
 8003aa8:	e8df f002 	tbb	[pc, r2]
 8003aac:	31313107 	.word	0x31313107
 8003ab0:	31313165 	.word	0x31313165
 8003ab4:	31313190 	.word	0x31313190
 8003ab8:	39          	.byte	0x39
 8003ab9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aba:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003abc:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003ac2:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ac4:	4e70      	ldr	r6, [pc, #448]	; (8003c88 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac6:	f025 0501 	bic.w	r5, r5, #1
 8003aca:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003acc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003ace:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003ad2:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8003ad4:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ad8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003adc:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8003ade:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8003ae2:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ae6:	f000 809d 	beq.w	8003c24 <HAL_TIM_PWM_ConfigChannel+0x198>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aea:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003aec:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003af0:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003af2:	635d      	str	r5, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af6:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003af8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003afa:	f044 0408 	orr.w	r4, r4, #8
 8003afe:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b00:	6999      	ldr	r1, [r3, #24]
 8003b02:	f021 0104 	bic.w	r1, r1, #4
 8003b06:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	432a      	orrs	r2, r5
 8003b0c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003b0e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003b10:	2201      	movs	r2, #1
 8003b12:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003b16:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003b1a:	4618      	mov	r0, r3
}
 8003b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b1e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b20:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b22:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b24:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b26:	f8df c160 	ldr.w	ip, [pc, #352]	; 8003c88 <HAL_TIM_PWM_ConfigChannel+0x1fc>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b2a:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8003b2e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003b30:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003b32:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003b36:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b3c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b40:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b42:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b46:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4a:	f000 8088 	beq.w	8003c5e <HAL_TIM_PWM_ConfigChannel+0x1d2>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b4e:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003b50:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003b54:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003b56:	641d      	str	r5, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b58:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b5a:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b5c:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b5e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003b62:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b64:	69d9      	ldr	r1, [r3, #28]
 8003b66:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003b6a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003b72:	61da      	str	r2, [r3, #28]
      break;
 8003b74:	e7cb      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b76:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b78:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b7a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b7c:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b7e:	f8df e108 	ldr.w	lr, [pc, #264]	; 8003c88 <HAL_TIM_PWM_ConfigChannel+0x1fc>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b82:	f025 0510 	bic.w	r5, r5, #16
 8003b86:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003b88:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003b8a:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003b8e:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003b90:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b94:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b98:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b9a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b9e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ba2:	d04d      	beq.n	8003c40 <HAL_TIM_PWM_ConfigChannel+0x1b4>
  TIMx->CCR2 = OC_Config->Pulse;
 8003ba4:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003ba6:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003baa:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003bac:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003bae:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bb0:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bb2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bb4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003bb8:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bba:	6999      	ldr	r1, [r3, #24]
 8003bbc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003bc0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003bc8:	619a      	str	r2, [r3, #24]
      break;
 8003bca:	e7a0      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bcc:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bce:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bd0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003bd2:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bd4:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8003c88 <HAL_TIM_PWM_ConfigChannel+0x1fc>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bd8:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8003bdc:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003bde:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003be0:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003be4:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003be6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bea:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bee:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bf0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8003bf4:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bf8:	d037      	beq.n	8003c6a <HAL_TIM_PWM_ConfigChannel+0x1de>
  TIMx->CCR3 = OC_Config->Pulse;
 8003bfa:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003bfc:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003c00:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003c02:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003c04:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c06:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c08:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c0a:	f044 0408 	orr.w	r4, r4, #8
 8003c0e:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c10:	69d9      	ldr	r1, [r3, #28]
 8003c12:	f021 0104 	bic.w	r1, r1, #4
 8003c16:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	432a      	orrs	r2, r5
 8003c1c:	61da      	str	r2, [r3, #28]
      break;
 8003c1e:	e776      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x82>
  __HAL_LOCK(htim);
 8003c20:	2002      	movs	r0, #2
}
 8003c22:	4770      	bx	lr
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c24:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 8003c28:	68cf      	ldr	r7, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c2a:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c2e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8003c32:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c34:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c36:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c3a:	ea45 0c0c 	orr.w	ip, r5, ip
 8003c3e:	e754      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x5e>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c40:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c44:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c4a:	f42c 6c40 	bic.w	ip, ip, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c4e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c52:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c58:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
 8003c5c:	e7a2      	b.n	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x118>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c5e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c60:	f42e 4e80 	bic.w	lr, lr, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c64:	ea4e 1e85 	orr.w	lr, lr, r5, lsl #6
 8003c68:	e771      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0xc2>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c6a:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c6e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c74:	f42c 5c40 	bic.w	ip, ip, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c78:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c7c:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c82:	ea4c 1c05 	orr.w	ip, ip, r5, lsl #4
 8003c86:	e7b8      	b.n	8003bfa <HAL_TIM_PWM_ConfigChannel+0x16e>
 8003c88:	40010000 	.word	0x40010000

08003c8c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003c8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d074      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0xf2>
{
 8003c94:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 8003c96:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8003c98:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8003c9c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003ca6:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8003cac:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8003cb0:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8003cb2:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003cb4:	d065      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0xf6>
 8003cb6:	d831      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0x90>
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d048      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0xc2>
 8003cbc:	d921      	bls.n	8003d02 <HAL_TIM_ConfigClockSource+0x76>
 8003cbe:	2b50      	cmp	r3, #80	; 0x50
 8003cc0:	d116      	bne.n	8003cf0 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc2:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc4:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc6:	684c      	ldr	r4, [r1, #4]
 8003cc8:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cca:	f026 0601 	bic.w	r6, r6, #1
 8003cce:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd0:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cd2:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cda:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003cde:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ce0:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003ce2:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce4:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cea:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cee:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8003cf0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003cf8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003cfc:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003cfe:	4618      	mov	r0, r3
}
 8003d00:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d002      	beq.n	8003d0c <HAL_TIM_ConfigClockSource+0x80>
 8003d06:	d91e      	bls.n	8003d46 <HAL_TIM_ConfigClockSource+0xba>
 8003d08:	2b30      	cmp	r3, #48	; 0x30
 8003d0a:	d1f1      	bne.n	8003cf0 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8003d0c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d12:	430b      	orrs	r3, r1
 8003d14:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003d18:	6093      	str	r3, [r2, #8]
}
 8003d1a:	e7e9      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003d1c:	2b70      	cmp	r3, #112	; 0x70
 8003d1e:	d049      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0x128>
 8003d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d24:	d1e4      	bne.n	8003cf0 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d26:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003d2a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003d2c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d2e:	432b      	orrs	r3, r5
 8003d30:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d34:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d38:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3a:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d3c:	6893      	ldr	r3, [r2, #8]
 8003d3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d42:	6093      	str	r3, [r2, #8]
      break;
 8003d44:	e7d4      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003d46:	f033 0110 	bics.w	r1, r3, #16
 8003d4a:	d1d1      	bne.n	8003cf0 <HAL_TIM_ConfigClockSource+0x64>
 8003d4c:	e7de      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8003d4e:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d50:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d52:	684c      	ldr	r4, [r1, #4]
 8003d54:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d56:	f026 0601 	bic.w	r6, r6, #1
 8003d5a:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5c:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d5e:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d66:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003d6a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003d6c:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003d6e:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003d70:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d76:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003d7a:	6093      	str	r3, [r2, #8]
}
 8003d7c:	e7b8      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8003d7e:	2002      	movs	r0, #2
}
 8003d80:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d82:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d84:	684d      	ldr	r5, [r1, #4]
 8003d86:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d88:	f024 0410 	bic.w	r4, r4, #16
 8003d8c:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8e:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8003d90:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d92:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d9e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003da2:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003da4:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003da6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dac:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003db0:	6093      	str	r3, [r2, #8]
}
 8003db2:	e79d      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003db4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003db8:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003dba:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dbc:	432b      	orrs	r3, r5
 8003dbe:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc2:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dc6:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003dc8:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003dca:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003dd0:	6093      	str	r3, [r2, #8]
      break;
 8003dd2:	e78d      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x64>

08003dd4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003dd4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003dd8:	2a01      	cmp	r2, #1
 8003dda:	d049      	beq.n	8003e70 <HAL_TIM_SlaveConfigSynchro+0x9c>
 8003ddc:	4603      	mov	r3, r0
{
 8003dde:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8003de2:	681c      	ldr	r4, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003de8:	2001      	movs	r0, #1
 8003dea:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003dee:	e9d1 6500 	ldrd	r6, r5, [r1]
  tmpsmcr = htim->Instance->SMCR;
 8003df2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003df4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003df8:	432a      	orrs	r2, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003dfa:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003dfe:	4332      	orrs	r2, r6
  switch (sSlaveConfig->InputTrigger)
 8003e00:	2d60      	cmp	r5, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8003e02:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8003e04:	d04d      	beq.n	8003ea2 <HAL_TIM_SlaveConfigSynchro+0xce>
 8003e06:	d825      	bhi.n	8003e54 <HAL_TIM_SlaveConfigSynchro+0x80>
 8003e08:	2d40      	cmp	r5, #64	; 0x40
 8003e0a:	d033      	beq.n	8003e74 <HAL_TIM_SlaveConfigSynchro+0xa0>
 8003e0c:	2d50      	cmp	r5, #80	; 0x50
 8003e0e:	d110      	bne.n	8003e32 <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpccer = TIMx->CCER;
 8003e10:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e12:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e14:	6888      	ldr	r0, [r1, #8]
 8003e16:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e18:	f026 0601 	bic.w	r6, r6, #1
 8003e1c:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1e:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e20:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e24:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003e28:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e2a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003e2e:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8003e30:	6221      	str	r1, [r4, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e32:	68e2      	ldr	r2, [r4, #12]
 8003e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e38:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e3a:	68e2      	ldr	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 8003e3e:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e44:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003e46:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e4a:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8003e4e:	4608      	mov	r0, r1
}
 8003e50:	bcf0      	pop	{r4, r5, r6, r7}
 8003e52:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8003e54:	2d70      	cmp	r5, #112	; 0x70
 8003e56:	d1ec      	bne.n	8003e32 <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e58:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
 8003e5c:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8003e5e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e60:	432a      	orrs	r2, r5
 8003e62:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e66:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e6a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003e6c:	60a2      	str	r2, [r4, #8]
 8003e6e:	e7e0      	b.n	8003e32 <HAL_TIM_SlaveConfigSynchro+0x5e>
  __HAL_LOCK(htim);
 8003e70:	2002      	movs	r0, #2
}
 8003e72:	4770      	bx	lr
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e74:	2e05      	cmp	r6, #5
 8003e76:	d00d      	beq.n	8003e94 <HAL_TIM_SlaveConfigSynchro+0xc0>
      tmpccer = htim->Instance->CCER;
 8003e78:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e7a:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e7c:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e7e:	f020 0001 	bic.w	r0, r0, #1
 8003e82:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e84:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e8a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003e8e:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8003e90:	6225      	str	r5, [r4, #32]
      break;
 8003e92:	e7ce      	b.n	8003e32 <HAL_TIM_SlaveConfigSynchro+0x5e>
    __HAL_UNLOCK(htim);
 8003e94:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8003e96:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003e9e:	bcf0      	pop	{r4, r5, r6, r7}
 8003ea0:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea2:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ea4:	688d      	ldr	r5, [r1, #8]
 8003ea6:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea8:	f020 0010 	bic.w	r0, r0, #16
 8003eac:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eae:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8003eb0:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eba:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ebe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003ec2:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8003ec4:	6222      	str	r2, [r4, #32]
 8003ec6:	e7b4      	b.n	8003e32 <HAL_TIM_SlaveConfigSynchro+0x5e>

08003ec8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ec8:	4a27      	ldr	r2, [pc, #156]	; (8003f68 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 8003eca:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ecc:	4290      	cmp	r0, r2
{
 8003ece:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed0:	d033      	beq.n	8003f3a <TIM_Base_SetConfig+0x72>
 8003ed2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003ed6:	d01b      	beq.n	8003f10 <TIM_Base_SetConfig+0x48>
 8003ed8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003edc:	4290      	cmp	r0, r2
 8003ede:	d017      	beq.n	8003f10 <TIM_Base_SetConfig+0x48>
 8003ee0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ee4:	4290      	cmp	r0, r2
 8003ee6:	d013      	beq.n	8003f10 <TIM_Base_SetConfig+0x48>
 8003ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003eec:	4290      	cmp	r0, r2
 8003eee:	d00f      	beq.n	8003f10 <TIM_Base_SetConfig+0x48>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ef0:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003ef4:	4290      	cmp	r0, r2
 8003ef6:	d00f      	beq.n	8003f18 <TIM_Base_SetConfig+0x50>
 8003ef8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003efc:	4290      	cmp	r0, r2
 8003efe:	d00b      	beq.n	8003f18 <TIM_Base_SetConfig+0x50>
 8003f00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f04:	4290      	cmp	r0, r2
 8003f06:	d007      	beq.n	8003f18 <TIM_Base_SetConfig+0x50>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f08:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f0a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8003f0c:	680a      	ldr	r2, [r1, #0]
 8003f0e:	e00a      	b.n	8003f26 <TIM_Base_SetConfig+0x5e>
    tmpcr1 |= Structure->CounterMode;
 8003f10:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f16:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f18:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f1a:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1c:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8003f1e:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f24:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f2a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003f2c:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003f2e:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f30:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f32:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003f34:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8003f36:	6143      	str	r3, [r0, #20]
}
 8003f38:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003f3a:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3c:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f3e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f44:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f50:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003f52:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f54:	688b      	ldr	r3, [r1, #8]
 8003f56:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f58:	680b      	ldr	r3, [r1, #0]
 8003f5a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003f5c:	690b      	ldr	r3, [r1, #16]
 8003f5e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003f60:	2301      	movs	r3, #1
}
 8003f62:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8003f64:	6143      	str	r3, [r0, #20]
}
 8003f66:	4770      	bx	lr
 8003f68:	40010000 	.word	0x40010000

08003f6c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f6c:	6a03      	ldr	r3, [r0, #32]
 8003f6e:	f023 0310 	bic.w	r3, r3, #16
 8003f72:	6203      	str	r3, [r0, #32]
{
 8003f74:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8003f76:	6a03      	ldr	r3, [r0, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f78:	4e12      	ldr	r6, [pc, #72]	; (8003fc4 <TIM_OC2_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8003f7a:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003f7c:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f7e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f80:	680c      	ldr	r4, [r1, #0]
  tmpccer &= ~TIM_CCER_CC2P;
 8003f82:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f86:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f8a:	42b0      	cmp	r0, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f90:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f94:	d006      	beq.n	8003fa4 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 8003f96:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003f98:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003f9a:	6182      	str	r2, [r0, #24]
}
 8003f9c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8003f9e:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003fa0:	6203      	str	r3, [r0, #32]
}
 8003fa2:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fa4:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fa8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fae:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fb2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fb6:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fbc:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 8003fc0:	e7e9      	b.n	8003f96 <TIM_OC2_SetConfig+0x2a>
 8003fc2:	bf00      	nop
 8003fc4:	40010000 	.word	0x40010000

08003fc8 <TIM_TI1_SetConfig>:
{
 8003fc8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fca:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fcc:	4e17      	ldr	r6, [pc, #92]	; (800402c <TIM_TI1_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fce:	f024 0401 	bic.w	r4, r4, #1
 8003fd2:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fd4:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8003fd6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003fd8:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fda:	d015      	beq.n	8004008 <TIM_TI1_SetConfig+0x40>
 8003fdc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003fe0:	d012      	beq.n	8004008 <TIM_TI1_SetConfig+0x40>
 8003fe2:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8003fe6:	42b0      	cmp	r0, r6
 8003fe8:	d00e      	beq.n	8004008 <TIM_TI1_SetConfig+0x40>
 8003fea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003fee:	42b0      	cmp	r0, r6
 8003ff0:	d00a      	beq.n	8004008 <TIM_TI1_SetConfig+0x40>
 8003ff2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003ff6:	42b0      	cmp	r0, r6
 8003ff8:	d006      	beq.n	8004008 <TIM_TI1_SetConfig+0x40>
 8003ffa:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 8003ffe:	42b0      	cmp	r0, r6
 8004000:	d002      	beq.n	8004008 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004002:	f044 0201 	orr.w	r2, r4, #1
 8004006:	e002      	b.n	800400e <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004008:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800400c:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800400e:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004010:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004014:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004016:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800401a:	f001 010a 	and.w	r1, r1, #10
 800401e:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004020:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 8004022:	6183      	str	r3, [r0, #24]
}
 8004024:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8004026:	6201      	str	r1, [r0, #32]
}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000

08004030 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop

08004034 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8004034:	2800      	cmp	r0, #0
 8004036:	d055      	beq.n	80040e4 <HAL_TIMEx_HallSensor_Init+0xb0>
{
 8004038:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800403a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800403e:	b088      	sub	sp, #32
 8004040:	460d      	mov	r5, r1
 8004042:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004044:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004048:	2b00      	cmp	r3, #0
 800404a:	d046      	beq.n	80040da <HAL_TIMEx_HallSensor_Init+0xa6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800404c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800404e:	2302      	movs	r3, #2
 8004050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	f851 0b04 	ldr.w	r0, [r1], #4
 8004058:	f7ff ff36 	bl	8003ec8 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800405c:	68ab      	ldr	r3, [r5, #8]
 800405e:	6829      	ldr	r1, [r5, #0]
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	2203      	movs	r2, #3
 8004064:	f7ff ffb0 	bl	8003fc8 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004068:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800406a:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800406c:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800406e:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004070:	f022 020c 	bic.w	r2, r2, #12
 8004074:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004076:	6983      	ldr	r3, [r0, #24]
 8004078:	4333      	orrs	r3, r6
 800407a:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800407c:	6843      	ldr	r3, [r0, #4]
 800407e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004082:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004084:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004086:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408c:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800408e:	6883      	ldr	r3, [r0, #8]
 8004090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004094:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004096:	6883      	ldr	r3, [r0, #8]
 8004098:	f023 0307 	bic.w	r3, r3, #7
 800409c:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800409e:	6883      	ldr	r3, [r0, #8]
 80040a0:	f043 0304 	orr.w	r3, r3, #4
 80040a4:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80040a6:	2500      	movs	r5, #0
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80040a8:	2370      	movs	r3, #112	; 0x70
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80040aa:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80040ac:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040ae:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040b2:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040b6:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80040b8:	f7ff ff58 	bl	8003f6c <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040c4:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80040c6:	685a      	ldr	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	2101      	movs	r1, #1
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80040ca:	f042 0250 	orr.w	r2, r2, #80	; 0x50
  return HAL_OK;
 80040ce:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80040d0:	605a      	str	r2, [r3, #4]
  htim->State = HAL_TIM_STATE_READY;
 80040d2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 80040d6:	b008      	add	sp, #32
 80040d8:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80040da:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80040de:	f7ff ffa7 	bl	8004030 <HAL_TIMEx_HallSensor_MspInit>
 80040e2:	e7b3      	b.n	800404c <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 80040e4:	2001      	movs	r0, #1
}
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d02e      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0x66>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f0:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80040f2:	2202      	movs	r2, #2
{
 80040f4:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80040f6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80040fa:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040fc:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fe:	4d15      	ldr	r5, [pc, #84]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004100:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004104:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004106:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8004108:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 800410a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410c:	d011      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004112:	d00e      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004114:	4a10      	ldr	r2, [pc, #64]	; (8004158 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00b      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800411a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004122:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800412a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800412e:	4293      	cmp	r3, r2
 8004130:	d104      	bne.n	800413c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004132:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004134:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004138:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800413a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800413c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800413e:	2201      	movs	r2, #1
 8004140:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004144:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004148:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800414a:	4618      	mov	r0, r3
}
 800414c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800414e:	2002      	movs	r0, #2
}
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40010000 	.word	0x40010000
 8004158:	40000400 	.word	0x40000400

0800415c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800415c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d022      	beq.n	80041aa <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 8004164:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004166:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800416a:	4604      	mov	r4, r0
 800416c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004170:	e9d1 2000 	ldrd	r2, r0, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004174:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800417a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800417c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004180:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004184:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800418a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800418c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004190:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004192:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004194:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800419a:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 800419c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800419e:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80041a0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 80041a4:	4608      	mov	r0, r1
}
 80041a6:	bc30      	pop	{r4, r5}
 80041a8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80041aa:	2002      	movs	r0, #2
}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop

080041b0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b0:	2800      	cmp	r0, #0
 80041b2:	f000 8098 	beq.w	80042e6 <HAL_UART_Init+0x136>
{
 80041b6:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80041bc:	4604      	mov	r4, r0
 80041be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8087 	beq.w	80042d6 <HAL_UART_Init+0x126>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041c8:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041ca:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 80041cc:	2224      	movs	r2, #36	; 0x24
 80041ce:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80041d2:	68d8      	ldr	r0, [r3, #12]
 80041d4:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041d8:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80041dc:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041de:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041e0:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80041e6:	4329      	orrs	r1, r5
 80041e8:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80041ea:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041ec:	6965      	ldr	r5, [r4, #20]
 80041ee:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 80041f0:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041f4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80041f6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041fa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80041fc:	430a      	orrs	r2, r1
 80041fe:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	69a1      	ldr	r1, [r4, #24]
 8004204:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004208:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800420a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800420e:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004210:	4a36      	ldr	r2, [pc, #216]	; (80042ec <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004212:	d037      	beq.n	8004284 <HAL_UART_Init+0xd4>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004214:	4293      	cmp	r3, r2
 8004216:	d032      	beq.n	800427e <HAL_UART_Init+0xce>
 8004218:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800421c:	4293      	cmp	r3, r2
 800421e:	d02e      	beq.n	800427e <HAL_UART_Init+0xce>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004220:	f7ff fb3a 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004224:	6863      	ldr	r3, [r4, #4]
 8004226:	4e32      	ldr	r6, [pc, #200]	; (80042f0 <HAL_UART_Init+0x140>)
 8004228:	2219      	movs	r2, #25
 800422a:	fba0 0102 	umull	r0, r1, r0, r2
 800422e:	009a      	lsls	r2, r3, #2
 8004230:	0f9b      	lsrs	r3, r3, #30
 8004232:	f7fb ffcf 	bl	80001d4 <__aeabi_uldivmod>
 8004236:	fba6 2500 	umull	r2, r5, r6, r0
 800423a:	096d      	lsrs	r5, r5, #5
 800423c:	2164      	movs	r1, #100	; 0x64
 800423e:	fb01 0215 	mls	r2, r1, r5, r0
 8004242:	0112      	lsls	r2, r2, #4
 8004244:	3232      	adds	r2, #50	; 0x32
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	fba6 1202 	umull	r1, r2, r6, r2
 800424c:	012d      	lsls	r5, r5, #4
 800424e:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 8004252:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800425a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004262:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004264:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004266:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004268:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800426a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800426e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004270:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004272:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004276:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 800427a:	4628      	mov	r0, r5
}
 800427c:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 800427e:	f7ff fb1b 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004282:	e7cf      	b.n	8004224 <HAL_UART_Init+0x74>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004284:	4293      	cmp	r3, r2
 8004286:	d02b      	beq.n	80042e0 <HAL_UART_Init+0x130>
 8004288:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800428c:	4293      	cmp	r3, r2
 800428e:	d027      	beq.n	80042e0 <HAL_UART_Init+0x130>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004290:	f7ff fb02 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004294:	6862      	ldr	r2, [r4, #4]
 8004296:	4e16      	ldr	r6, [pc, #88]	; (80042f0 <HAL_UART_Init+0x140>)
 8004298:	1892      	adds	r2, r2, r2
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	f04f 0119 	mov.w	r1, #25
 80042a2:	415b      	adcs	r3, r3
 80042a4:	fba0 0101 	umull	r0, r1, r0, r1
 80042a8:	f7fb ff94 	bl	80001d4 <__aeabi_uldivmod>
 80042ac:	fba6 2100 	umull	r2, r1, r6, r0
 80042b0:	094d      	lsrs	r5, r1, #5
 80042b2:	2164      	movs	r1, #100	; 0x64
 80042b4:	fb01 0215 	mls	r2, r1, r5, r0
 80042b8:	00d2      	lsls	r2, r2, #3
 80042ba:	3232      	adds	r2, #50	; 0x32
 80042bc:	fba6 1202 	umull	r1, r2, r6, r2
 80042c0:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80042c4:	0912      	lsrs	r2, r2, #4
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80042cc:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80042d0:	440a      	add	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	e7be      	b.n	8004254 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 80042d6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80042da:	f7fd fef3 	bl	80020c4 <HAL_UART_MspInit>
 80042de:	e773      	b.n	80041c8 <HAL_UART_Init+0x18>
      pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7ff faea 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042e4:	e7d6      	b.n	8004294 <HAL_UART_Init+0xe4>
    return HAL_ERROR;
 80042e6:	2001      	movs	r0, #1
}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40011000 	.word	0x40011000
 80042f0:	51eb851f 	.word	0x51eb851f

080042f4 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80042f4:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80042f6:	8840      	ldrh	r0, [r0, #2]
 80042f8:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80042fc:	0c00      	lsrs	r0, r0, #16
 80042fe:	4770      	bx	lr

08004300 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8004300:	b410      	push	{r4}
 8004302:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004304:	8802      	ldrh	r2, [r0, #0]
 8004306:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8004308:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800430c:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8004310:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004314:	42a2      	cmp	r2, r4
{
 8004316:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8004318:	d219      	bcs.n	800434e <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 800431a:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 800431e:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8004322:	b2e4      	uxtb	r4, r4
 8004324:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8004328:	8882      	ldrh	r2, [r0, #4]
 800432a:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800432e:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8004330:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004334:	bfbc      	itt	lt
 8004336:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 800433a:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800433c:	2b00      	cmp	r3, #0
 800433e:	bfbc      	itt	lt
 8004340:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8004344:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004346:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800434a:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 800434e:	b289      	uxth	r1, r1
 8004350:	2000      	movs	r0, #0
 8004352:	b29b      	uxth	r3, r3
 8004354:	f361 000f 	bfi	r0, r1, #0, #16
 8004358:	f363 401f 	bfi	r0, r3, #16, #16
}
 800435c:	b005      	add	sp, #20
 800435e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004362:	4770      	bx	lr

08004364 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8004368:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 800436a:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 800436e:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8004372:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8004376:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 800437a:	4770      	bx	lr

0800437c <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 800437c:	b120      	cbz	r0, 8004388 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800437e:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8004382:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8004384:	9b00      	ldr	r3, [sp, #0]
 8004386:	60c3      	str	r3, [r0, #12]
  }
}
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop

0800438c <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 800438c:	b190      	cbz	r0, 80043b4 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 800438e:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8004390:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8004392:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004394:	b151      	cbz	r1, 80043ac <FCP_CalcCRC+0x20>
 8004396:	1c82      	adds	r2, r0, #2
 8004398:	3901      	subs	r1, #1
 800439a:	fa52 f181 	uxtab	r1, r2, r1
 800439e:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 80043a0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80043a4:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80043a6:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 80043a8:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80043aa:	d1f9      	bne.n	80043a0 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80043ac:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 80043b0:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop

080043b8 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 80043b8:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80043ba:	8ac2      	ldrh	r2, [r0, #22]
                                     pHandle->_Super.bElToMecRatio;
 80043bc:	7844      	ldrb	r4, [r0, #1]
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 80043be:	8a85      	ldrh	r5, [r0, #20]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80043c0:	e9d0 130a 	ldrd	r1, r3, [r0, #40]	; 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80043c4:	fb12 f204 	smulbb	r2, r2, r4
  hMaxReliableElSpeedUnit *= 2u;
 80043c8:	fb15 f504 	smulbb	r5, r5, r4
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80043cc:	b292      	uxth	r2, r2
  hMaxReliableElSpeedUnit *= 2u;
 80043ce:	006d      	lsls	r5, r5, #1

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80043d0:	0c0e      	lsrs	r6, r1, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 80043d2:	2a03      	cmp	r2, #3
  hMaxReliableElSpeedUnit *= 2u;
 80043d4:	b2ad      	uxth	r5, r5
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80043d6:	f8a0 60c2 	strh.w	r6, [r0, #194]	; 0xc2
  if ( hMinReliableElSpeedUnit == 0u )
 80043da:	d968      	bls.n	80044ae <HALL_Init+0xf6>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 80043dc:	0892      	lsrs	r2, r2, #2
 80043de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80043e2:	f242 7410 	movw	r4, #10000	; 0x2710
 80043e6:	0052      	lsls	r2, r2, #1
 80043e8:	fbb4 f2f2 	udiv	r2, r4, r2
 80043ec:	b294      	uxth	r4, r2
 80043ee:	f8a0 40c0 	strh.w	r4, [r0, #192]	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80043f2:	4f30      	ldr	r7, [pc, #192]	; (80044b4 <HALL_Init+0xfc>)
  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80043f4:	4c30      	ldr	r4, [pc, #192]	; (80044b8 <HALL_Init+0x100>)
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 80043f6:	f8a0 50b0 	strh.w	r5, [r0, #176]	; 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80043fa:	fb02 f206 	mul.w	r2, r2, r6
 80043fe:	fba7 6202 	umull	r6, r2, r7, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004402:	fba4 4101 	umull	r4, r1, r4, r1
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8004406:	69c4      	ldr	r4, [r0, #28]
 8004408:	8b46      	ldrh	r6, [r0, #26]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 800440a:	0992      	lsrs	r2, r2, #6
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 800440c:	0889      	lsrs	r1, r1, #2

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 800440e:	eb01 0781 	add.w	r7, r1, r1, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8004412:	fbb1 f1f6 	udiv	r1, r1, r6
 8004416:	fb04 f101 	mul.w	r1, r4, r1
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800441a:	0414      	lsls	r4, r2, #16
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 800441c:	007f      	lsls	r7, r7, #1
                       / hMaxReliableElSpeedUnit);
 800441e:	fbb7 f5f5 	udiv	r5, r7, r5
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8004422:	e9c0 452e 	strd	r4, r5, [r0, #184]	; 0xb8
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8004426:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800442a:	699c      	ldr	r4, [r3, #24]

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 800442c:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004430:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8004434:	f8a0 20ae 	strh.w	r2, [r0, #174]	; 0xae
 8004438:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800443c:	b292      	uxth	r2, r2
 800443e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004442:	fb06 f101 	mul.w	r1, r6, r1
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8004446:	8c85      	ldrh	r5, [r0, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004448:	fbb1 f1f5 	udiv	r1, r1, r5
  pHandle->SensorIsReliable = true;
 800444c:	2501      	movs	r5, #1
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 800444e:	3901      	subs	r1, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8004450:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
  pHandle->SensorIsReliable = true;
 8004454:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
 8004458:	619c      	str	r4, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 800445a:	629a      	str	r2, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800445c:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 800445e:	2100      	movs	r1, #0
 8004460:	432a      	orrs	r2, r5
 8004462:	615a      	str	r2, [r3, #20]
 8004464:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	f042 0204 	orr.w	r2, r2, #4
 800446c:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	f042 0202 	orr.w	r2, r2, #2
 8004474:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	432a      	orrs	r2, r5
 800447a:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 800447c:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	432a      	orrs	r2, r5
 8004482:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	432a      	orrs	r2, r5
 8004488:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 800448a:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 800448e:	b163      	cbz	r3, 80044aa <HALL_Init+0xf2>
 8004490:	3b01      	subs	r3, #1
 8004492:	b2d9      	uxtb	r1, r3
 8004494:	f100 0350 	add.w	r3, r0, #80	; 0x50
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8004498:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800449c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80044a0:	304c      	adds	r0, #76	; 0x4c
 80044a2:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 80044a6:	4298      	cmp	r0, r3
 80044a8:	d1fb      	bne.n	80044a2 <HALL_Init+0xea>
  }
}
 80044aa:	bcf0      	pop	{r4, r5, r6, r7}
 80044ac:	4770      	bx	lr
 80044ae:	2296      	movs	r2, #150	; 0x96
    pHandle->HallTimeout = 150u;
 80044b0:	4614      	mov	r4, r2
 80044b2:	e79c      	b.n	80043ee <HALL_Init+0x36>
 80044b4:	10624dd3 	.word	0x10624dd3
 80044b8:	aaaaaaab 	.word	0xaaaaaaab

080044bc <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80044bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80044be:	68d1      	ldr	r1, [r2, #12]

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 80044c0:	2300      	movs	r3, #0
{
 80044c2:	b430      	push	{r4, r5}
 80044c4:	f021 0102 	bic.w	r1, r1, #2

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 80044c8:	f8b0 50ae 	ldrh.w	r5, [r0, #174]	; 0xae
 80044cc:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 80044ce:	2401      	movs	r4, #1
  pHandle->RatioDec = false;
 80044d0:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->SpeedFIFOIdx = 0u;
 80044d4:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->RatioInc = false;
 80044d8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->_Super.bSpeedErrorNumber = 0;
 80044dc:	7003      	strb	r3, [r0, #0]
  pHandle->FirstCapt = 0u;
 80044de:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->Direction = POSITIVE;
 80044e2:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
  pHandle->BufferFilled = 0u;
 80044e6:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.hMecAccelUnitP = 0;
 80044ea:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 80044ec:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->CompSpeed = 0;
 80044f0:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
  pHandle->SensorIsReliable = true;
 80044f4:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 80044f8:	6295      	str	r5, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 80044fa:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80044fc:	6813      	ldr	r3, [r2, #0]
 80044fe:	4323      	orrs	r3, r4
 8004500:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004502:	68d3      	ldr	r3, [r2, #12]
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 800450a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800450e:	bb03      	cbnz	r3, 8004552 <HALL_Clear+0x96>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004510:	6c03      	ldr	r3, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004512:	6b82      	ldr	r2, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8004514:	6919      	ldr	r1, [r3, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004516:	6c43      	ldr	r3, [r0, #68]	; 0x44
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004518:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800451a:	6915      	ldr	r5, [r2, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800451c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800451e:	438b      	bics	r3, r1
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004520:	bf08      	it	eq
 8004522:	2304      	moveq	r3, #4
 8004524:	6911      	ldr	r1, [r2, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004526:	6b42      	ldr	r2, [r0, #52]	; 0x34
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004528:	bf18      	it	ne
 800452a:	2300      	movne	r3, #0
 800452c:	43ac      	bics	r4, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800452e:	bf0c      	ite	eq
 8004530:	2402      	moveq	r4, #2
 8004532:	2400      	movne	r4, #0
 8004534:	4323      	orrs	r3, r4
 8004536:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004538:	bf08      	it	eq
 800453a:	f043 0301 	orreq.w	r3, r3, #1
 800453e:	1e5a      	subs	r2, r3, #1
 8004540:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 8004544:	2a05      	cmp	r2, #5
 8004546:	d857      	bhi.n	80045f8 <HALL_Clear+0x13c>
 8004548:	e8df f002 	tbb	[pc, r2]
 800454c:	42382e24 	.word	0x42382e24
 8004550:	1a4c      	.short	0x1a4c
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004552:	6b83      	ldr	r3, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004554:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004556:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004558:	6919      	ldr	r1, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 800455a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800455c:	6912      	ldr	r2, [r2, #16]
 800455e:	6925      	ldr	r5, [r4, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004560:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004562:	4393      	bics	r3, r2
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004564:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004566:	bf0c      	ite	eq
 8004568:	2302      	moveq	r3, #2
 800456a:	2300      	movne	r3, #0
 800456c:	43ac      	bics	r4, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800456e:	bf08      	it	eq
 8004570:	f043 0301 	orreq.w	r3, r3, #1
 8004574:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004576:	bf14      	ite	ne
 8004578:	2204      	movne	r2, #4
 800457a:	2200      	moveq	r2, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800457c:	4313      	orrs	r3, r2
 800457e:	e7de      	b.n	800453e <HALL_Clear+0x82>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8004580:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004582:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8004586:	3b3f      	subs	r3, #63	; 0x3f
 8004588:	b21b      	sxth	r3, r3
 800458a:	8083      	strh	r3, [r0, #4]
}
 800458c:	bc30      	pop	{r4, r5}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800458e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8004592:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8004594:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004596:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800459a:	333f      	adds	r3, #63	; 0x3f
 800459c:	b21b      	sxth	r3, r3
}
 800459e:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80045a0:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80045a2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80045a6:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80045a8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80045aa:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 80045ae:	3b2a      	subs	r3, #42	; 0x2a
 80045b0:	b21b      	sxth	r3, r3
}
 80045b2:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80045b4:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80045b6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80045ba:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80045bc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80045be:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 80045c2:	332a      	adds	r3, #42	; 0x2a
 80045c4:	b21b      	sxth	r3, r3
}
 80045c6:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80045c8:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80045ca:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80045ce:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 80045d0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80045d2:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 80045d6:	3b15      	subs	r3, #21
 80045d8:	b21b      	sxth	r3, r3
}
 80045da:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 80045dc:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80045de:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80045e2:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80045e4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80045e6:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 80045ea:	3315      	adds	r3, #21
 80045ec:	b21b      	sxth	r3, r3
}
 80045ee:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80045f0:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80045f2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80045f6:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 80045f8:	2200      	movs	r2, #0
 80045fa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80045fe:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 8004602:	e7c3      	b.n	800458c <HALL_Clear+0xd0>

08004604 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8004604:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8004608:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800460c:	429a      	cmp	r2, r3
 800460e:	d013      	beq.n	8004638 <HALL_CalcElAngle+0x34>
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8004610:	8883      	ldrh	r3, [r0, #4]
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8004612:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
{
 8004616:	b410      	push	{r4}
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8004618:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800461c:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8004620:	b292      	uxth	r2, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8004622:	4413      	add	r3, r2
 8004624:	4423      	add	r3, r4
 8004626:	b21b      	sxth	r3, r3
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8004628:	440a      	add	r2, r1
 800462a:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800462e:	8083      	strh	r3, [r0, #4]
}
 8004630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004634:	4618      	mov	r0, r3
 8004636:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8004638:	8883      	ldrh	r3, [r0, #4]
 800463a:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 800463e:	4413      	add	r3, r2
 8004640:	b21b      	sxth	r3, r3
 8004642:	8083      	strh	r3, [r0, #4]
}
 8004644:	4618      	mov	r0, r3
 8004646:	4770      	bx	lr

08004648 <HALL_CalcAvrgMecSpeedUnit>:
{
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 800464c:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 8004650:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 8004652:	b180      	cbz	r0, 8004676 <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004654:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8004656:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	429a      	cmp	r2, r3
 800465e:	d811      	bhi.n	8004684 <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 8004664:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 8004666:	4629      	mov	r1, r5
 8004668:	4620      	mov	r0, r4
 800466a:	f001 fa71 	bl	8005b50 <SPD_IsMecSpeedReliable>
 800466e:	f9b5 3000 	ldrsh.w	r3, [r5]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8004672:	81a3      	strh	r3, [r4, #12]
}
 8004674:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8004676:	78e3      	ldrb	r3, [r4, #3]
 8004678:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 800467a:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 800467c:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 800467e:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8004680:	81a3      	strh	r3, [r4, #12]
}
 8004682:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8004684:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8004688:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 800468a:	b31b      	cbz	r3, 80046d4 <HALL_CalcAvrgMecSpeedUnit+0x8c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 800468c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004690:	4293      	cmp	r3, r2
 8004692:	d01d      	beq.n	80046d0 <HALL_CalcAvrgMecSpeedUnit+0x88>
          if (pHandle->HallMtpa == true)
 8004694:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 8004698:	b9f2      	cbnz	r2, 80046d8 <HALL_CalcAvrgMecSpeedUnit+0x90>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 800469a:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
 800469e:	88a0      	ldrh	r0, [r4, #4]
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 80046a0:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80046a4:	1a12      	subs	r2, r2, r0
 80046a6:	b212      	sxth	r2, r2
 80046a8:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
 80046ac:	fb92 f2f1 	sdiv	r2, r2, r1
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80046b0:	8b60      	ldrh	r0, [r4, #26]
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80046b2:	7861      	ldrb	r1, [r4, #1]
 80046b4:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80046b8:	fb03 f300 	mul.w	r3, r3, r0
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80046bc:	69e2      	ldr	r2, [r4, #28]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80046be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046c2:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80046c4:	fb02 f201 	mul.w	r2, r2, r1
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80046c8:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80046cc:	802b      	strh	r3, [r5, #0]
 80046ce:	e7ca      	b.n	8004666 <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 80046d0:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 80046d4:	802b      	strh	r3, [r5, #0]
 80046d6:	e7c6      	b.n	8004666 <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 80046d8:	2200      	movs	r2, #0
 80046da:	e7e9      	b.n	80046b0 <HALL_CalcAvrgMecSpeedUnit+0x68>

080046dc <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 80046dc:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d029      	beq.n	8004738 <HALL_TIMx_CC_IRQHandler+0x5c>
{
 80046e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80046e6:	f890 3020 	ldrb.w	r3, [r0, #32]
    bPrevHallState = pHandle->HallState;
 80046ea:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 80046ee:	f990 50a2 	ldrsb.w	r5, [r0, #162]	; 0xa2
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80046f2:	b31b      	cbz	r3, 800473c <HALL_TIMx_CC_IRQHandler+0x60>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80046f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80046f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80046f8:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80046fa:	691c      	ldr	r4, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80046fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80046fe:	6912      	ldr	r2, [r2, #16]
 8004700:	6937      	ldr	r7, [r6, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8004702:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8004704:	4393      	bics	r3, r2
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8004706:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8004708:	bf0c      	ite	eq
 800470a:	2302      	moveq	r3, #2
 800470c:	2300      	movne	r3, #0
 800470e:	43be      	bics	r6, r7
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8004710:	bf08      	it	eq
 8004712:	f043 0301 	orreq.w	r3, r3, #1
 8004716:	43a2      	bics	r2, r4
 8004718:	bf14      	ite	ne
 800471a:	2204      	movne	r2, #4
 800471c:	2200      	moveq	r2, #0
 800471e:	4313      	orrs	r3, r2
 8004720:	1e5a      	subs	r2, r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004722:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004724:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch ( pHandle->HallState )
 8004728:	2a05      	cmp	r2, #5
 800472a:	f200 8166 	bhi.w	80049fa <HALL_TIMx_CC_IRQHandler+0x31e>
 800472e:	e8df f002 	tbb	[pc, r2]
 8004732:	6373      	.short	0x6373
 8004734:	1c364653 	.word	0x1c364653
}
 8004738:	2000      	movs	r0, #0
 800473a:	4770      	bx	lr
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 800473c:	6c03      	ldr	r3, [r0, #64]	; 0x40
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 800473e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004740:	691f      	ldr	r7, [r3, #16]
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004742:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004744:	6916      	ldr	r6, [r2, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8004746:	6b04      	ldr	r4, [r0, #48]	; 0x30
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8004748:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800474a:	6924      	ldr	r4, [r4, #16]
 800474c:	43bb      	bics	r3, r7
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 800474e:	bf0c      	ite	eq
 8004750:	2304      	moveq	r3, #4
 8004752:	2300      	movne	r3, #0
 8004754:	43b2      	bics	r2, r6
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8004756:	6b42      	ldr	r2, [r0, #52]	; 0x34
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8004758:	bf0c      	ite	eq
 800475a:	2602      	moveq	r6, #2
 800475c:	2600      	movne	r6, #0
 800475e:	4333      	orrs	r3, r6
 8004760:	43a2      	bics	r2, r4
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8004762:	bf08      	it	eq
 8004764:	f043 0301 	orreq.w	r3, r3, #1
 8004768:	e7da      	b.n	8004720 <HALL_TIMx_CC_IRQHandler+0x44>
        if ( bPrevHallState == STATE_2 )
 800476a:	2902      	cmp	r1, #2
 800476c:	d07f      	beq.n	800486e <HALL_TIMx_CC_IRQHandler+0x192>
        else if ( bPrevHallState == STATE_4 )
 800476e:	2904      	cmp	r1, #4
 8004770:	f000 80a1 	beq.w	80048b6 <HALL_TIMx_CC_IRQHandler+0x1da>
    PrevDirection = pHandle->Direction;
 8004774:	4629      	mov	r1, r5
    if (pHandle->HallMtpa == true)
 8004776:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 800477a:	b113      	cbz	r3, 8004782 <HALL_TIMx_CC_IRQHandler+0xa6>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 800477c:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
 8004780:	8083      	strh	r3, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 8004782:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8004786:	2b00      	cmp	r3, #0
 8004788:	f040 80a1 	bne.w	80048ce <HALL_TIMx_CC_IRQHandler+0x1f2>
      pHandle->FirstCapt++;
 800478c:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8004790:	3301      	adds	r3, #1
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8004798:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800479a:	2000      	movs	r0, #0
 800479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( bPrevHallState == STATE_4 )
 800479e:	2904      	cmp	r1, #4
 80047a0:	d06f      	beq.n	8004882 <HALL_TIMx_CC_IRQHandler+0x1a6>
        else if ( bPrevHallState == STATE_1 )
 80047a2:	2901      	cmp	r1, #1
 80047a4:	d1e6      	bne.n	8004774 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 80047a6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80047a8:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 80047ac:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 80047ae:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 80047b0:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80047b4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 80047b8:	f04f 31ff 	mov.w	r1, #4294967295
 80047bc:	e045      	b.n	800484a <HALL_TIMx_CC_IRQHandler+0x16e>
        if ( bPrevHallState == STATE_6 )
 80047be:	2906      	cmp	r1, #6
 80047c0:	d06f      	beq.n	80048a2 <HALL_TIMx_CC_IRQHandler+0x1c6>
        else if ( bPrevHallState == STATE_5 )
 80047c2:	2905      	cmp	r1, #5
 80047c4:	d1d6      	bne.n	8004774 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 80047c6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80047c8:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80047cc:	22ff      	movs	r2, #255	; 0xff
 80047ce:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 80047d2:	f04f 31ff 	mov.w	r1, #4294967295
 80047d6:	e038      	b.n	800484a <HALL_TIMx_CC_IRQHandler+0x16e>
        if ( bPrevHallState == STATE_1 )
 80047d8:	2901      	cmp	r1, #1
 80047da:	d059      	beq.n	8004890 <HALL_TIMx_CC_IRQHandler+0x1b4>
        else if ( bPrevHallState == STATE_2 )
 80047dc:	2902      	cmp	r1, #2
 80047de:	d1c9      	bne.n	8004774 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80047e0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80047e2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80047e6:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 80047e8:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80047ea:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80047ee:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80047f2:	f04f 31ff 	mov.w	r1, #4294967295
 80047f6:	e028      	b.n	800484a <HALL_TIMx_CC_IRQHandler+0x16e>
        if ( bPrevHallState == STATE_3 )
 80047f8:	2903      	cmp	r1, #3
 80047fa:	d02e      	beq.n	800485a <HALL_TIMx_CC_IRQHandler+0x17e>
        else if ( bPrevHallState == STATE_6 )
 80047fc:	2906      	cmp	r1, #6
 80047fe:	d1b9      	bne.n	8004774 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004800:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004802:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8004806:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8004808:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800480a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800480e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004812:	f04f 31ff 	mov.w	r1, #4294967295
 8004816:	e018      	b.n	800484a <HALL_TIMx_CC_IRQHandler+0x16e>
        if ( bPrevHallState == STATE_5 )
 8004818:	2905      	cmp	r1, #5
 800481a:	d00d      	beq.n	8004838 <HALL_TIMx_CC_IRQHandler+0x15c>
        else if ( bPrevHallState == STATE_3 )
 800481c:	2903      	cmp	r1, #3
 800481e:	d1a9      	bne.n	8004774 <HALL_TIMx_CC_IRQHandler+0x98>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004820:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004822:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 8004826:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8004828:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800482a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800482e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004832:	f04f 31ff 	mov.w	r1, #4294967295
 8004836:	e008      	b.n	800484a <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004838:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800483a:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 800483e:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8004840:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8004842:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8004846:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    if (pHandle->Direction != PrevDirection)
 800484a:	428d      	cmp	r5, r1
 800484c:	d093      	beq.n	8004776 <HALL_TIMx_CC_IRQHandler+0x9a>
      pHandle->BufferFilled = 0 ;
 800484e:	2300      	movs	r3, #0
 8004850:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8004854:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 8004858:	e78d      	b.n	8004776 <HALL_TIMx_CC_IRQHandler+0x9a>
                                                  + S16_60_PHASE_SHIFT );
 800485a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800485c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8004860:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 8004862:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8004864:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8004868:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 800486c:	e7ed      	b.n	800484a <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800486e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004870:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8004874:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = POSITIVE;
 8004876:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004878:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 800487c:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8004880:	e7e3      	b.n	800484a <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8004882:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004884:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 8004888:	2101      	movs	r1, #1
 800488a:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 800488e:	e7dc      	b.n	800484a <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004890:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 8004892:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8004896:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 800489a:	3355      	adds	r3, #85	; 0x55
 800489c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 80048a0:	e7d3      	b.n	800484a <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80048a2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80048a4:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 80048a8:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 80048aa:	2101      	movs	r1, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80048ac:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 80048b0:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80048b4:	e7c9      	b.n	800484a <HALL_TIMx_CC_IRQHandler+0x16e>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80048b6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80048b8:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 80048bc:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 80048be:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80048c0:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80048c4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80048c8:	f04f 31ff 	mov.w	r1, #4294967295
 80048cc:	e7bd      	b.n	800484a <HALL_TIMx_CC_IRQHandler+0x16e>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80048ce:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 80048d2:	f890 5026 	ldrb.w	r5, [r0, #38]	; 0x26
 80048d6:	42ab      	cmp	r3, r5
 80048d8:	d205      	bcs.n	80048e6 <HALL_TIMx_CC_IRQHandler+0x20a>
        pHandle->BufferFilled++;
 80048da:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 80048de:	3301      	adds	r3, #1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
 80048e6:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 80048ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80048ec:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 80048f0:	f890 704e 	ldrb.w	r7, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80048f4:	041b      	lsls	r3, r3, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 80048f6:	b292      	uxth	r2, r2
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 80048f8:	fa13 f68c 	uxtah	r6, r3, ip
      if ( pHandle->OVFCounter != 0u )
 80048fc:	f007 0eff 	and.w	lr, r7, #255	; 0xff
 8004900:	2f00      	cmp	r7, #0
 8004902:	d043      	beq.n	800498c <HALL_TIMx_CC_IRQHandler+0x2b0>
        hAux = hPrscBuf + 1u;
 8004904:	3201      	adds	r2, #1
        if ( pHandle->RatioInc )
 8004906:	f890 704b 	ldrb.w	r7, [r0, #75]	; 0x4b
        wCaptBuf *= hAux;
 800490a:	b293      	uxth	r3, r2
 800490c:	fb06 f303 	mul.w	r3, r6, r3
        if ( pHandle->RatioInc )
 8004910:	2f00      	cmp	r7, #0
 8004912:	d045      	beq.n	80049a0 <HALL_TIMx_CC_IRQHandler+0x2c4>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8004914:	2200      	movs	r2, #0
 8004916:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 800491a:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 800491e:	429a      	cmp	r2, r3
 8004920:	d82f      	bhi.n	8004982 <HALL_TIMx_CC_IRQHandler+0x2a6>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004922:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8004926:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800492a:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 800492e:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8004932:	429e      	cmp	r6, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004934:	f8dc 7050 	ldr.w	r7, [ip, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8004938:	bf88      	it	hi
 800493a:	fb01 f603 	mulhi.w	r6, r1, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800493e:	eba4 0407 	sub.w	r4, r4, r7
          pHandle->SpeedFIFOIdx++;
 8004942:	f102 0201 	add.w	r2, r2, #1
 8004946:	b2d2      	uxtb	r2, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8004948:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800494c:	bf8a      	itet	hi
 800494e:	19a4      	addhi	r4, r4, r6
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 8004950:	434e      	mulls	r6, r1
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8004952:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 8004956:	4295      	cmp	r5, r2
 8004958:	f8cc 6050 	str.w	r6, [ip, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 800495c:	bf08      	it	eq
 800495e:	2200      	moveq	r2, #0
 8004960:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 8004964:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
 8004968:	b332      	cbz	r2, 80049b8 <HALL_TIMx_CC_IRQHandler+0x2dc>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800496a:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 800496e:	4295      	cmp	r5, r2
 8004970:	d938      	bls.n	80049e4 <HALL_TIMx_CC_IRQHandler+0x308>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8004972:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 8004976:	fbb2 f3f3 	udiv	r3, r2, r3
 800497a:	fb13 f101 	smulbb	r1, r3, r1
 800497e:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 8004982:	2300      	movs	r3, #0
 8004984:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 8004988:	2000      	movs	r0, #0
 800498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 800498c:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 8004990:	b1ab      	cbz	r3, 80049be <HALL_TIMx_CC_IRQHandler+0x2e2>
          hAux = hPrscBuf + 2u;
 8004992:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 8004994:	b292      	uxth	r2, r2
 8004996:	fb06 f302 	mul.w	r3, r6, r2
          pHandle->RatioDec = false;
 800499a:	f880 e04a 	strb.w	lr, [r0, #74]	; 0x4a
 800499e:	e7bc      	b.n	800491a <HALL_TIMx_CC_IRQHandler+0x23e>
 80049a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 80049a2:	f8b0 60ae 	ldrh.w	r6, [r0, #174]	; 0xae
 80049a6:	4296      	cmp	r6, r2
 80049a8:	d9b7      	bls.n	800491a <HALL_TIMx_CC_IRQHandler+0x23e>
 80049aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 80049ac:	2601      	movs	r6, #1
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 80049ae:	3201      	adds	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 80049b0:	62a2      	str	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 80049b2:	f880 604b 	strb.w	r6, [r0, #75]	; 0x4b
 80049b6:	e7b0      	b.n	800491a <HALL_TIMx_CC_IRQHandler+0x23e>
            pHandle->AvrElSpeedDpp = 0;
 80049b8:	f8a0 20a4 	strh.w	r2, [r0, #164]	; 0xa4
 80049bc:	e7e1      	b.n	8004982 <HALL_TIMx_CC_IRQHandler+0x2a6>
          uint16_t hAux = hPrscBuf + 1u;
 80049be:	3201      	adds	r2, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 80049c0:	fa1f fc8c 	uxth.w	ip, ip
          wCaptBuf *= hAux;
 80049c4:	b292      	uxth	r2, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 80049c6:	f5bc 4faa 	cmp.w	ip, #21760	; 0x5500
          wCaptBuf *= hAux;
 80049ca:	fb06 f302 	mul.w	r3, r6, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 80049ce:	d2a4      	bcs.n	800491a <HALL_TIMx_CC_IRQHandler+0x23e>
  return (uint32_t)(READ_REG(TIMx->PSC));
 80049d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	d0a1      	beq.n	800491a <HALL_TIMx_CC_IRQHandler+0x23e>
 80049d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 80049d8:	2601      	movs	r6, #1
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 80049da:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 80049dc:	62a2      	str	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 80049de:	f880 604a 	strb.w	r6, [r0, #74]	; 0x4a
 80049e2:	e79a      	b.n	800491a <HALL_TIMx_CC_IRQHandler+0x23e>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 80049e4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 80049e8:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 80049ec:	fb92 f5f5 	sdiv	r5, r2, r5
 80049f0:	fb93 f3f5 	sdiv	r3, r3, r5
 80049f4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80049f8:	e7c3      	b.n	8004982 <HALL_TIMx_CC_IRQHandler+0x2a6>
        pHandle->SensorIsReliable = false;
 80049fa:	2300      	movs	r3, #0
 80049fc:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 8004a00:	e6b8      	b.n	8004774 <HALL_TIMx_CC_IRQHandler+0x98>
 8004a02:	bf00      	nop

08004a04 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8004a04:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8004a08:	b1e3      	cbz	r3, 8004a44 <HALL_TIMx_UP_IRQHandler+0x40>
{
 8004a0a:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 8004a0c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8004a10:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8004a12:	f8b0 40c0 	ldrh.w	r4, [r0, #192]	; 0xc0
 8004a16:	f8b0 30c2 	ldrh.w	r3, [r0, #194]	; 0xc2
    pHandle->OVFCounter++;
 8004a1a:	3201      	adds	r2, #1
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 8004a22:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8004a24:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8004a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a2c:	fb05 2202 	mla	r2, r5, r2, r2
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8004a30:	fb03 f304 	mul.w	r3, r3, r4
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8004a34:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	4299      	cmp	r1, r3
 8004a3c:	d204      	bcs.n	8004a48 <HALL_TIMx_UP_IRQHandler+0x44>
}
 8004a3e:	2000      	movs	r0, #0
 8004a40:	bc30      	pop	{r4, r5}
 8004a42:	4770      	bx	lr
 8004a44:	2000      	movs	r0, #0
 8004a46:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004a48:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	81c2      	strh	r2, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8004a50:	bb03      	cbnz	r3, 8004a94 <HALL_TIMx_UP_IRQHandler+0x90>
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004a52:	6c03      	ldr	r3, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004a54:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004a56:	6919      	ldr	r1, [r3, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004a58:	6c43      	ldr	r3, [r0, #68]	; 0x44
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004a5a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004a5c:	6915      	ldr	r5, [r2, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004a5e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004a60:	438b      	bics	r3, r1
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004a62:	bf08      	it	eq
 8004a64:	2304      	moveq	r3, #4
 8004a66:	6911      	ldr	r1, [r2, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004a68:	6b42      	ldr	r2, [r0, #52]	; 0x34
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8004a6a:	bf18      	it	ne
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	43ac      	bics	r4, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8004a70:	bf0c      	ite	eq
 8004a72:	2402      	moveq	r4, #2
 8004a74:	2400      	movne	r4, #0
 8004a76:	4323      	orrs	r3, r4
 8004a78:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004a7a:	bf08      	it	eq
 8004a7c:	f043 0301 	orreq.w	r3, r3, #1
 8004a80:	1e5a      	subs	r2, r3, #1
 8004a82:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
  switch ( pHandle->HallState )
 8004a86:	2a05      	cmp	r2, #5
 8004a88:	d86a      	bhi.n	8004b60 <HALL_TIMx_UP_IRQHandler+0x15c>
 8004a8a:	e8df f002 	tbb	[pc, r2]
 8004a8e:	5b62      	.short	0x5b62
 8004a90:	1a464d54 	.word	0x1a464d54
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004a94:	6b83      	ldr	r3, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004a96:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004a98:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004a9a:	6919      	ldr	r1, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004a9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004a9e:	6912      	ldr	r2, [r2, #16]
 8004aa0:	6925      	ldr	r5, [r4, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004aa2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004aa4:	4393      	bics	r3, r2
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004aa6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8004aa8:	bf0c      	ite	eq
 8004aaa:	2302      	moveq	r3, #2
 8004aac:	2300      	movne	r3, #0
 8004aae:	43ac      	bics	r4, r5
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004ab0:	bf08      	it	eq
 8004ab2:	f043 0301 	orreq.w	r3, r3, #1
 8004ab6:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8004ab8:	bf14      	ite	ne
 8004aba:	2204      	movne	r2, #4
 8004abc:	2200      	moveq	r2, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	e7de      	b.n	8004a80 <HALL_TIMx_UP_IRQHandler+0x7c>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8004ac2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004ac4:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8004ac8:	3b3f      	subs	r3, #63	; 0x3f
 8004aca:	b21b      	sxth	r3, r3
 8004acc:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004ace:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8004ad2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0u;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0u;
 8004adc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004ae0:	b17c      	cbz	r4, 8004b02 <HALL_TIMx_UP_IRQHandler+0xfe>
 8004ae2:	1e62      	subs	r2, r4, #1
 8004ae4:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8004ae6:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 8004aea:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8004aee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004af2:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8004af6:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d1fb      	bne.n	8004af6 <HALL_TIMx_UP_IRQHandler+0xf2>
 8004afe:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 8004b02:	2300      	movs	r3, #0
 8004b04:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8004b08:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8004b0c:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8004b10:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 8004b14:	bc30      	pop	{r4, r5}
 8004b16:	2000      	movs	r0, #0
 8004b18:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8004b1a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004b1c:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8004b20:	3315      	adds	r3, #21
 8004b22:	b21b      	sxth	r3, r3
 8004b24:	8083      	strh	r3, [r0, #4]
      break;
 8004b26:	e7d2      	b.n	8004ace <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8004b28:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004b2a:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8004b2e:	3b15      	subs	r3, #21
 8004b30:	b21b      	sxth	r3, r3
 8004b32:	8083      	strh	r3, [r0, #4]
      break;
 8004b34:	e7cb      	b.n	8004ace <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8004b36:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004b38:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8004b3c:	332a      	adds	r3, #42	; 0x2a
 8004b3e:	b21b      	sxth	r3, r3
 8004b40:	8083      	strh	r3, [r0, #4]
      break;
 8004b42:	e7c4      	b.n	8004ace <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8004b44:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004b46:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8004b4a:	3b2a      	subs	r3, #42	; 0x2a
 8004b4c:	b21b      	sxth	r3, r3
 8004b4e:	8083      	strh	r3, [r0, #4]
      break;
 8004b50:	e7bd      	b.n	8004ace <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8004b52:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8004b54:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8004b58:	333f      	adds	r3, #63	; 0x3f
 8004b5a:	b21b      	sxth	r3, r3
 8004b5c:	8083      	strh	r3, [r0, #4]
      break;
 8004b5e:	e7b6      	b.n	8004ace <HALL_TIMx_UP_IRQHandler+0xca>
      pHandle->SensorIsReliable = false;
 8004b60:	2200      	movs	r2, #0
 8004b62:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8004b66:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 8004b6a:	e7b0      	b.n	8004ace <HALL_TIMx_UP_IRQHandler+0xca>

08004b6c <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8004b6c:	b510      	push	{r4, lr}
 8004b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b72:	4604      	mov	r4, r0
 8004b74:	2100      	movs	r1, #0
 8004b76:	f001 fafb 	bl	8006170 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8004b80:	bd10      	pop	{r4, pc}
 8004b82:	bf00      	nop

08004b84 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004b84:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8004b88:	1c53      	adds	r3, r2, #1
 8004b8a:	b29b      	uxth	r3, r3
{
 8004b8c:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8004b8e:	2b7f      	cmp	r3, #127	; 0x7f
{
 8004b90:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8004b92:	bf88      	it	hi
 8004b94:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004b96:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8004b9a:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8004b9c:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8004ba0:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004ba4:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8004ba8:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8004baa:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004bac:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004bb0:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004bb2:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004bb4:	d1fa      	bne.n	8004bac <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8004bb6:	2a00      	cmp	r2, #0
 8004bb8:	bfb8      	it	lt
 8004bba:	327f      	addlt	r2, #127	; 0x7f
 8004bbc:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8004bbe:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8004bc2:	bc70      	pop	{r4, r5, r6}
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop

08004bc8 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8004bc8:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop

08004bd0 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8004bd0:	8a03      	ldrh	r3, [r0, #16]
 8004bd2:	8b42      	ldrh	r2, [r0, #26]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d306      	bcc.n	8004be6 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8004bd8:	8b82      	ldrh	r2, [r0, #28]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d901      	bls.n	8004be2 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8004bde:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8004be0:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8004be2:	8ac0      	ldrh	r0, [r0, #22]
 8004be4:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8004be6:	2008      	movs	r0, #8
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop

08004bec <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8004bec:	2300      	movs	r3, #0
 8004bee:	8203      	strh	r3, [r0, #16]
}
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop

08004bf4 <NTC_Init>:
{
 8004bf4:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004bf6:	7803      	ldrb	r3, [r0, #0]
{
 8004bf8:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004bfa:	b123      	cbz	r3, 8004c06 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004bfc:	8a43      	ldrh	r3, [r0, #18]
 8004bfe:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8004c00:	2200      	movs	r2, #0
 8004c02:	82c2      	strh	r2, [r0, #22]
}
 8004c04:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8004c06:	3004      	adds	r0, #4
 8004c08:	f7fc fff0 	bl	8001bec <RCM_RegisterRegConv>
 8004c0c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8004c10:	4620      	mov	r0, r4
 8004c12:	f7ff ffeb 	bl	8004bec <NTC_Clear>
}
 8004c16:	bd10      	pop	{r4, pc}

08004c18 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8004c18:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004c1a:	7803      	ldrb	r3, [r0, #0]
{
 8004c1c:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004c1e:	b113      	cbz	r3, 8004c26 <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8004c20:	2000      	movs	r0, #0
 8004c22:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8004c24:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8004c26:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8004c2a:	f7fd f8b1 	bl	8001d90 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8004c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c32:	4298      	cmp	r0, r3
 8004c34:	d007      	beq.n	8004c46 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004c36:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8004c38:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8004c3a:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8004c3c:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8004c40:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8004c44:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8004c46:	4620      	mov	r0, r4
 8004c48:	f7ff ffc2 	bl	8004bd0 <NTC_SetFaultState>
 8004c4c:	82e0      	strh	r0, [r4, #22]
}
 8004c4e:	bd10      	pop	{r4, pc}

08004c50 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004c50:	7803      	ldrb	r3, [r0, #0]
 8004c52:	b983      	cbnz	r3, 8004c76 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8004c54:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004c56:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8004c58:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004c5c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004c5e:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8004c60:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bfbc      	itt	lt
 8004c68:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8004c6c:	33ff      	addlt	r3, #255	; 0xff
 8004c6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8004c72:	b200      	sxth	r0, r0
 8004c74:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8004c76:	8a80      	ldrh	r0, [r0, #20]
}
 8004c78:	b200      	sxth	r0, r0
 8004c7a:	4770      	bx	lr

08004c7c <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8004c7c:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004c7e:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004c80:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004c82:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004c84:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8004c86:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8004c88:	6283      	str	r3, [r0, #40]	; 0x28
}
 8004c8a:	4770      	bx	lr

08004c8c <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8004c8c:	8081      	strh	r1, [r0, #4]
}
 8004c8e:	4770      	bx	lr

08004c90 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8004c90:	80c1      	strh	r1, [r0, #6]
}
 8004c92:	4770      	bx	lr

08004c94 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8004c94:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop

08004c9c <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8004c9c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop

08004ca4 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8004ca4:	6081      	str	r1, [r0, #8]

  return;
}
 8004ca6:	4770      	bx	lr

08004ca8 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8004ca8:	8b00      	ldrh	r0, [r0, #24]
 8004caa:	4770      	bx	lr

08004cac <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8004cac:	8b40      	ldrh	r0, [r0, #26]
 8004cae:	4770      	bx	lr

08004cb0 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8004cb0:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8004cb2:	4770      	bx	lr

08004cb4 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8004cb4:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop

08004cbc <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004cbc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8004cc0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8004cc4:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004cc6:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004cca:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004cce:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8004cd2:	b162      	cbz	r2, 8004cee <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8004cd4:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8004cd6:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 8004cda:	1872      	adds	r2, r6, r1
 8004cdc:	d420      	bmi.n	8004d20 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8004cde:	2e00      	cmp	r6, #0
 8004ce0:	db29      	blt.n	8004d36 <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004ce2:	68c1      	ldr	r1, [r0, #12]
 8004ce4:	4291      	cmp	r1, r2
 8004ce6:	db03      	blt.n	8004cf0 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8004ce8:	6901      	ldr	r1, [r0, #16]
 8004cea:	4291      	cmp	r1, r2
 8004cec:	dc00      	bgt.n	8004cf0 <PI_Controller+0x34>
 8004cee:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8004cf0:	8b86      	ldrh	r6, [r0, #28]
 8004cf2:	8bc2      	ldrh	r2, [r0, #30]
 8004cf4:	4133      	asrs	r3, r6
 8004cf6:	fa41 f202 	asr.w	r2, r1, r2
 8004cfa:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8004cfc:	429c      	cmp	r4, r3
 8004cfe:	da05      	bge.n	8004d0c <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8004d00:	1ae3      	subs	r3, r4, r3
 8004d02:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8004d04:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8004d06:	4620      	mov	r0, r4
 8004d08:	bc70      	pop	{r4, r5, r6}
 8004d0a:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8004d0c:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8004d0e:	bfc9      	itett	gt
 8004d10:	1aeb      	subgt	r3, r5, r3
 8004d12:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8004d14:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 8004d16:	18c9      	addgt	r1, r1, r3
 8004d18:	6081      	str	r1, [r0, #8]
}
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	bc70      	pop	{r4, r5, r6}
 8004d1e:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8004d20:	2e00      	cmp	r6, #0
 8004d22:	ddde      	ble.n	8004ce2 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8004d24:	2900      	cmp	r1, #0
 8004d26:	dddc      	ble.n	8004ce2 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004d28:	68c1      	ldr	r1, [r0, #12]
 8004d2a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004d2e:	4291      	cmp	r1, r2
 8004d30:	d1de      	bne.n	8004cf0 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 8004d32:	460a      	mov	r2, r1
 8004d34:	e7db      	b.n	8004cee <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8004d36:	4e03      	ldr	r6, [pc, #12]	; (8004d44 <PI_Controller+0x88>)
 8004d38:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8004d3c:	bf28      	it	cs
 8004d3e:	4632      	movcs	r2, r6
 8004d40:	e7cf      	b.n	8004ce2 <PI_Controller+0x26>
 8004d42:	bf00      	nop
 8004d44:	80000001 	.word	0x80000001

08004d48 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8004d48:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004d4a:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004d4e:	8b11      	ldrh	r1, [r2, #24]
 8004d50:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004d52:	8995      	ldrh	r5, [r2, #12]
 8004d54:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004d56:	fb13 f301 	smulbb	r3, r3, r1
{
 8004d5a:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004d5c:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8004d60:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004d64:	f7ff fac6 	bl	80042f4 <VBS_GetAvBusVoltage_V>
 8004d68:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8004d6c:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004d6e:	480e      	ldr	r0, [pc, #56]	; (8004da8 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8004d70:	490e      	ldr	r1, [pc, #56]	; (8004dac <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 8004d72:	bfb8      	it	lt
 8004d74:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004d78:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8004d7c:	bfb8      	it	lt
 8004d7e:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004d80:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 8004d82:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004d84:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8004d88:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004d8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004d90:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8004d92:	fb81 2103 	smull	r2, r1, r1, r3
 8004d96:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004d98:	4630      	mov	r0, r6
 8004d9a:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8004d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004da2:	f7ff beef 	b.w	8004b84 <MPM_CalcElMotorPower>
 8004da6:	bf00      	nop
 8004da8:	1b4e81b5 	.word	0x1b4e81b5
 8004dac:	66666667 	.word	0x66666667

08004db0 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <startTimers+0x60>)
 8004db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8004db4:	07d2      	lsls	r2, r2, #31
 8004db6:	d415      	bmi.n	8004de4 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8004db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004dc2:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004dc4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004dc8:	f002 0201 	and.w	r2, r2, #1
 8004dcc:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004dce:	9a01      	ldr	r2, [sp, #4]
 8004dd0:	694a      	ldr	r2, [r1, #20]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8004dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8004de0:	b002      	add	sp, #8
 8004de2:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8004de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004de8:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004dea:	6859      	ldr	r1, [r3, #4]
 8004dec:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004df0:	f041 0120 	orr.w	r1, r1, #32
 8004df4:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004df6:	6959      	ldr	r1, [r3, #20]
 8004df8:	f041 0101 	orr.w	r1, r1, #1
 8004dfc:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004dfe:	6859      	ldr	r1, [r3, #4]
 8004e00:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004e04:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40023800 	.word	0x40023800

08004e14 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8004e14:	b4f0      	push	{r4, r5, r6, r7}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 8004e16:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8004e18:	f004 0460 	and.w	r4, r4, #96	; 0x60
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8004e1c:	3201      	adds	r2, #1
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8004e1e:	2c60      	cmp	r4, #96	; 0x60
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8004e20:	bf18      	it	ne
 8004e22:	0856      	lsrne	r6, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004e24:	f06f 0702 	mvn.w	r7, #2
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8004e28:	bf0c      	ite	eq
 8004e2a:	0156      	lsleq	r6, r2, #5
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8004e2c:	0176      	lslne	r6, r6, #5
 8004e2e:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8004e30:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8004e32:	781c      	ldrb	r4, [r3, #0]
 8004e34:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8004e36:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8004e3a:	d80b      	bhi.n	8004e54 <waitForPolarizationEnd+0x40>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004e3c:	6904      	ldr	r4, [r0, #16]
 8004e3e:	07a4      	lsls	r4, r4, #30
 8004e40:	d5f7      	bpl.n	8004e32 <waitForPolarizationEnd+0x1e>
      hCalibrationPeriodCounter++;
 8004e42:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8004e44:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004e46:	6107      	str	r7, [r0, #16]
 8004e48:	d8f3      	bhi.n	8004e32 <waitForPolarizationEnd+0x1e>
      {
        if (*cnt < NB_CONVERSIONS)
 8004e4a:	781c      	ldrb	r4, [r3, #0]
 8004e4c:	2c0f      	cmp	r4, #15
 8004e4e:	d8f0      	bhi.n	8004e32 <waitForPolarizationEnd+0x1e>
        {
          *SWerror = 1u;
 8004e50:	2301      	movs	r3, #1
 8004e52:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8004e54:	bcf0      	pop	{r4, r5, r6, r7}
 8004e56:	4770      	bx	lr

08004e58 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8004e58:	6843      	ldr	r3, [r0, #4]
 8004e5a:	4718      	bx	r3

08004e5c <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8004e5c:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004e5e:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004e62:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8004e64:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004e66:	140c      	asrs	r4, r1, #16
{
 8004e68:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004e6a:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004e6e:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004e70:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8004e74:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8004e78:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004e7c:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8004e80:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004e84:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8004e8c:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8004e90:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8004e94:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8004e98:	db77      	blt.n	8004f8a <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8004e9a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8004e9e:	db4e      	blt.n	8004f3e <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004ea0:	1aad      	subs	r5, r5, r2
 8004ea2:	bf44      	itt	mi
 8004ea4:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8004ea8:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8004eac:	2900      	cmp	r1, #0
 8004eae:	bfbc      	itt	lt
 8004eb0:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8004eb4:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bfb8      	it	lt
 8004ebc:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004ec0:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8004ec4:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004ec8:	bfb8      	it	lt
 8004eca:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8004ece:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8004ed0:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8004ed4:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8004ed8:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8004edc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8004ee0:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8004ee2:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8004ee4:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8004ee8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004eec:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8004ef0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	b289      	uxth	r1, r1
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8004efc:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8004efe:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8004f00:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8004f02:	d118      	bne.n	8004f36 <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8004f04:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8004f08:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 8004f0c:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8004f0e:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8004f12:	bfcc      	ite	gt
 8004f14:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8004f16:	1b12      	suble	r2, r2, r4
 8004f18:	b292      	uxth	r2, r2
 8004f1a:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8004f1c:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8004f20:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8004f22:	bfcc      	ite	gt
 8004f24:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8004f26:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8004f28:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8004f2a:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8004f2c:	bfcc      	ite	gt
 8004f2e:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8004f30:	1b1b      	suble	r3, r3, r4
 8004f32:	8681      	strh	r1, [r0, #52]	; 0x34
 8004f34:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8004f36:	6983      	ldr	r3, [r0, #24]
}
 8004f38:	b003      	add	sp, #12
 8004f3a:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8004f3c:	4718      	bx	r3
      if ( wX <= 0 )
 8004f3e:	2c00      	cmp	r4, #0
 8004f40:	dd47      	ble.n	8004fd2 <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f42:	1aa5      	subs	r5, r4, r2
 8004f44:	bf44      	itt	mi
 8004f46:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8004f4a:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8004f4e:	2900      	cmp	r1, #0
 8004f50:	bfb8      	it	lt
 8004f52:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8004f56:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8004f5a:	bfb8      	it	lt
 8004f5c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8004f60:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f64:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8004f66:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004f68:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004f6c:	bfb8      	it	lt
 8004f6e:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8004f72:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8004f76:	bfb8      	it	lt
 8004f78:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8004f7c:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8004f80:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8004f84:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8004f86:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8004f88:	e7ac      	b.n	8004ee4 <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 8004f8a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8004f8e:	db69      	blt.n	8005064 <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 8004f90:	2c00      	cmp	r4, #0
 8004f92:	dd43      	ble.n	800501c <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004f94:	1b2d      	subs	r5, r5, r4
 8004f96:	bf48      	it	mi
 8004f98:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8004f9c:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004fa0:	bf48      	it	mi
 8004fa2:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bfb8      	it	lt
 8004faa:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8004fae:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004fb2:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8004fb6:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8004fba:	bfb8      	it	lt
 8004fbc:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8004fc0:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8004fc4:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8004fc8:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8004fca:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8004fcc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8004fd0:	e788      	b.n	8004ee4 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004fd2:	1b2d      	subs	r5, r5, r4
 8004fd4:	bf44      	itt	mi
 8004fd6:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8004fda:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bfb8      	it	lt
 8004fe2:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8004fe6:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8004fea:	bfb8      	it	lt
 8004fec:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8004ff0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8004ff4:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004ff6:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8004ffa:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8004ffe:	bfb8      	it	lt
 8005000:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8005004:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005008:	bfb8      	it	lt
 800500a:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800500e:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 8005012:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8005016:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8005018:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 800501a:	e763      	b.n	8004ee4 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800501c:	1aa5      	subs	r5, r4, r2
 800501e:	bf44      	itt	mi
 8005020:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005024:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8005028:	2900      	cmp	r1, #0
 800502a:	bfb8      	it	lt
 800502c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8005030:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8005034:	bfb8      	it	lt
 8005036:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 800503a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800503e:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8005040:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005042:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005046:	bfb8      	it	lt
 8005048:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800504c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005050:	bfb8      	it	lt
 8005052:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8005056:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 800505a:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800505c:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800505e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8005062:	e73f      	b.n	8004ee4 <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005064:	1aad      	subs	r5, r5, r2
 8005066:	bf44      	itt	mi
 8005068:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800506c:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005070:	2900      	cmp	r1, #0
 8005072:	bfbc      	itt	lt
 8005074:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8005078:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800507c:	2b00      	cmp	r3, #0
 800507e:	bfb8      	it	lt
 8005080:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005084:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8005088:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800508c:	bfb8      	it	lt
 800508e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8005092:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8005094:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005098:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 800509c:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 80050a0:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 80050a2:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 80050a4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80050a8:	e71c      	b.n	8004ee4 <PWMC_SetPhaseVoltage+0x88>
 80050aa:	bf00      	nop

080050ac <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 80050ac:	6883      	ldr	r3, [r0, #8]
 80050ae:	4718      	bx	r3

080050b0 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 80050b0:	b510      	push	{r4, lr}
 80050b2:	4604      	mov	r4, r0
 80050b4:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 80050b6:	b199      	cbz	r1, 80050e0 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 80050b8:	2901      	cmp	r1, #1
 80050ba:	d002      	beq.n	80050c2 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80050bc:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 80050be:	b002      	add	sp, #8
 80050c0:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 80050c2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80050c6:	b1cb      	cbz	r3, 80050fc <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	9101      	str	r1, [sp, #4]
 80050ce:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f2      	bne.n	80050bc <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 80050d6:	6903      	ldr	r3, [r0, #16]
 80050d8:	4798      	blx	r3
        retVal = true;
 80050da:	9901      	ldr	r1, [sp, #4]
 80050dc:	4608      	mov	r0, r1
 80050de:	e7ee      	b.n	80050be <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 80050e0:	f7ff ffe4 	bl	80050ac <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 80050e4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80050e8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e5      	bne.n	80050bc <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 80050f0:	4620      	mov	r0, r4
 80050f2:	6923      	ldr	r3, [r4, #16]
 80050f4:	4798      	blx	r3
      retVal = true;
 80050f6:	2001      	movs	r0, #1
}
 80050f8:	b002      	add	sp, #8
 80050fa:	bd10      	pop	{r4, pc}
      retVal = true;
 80050fc:	4608      	mov	r0, r1
}
 80050fe:	b002      	add	sp, #8
 8005100:	bd10      	pop	{r4, pc}
 8005102:	bf00      	nop

08005104 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8005104:	69c3      	ldr	r3, [r0, #28]
 8005106:	4718      	bx	r3

08005108 <R3_1_GetPhaseCurrents>:
  * @retval Ia and Ib current in ab_t format
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005108:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800510a:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800510c:	685c      	ldr	r4, [r3, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800510e:	6a22      	ldr	r2, [r4, #32]
 8005110:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005114:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );
 8005116:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a

  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 800511a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800511e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8005122:	6812      	ldr	r2, [r2, #0]
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005124:	681b      	ldr	r3, [r3, #0]
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8005126:	0052      	lsls	r2, r2, #1
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005128:	005b      	lsls	r3, r3, #1
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 800512a:	b292      	uxth	r2, r2
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 800512c:	b29e      	uxth	r6, r3

  switch ( bSector )
 800512e:	2c05      	cmp	r4, #5
 8005130:	f200 809e 	bhi.w	8005270 <R3_1_GetPhaseCurrents+0x168>
 8005134:	e8df f004 	tbb	[pc, r4]
 8005138:	031d1d36 	.word	0x031d1d36
 800513c:	3603      	.short	0x3603
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800513e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8005140:	4c4f      	ldr	r4, [pc, #316]	; (8005280 <R3_1_GetPhaseCurrents+0x178>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005142:	1a9a      	subs	r2, r3, r2
      if ( wAux < -INT16_MAX )
 8005144:	42a2      	cmp	r2, r4
 8005146:	db5c      	blt.n	8005202 <R3_1_GetPhaseCurrents+0xfa>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005148:	6e04      	ldr	r4, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 800514a:	4f4d      	ldr	r7, [pc, #308]	; (8005280 <R3_1_GetPhaseCurrents+0x178>)
      else  if ( wAux > INT16_MAX )
 800514c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        pStator_Currents->a = INT16_MAX;
 8005150:	bfa8      	it	ge
 8005152:	f647 73ff 	movwge	r3, #32767	; 0x7fff
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005156:	eba4 0406 	sub.w	r4, r4, r6
        pStator_Currents->a = INT16_MAX;
 800515a:	bfac      	ite	ge
 800515c:	800b      	strhge	r3, [r1, #0]
        pStator_Currents->a = ( int16_t )wAux;
 800515e:	800a      	strhlt	r2, [r1, #0]
      if ( wAux < -INT16_MAX )
 8005160:	42bc      	cmp	r4, r7
 8005162:	da54      	bge.n	800520e <R3_1_GetPhaseCurrents+0x106>
      {
        pStator_Currents->b = -INT16_MAX;
 8005164:	f9b1 5000 	ldrsh.w	r5, [r1]
 8005168:	804f      	strh	r7, [r1, #2]
 800516a:	b2ab      	uxth	r3, r5
 800516c:	f248 0401 	movw	r4, #32769	; 0x8001
 8005170:	e031      	b.n	80051d6 <R3_1_GetPhaseCurrents+0xce>
    case SECTOR_2:
    case SECTOR_3:
    {
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005172:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8005174:	4b42      	ldr	r3, [pc, #264]	; (8005280 <R3_1_GetPhaseCurrents+0x178>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005176:	1aaa      	subs	r2, r5, r2
      if ( wAux < -INT16_MAX )
 8005178:	429a      	cmp	r2, r3
 800517a:	db3c      	blt.n	80051f6 <R3_1_GetPhaseCurrents+0xee>
      {
        pStator_Currents->a = -INT16_MAX;
      }
      else  if ( wAux > INT16_MAX )
 800517c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005180:	db6a      	blt.n	8005258 <R3_1_GetPhaseCurrents+0x150>
      {
        pStator_Currents->a = INT16_MAX;
 8005182:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005186:	4613      	mov	r3, r2
 8005188:	800a      	strh	r2, [r1, #0]
 800518a:	4615      	mov	r5, r2
      }

      /* Ic = PhaseCOffset - ADC converted value) */
      /* Ib = -Ic -Ia */
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 800518c:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800518e:	1b34      	subs	r4, r6, r4
 8005190:	1aa2      	subs	r2, r4, r2

      /* Saturation of Ib */
      if ( wAux > INT16_MAX )
 8005192:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005196:	db4d      	blt.n	8005234 <R3_1_GetPhaseCurrents+0x12c>
      {
        pStator_Currents->b = INT16_MAX;
 8005198:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800519c:	4614      	mov	r4, r2
 800519e:	804a      	strh	r2, [r1, #2]
 80051a0:	4617      	mov	r7, r2
 80051a2:	e018      	b.n	80051d6 <R3_1_GetPhaseCurrents+0xce>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80051a4:	6e05      	ldr	r5, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 80051a6:	4b36      	ldr	r3, [pc, #216]	; (8005280 <R3_1_GetPhaseCurrents+0x178>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80051a8:	1aaa      	subs	r2, r5, r2
      if ( wAux < -INT16_MAX )
 80051aa:	429a      	cmp	r2, r3
 80051ac:	db1d      	blt.n	80051ea <R3_1_GetPhaseCurrents+0xe2>
      else  if ( wAux > INT16_MAX )
 80051ae:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80051b2:	db46      	blt.n	8005242 <R3_1_GetPhaseCurrents+0x13a>
        pStator_Currents->b = INT16_MAX;
 80051b4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80051b8:	461c      	mov	r4, r3
 80051ba:	804b      	strh	r3, [r1, #2]
 80051bc:	461a      	mov	r2, r3
 80051be:	461f      	mov	r7, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80051c0:	6e45      	ldr	r5, [r0, #100]	; 0x64
 80051c2:	1b73      	subs	r3, r6, r5
 80051c4:	1a9a      	subs	r2, r3, r2
      if ( wAux > INT16_MAX )
 80051c6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80051ca:	db2c      	blt.n	8005226 <R3_1_GetPhaseCurrents+0x11e>
        pStator_Currents->a = INT16_MAX;
 80051cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80051d0:	4613      	mov	r3, r2
 80051d2:	800a      	strh	r2, [r1, #0]
 80051d4:	4615      	mov	r5, r2
    }
    break;
  }
  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80051d6:	4423      	add	r3, r4
 80051d8:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 80051da:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 80051de:	f8a0 704a 	strh.w	r7, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80051e2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80051e6:	bcf0      	pop	{r4, r5, r6, r7}
 80051e8:	4770      	bx	lr
        pStator_Currents->b = -INT16_MAX;
 80051ea:	461a      	mov	r2, r3
 80051ec:	804b      	strh	r3, [r1, #2]
 80051ee:	461f      	mov	r7, r3
 80051f0:	f248 0401 	movw	r4, #32769	; 0x8001
 80051f4:	e7e4      	b.n	80051c0 <R3_1_GetPhaseCurrents+0xb8>
        pStator_Currents->a = -INT16_MAX;
 80051f6:	461a      	mov	r2, r3
 80051f8:	800b      	strh	r3, [r1, #0]
 80051fa:	461d      	mov	r5, r3
 80051fc:	f248 0301 	movw	r3, #32769	; 0x8001
 8005200:	e7c4      	b.n	800518c <R3_1_GetPhaseCurrents+0x84>
        pStator_Currents->a = -INT16_MAX;
 8005202:	800c      	strh	r4, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005204:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 8005206:	4f1e      	ldr	r7, [pc, #120]	; (8005280 <R3_1_GetPhaseCurrents+0x178>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005208:	1ba4      	subs	r4, r4, r6
      if ( wAux < -INT16_MAX )
 800520a:	42bc      	cmp	r4, r7
 800520c:	dbaa      	blt.n	8005164 <R3_1_GetPhaseCurrents+0x5c>
      else  if ( wAux > INT16_MAX )
 800520e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005212:	db1a      	blt.n	800524a <R3_1_GetPhaseCurrents+0x142>
        pStator_Currents->b = INT16_MAX;
 8005214:	f9b1 5000 	ldrsh.w	r5, [r1]
 8005218:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800521c:	804b      	strh	r3, [r1, #2]
 800521e:	461c      	mov	r4, r3
 8005220:	461f      	mov	r7, r3
 8005222:	b2ab      	uxth	r3, r5
 8005224:	e7d7      	b.n	80051d6 <R3_1_GetPhaseCurrents+0xce>
      else  if ( wAux < -INT16_MAX )
 8005226:	4d16      	ldr	r5, [pc, #88]	; (8005280 <R3_1_GetPhaseCurrents+0x178>)
 8005228:	42aa      	cmp	r2, r5
 800522a:	da19      	bge.n	8005260 <R3_1_GetPhaseCurrents+0x158>
        pStator_Currents->a = -INT16_MAX;
 800522c:	800d      	strh	r5, [r1, #0]
 800522e:	f248 0301 	movw	r3, #32769	; 0x8001
 8005232:	e7d0      	b.n	80051d6 <R3_1_GetPhaseCurrents+0xce>
      else  if ( wAux < -INT16_MAX )
 8005234:	4f12      	ldr	r7, [pc, #72]	; (8005280 <R3_1_GetPhaseCurrents+0x178>)
 8005236:	42ba      	cmp	r2, r7
 8005238:	da16      	bge.n	8005268 <R3_1_GetPhaseCurrents+0x160>
        pStator_Currents->b = -INT16_MAX;
 800523a:	804f      	strh	r7, [r1, #2]
 800523c:	f248 0401 	movw	r4, #32769	; 0x8001
 8005240:	e7c9      	b.n	80051d6 <R3_1_GetPhaseCurrents+0xce>
        pStator_Currents->b = ( int16_t )wAux;
 8005242:	b217      	sxth	r7, r2
 8005244:	804f      	strh	r7, [r1, #2]
 8005246:	b294      	uxth	r4, r2
 8005248:	e7ba      	b.n	80051c0 <R3_1_GetPhaseCurrents+0xb8>
        pStator_Currents->b = ( int16_t )wAux;
 800524a:	f9b1 5000 	ldrsh.w	r5, [r1]
 800524e:	b227      	sxth	r7, r4
 8005250:	b2ab      	uxth	r3, r5
 8005252:	804f      	strh	r7, [r1, #2]
 8005254:	b2a4      	uxth	r4, r4
 8005256:	e7be      	b.n	80051d6 <R3_1_GetPhaseCurrents+0xce>
        pStator_Currents->a = ( int16_t )wAux;
 8005258:	b215      	sxth	r5, r2
 800525a:	800d      	strh	r5, [r1, #0]
 800525c:	b293      	uxth	r3, r2
 800525e:	e795      	b.n	800518c <R3_1_GetPhaseCurrents+0x84>
        pStator_Currents->a = ( int16_t )wAux;
 8005260:	b215      	sxth	r5, r2
 8005262:	800d      	strh	r5, [r1, #0]
 8005264:	b293      	uxth	r3, r2
 8005266:	e7b6      	b.n	80051d6 <R3_1_GetPhaseCurrents+0xce>
        pStator_Currents->b = ( int16_t )wAux;
 8005268:	b217      	sxth	r7, r2
 800526a:	804f      	strh	r7, [r1, #2]
 800526c:	b294      	uxth	r4, r2
 800526e:	e7b2      	b.n	80051d6 <R3_1_GetPhaseCurrents+0xce>
 8005270:	f9b1 5000 	ldrsh.w	r5, [r1]
 8005274:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 8005278:	880b      	ldrh	r3, [r1, #0]
 800527a:	884c      	ldrh	r4, [r1, #2]
 800527c:	e7ab      	b.n	80051d6 <R3_1_GetPhaseCurrents+0xce>
 800527e:	bf00      	nop
 8005280:	ffff8001 	.word	0xffff8001

08005284 <R3_1_HFCurrentsCalibrationAB>:
 * @retval It always returns {0,0} in ab_t format
 */
void R3_1_HFCurrentsCalibrationAB(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005284:	6f83      	ldr	r3, [r0, #120]	; 0x78
{  
 8005286:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005288:	685c      	ldr	r4, [r3, #4]
 800528a:	6a22      	ldr	r2, [r4, #32]
 800528c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005290:	6222      	str	r2, [r4, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005292:	f890 2073 	ldrb.w	r2, [r0, #115]	; 0x73
 8005296:	2a0f      	cmp	r2, #15
 8005298:	d813      	bhi.n	80052c2 <R3_1_HFCurrentsCalibrationAB+0x3e>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 800529a:	f890 5072 	ldrb.w	r5, [r0, #114]	; 0x72
 800529e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052a2:	e9d0 4217 	ldrd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 80052a6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 80052aa:	682d      	ldr	r5, [r5, #0]
 80052ac:	442c      	add	r4, r5
 80052ae:	65c4      	str	r4, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052b0:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 80052b2:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
 80052b6:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052b8:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80052ba:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052bc:	6602      	str	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 80052be:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80052c2:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 80052c4:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 80052c6:	600b      	str	r3, [r1, #0]
}
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop

080052cc <R3_1_HFCurrentsCalibrationC>:
  *         the offset computation.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 80052cc:	b410      	push	{r4}
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80052ce:	6f84      	ldr	r4, [r0, #120]	; 0x78
 80052d0:	6862      	ldr	r2, [r4, #4]
 80052d2:	6a13      	ldr	r3, [r2, #32]
 80052d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d8:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80052da:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
 80052de:	2b0f      	cmp	r3, #15
 80052e0:	d80e      	bhi.n	8005300 <R3_1_HFCurrentsCalibrationC+0x34>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052e2:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 80052e6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80052e8:	3314      	adds	r3, #20
 80052ea:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80052ee:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 80052f0:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
 80052f4:	3301      	adds	r3, #1
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052f6:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80052f8:	b2db      	uxtb	r3, r3
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80052fa:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 80052fc:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8005300:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8005302:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8005306:	600b      	str	r3, [r1, #0]
}
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop

0800530c <R3_1_TurnOnLowSides>:
  * @retval none
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800530c:	6f81      	ldr	r1, [r0, #120]	; 0x78

  pHandle->_Super.TurnOnLowSidesAction = true;
 800530e:	2301      	movs	r3, #1
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005310:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8005312:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005316:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005318:	f06f 0001 	mvn.w	r0, #1
 800531c:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800531e:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005320:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005322:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005324:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8005326:	07db      	lsls	r3, r3, #31
 8005328:	d5fc      	bpl.n	8005324 <R3_1_TurnOnLowSides+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800532a:	f06f 0301 	mvn.w	r3, #1
 800532e:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005330:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005336:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8005338:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 800533c:	2b02      	cmp	r3, #2
 800533e:	d000      	beq.n	8005342 <R3_1_TurnOnLowSides+0x36>
 8005340:	4770      	bx	lr
{
 8005342:	b470      	push	{r4, r5, r6}
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8005344:	e9d1 5002 	ldrd	r5, r0, [r1, #8]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8005348:	e9d1 3604 	ldrd	r3, r6, [r1, #16]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800534c:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005350:	61ae      	str	r6, [r5, #24]
 8005352:	6184      	str	r4, [r0, #24]
  }
  return; 
}
 8005354:	bc70      	pop	{r4, r5, r6}
 8005356:	619a      	str	r2, [r3, #24]
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop

0800535c <R3_1_SwitchOnPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800535c:	6f81      	ldr	r1, [r0, #120]	; 0x78

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800535e:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005362:	684b      	ldr	r3, [r1, #4]
{  
 8005364:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005366:	2400      	movs	r4, #0
 8005368:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800536c:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800536e:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8005372:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005374:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005376:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005378:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800537a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800537c:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800537e:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8005380:	07d2      	lsls	r2, r2, #31
 8005382:	d5fc      	bpl.n	800537e <R3_1_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005384:	f06f 0201 	mvn.w	r2, #1
 8005388:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800538a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800538c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005390:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005394:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005398:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800539a:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 800539e:	2a02      	cmp	r2, #2
 80053a0:	d008      	beq.n	80053b4 <R3_1_SwitchOnPWM+0x58>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80053a2:	f06f 0201 	mvn.w	r2, #1
 80053a6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 80053ae:	bcf0      	pop	{r4, r5, r6, r7}
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80053b4:	6a18      	ldr	r0, [r3, #32]
 80053b6:	f240 5255 	movw	r2, #1365	; 0x555
 80053ba:	4210      	tst	r0, r2
 80053bc:	d009      	beq.n	80053d2 <R3_1_SwitchOnPWM+0x76>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80053be:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80053c2:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
 80053c6:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80053c8:	e9d1 4106 	ldrd	r4, r1, [r1, #24]
 80053cc:	6184      	str	r4, [r0, #24]
 80053ce:	6191      	str	r1, [r2, #24]
}
 80053d0:	e7e7      	b.n	80053a2 <R3_1_SwitchOnPWM+0x46>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80053d2:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
 80053d6:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80053d8:	690d      	ldr	r5, [r1, #16]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80053da:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
 80053de:	0424      	lsls	r4, r4, #16
 80053e0:	0400      	lsls	r0, r0, #16
 80053e2:	0412      	lsls	r2, r2, #16
 80053e4:	61bc      	str	r4, [r7, #24]
 80053e6:	61b0      	str	r0, [r6, #24]
 80053e8:	61aa      	str	r2, [r5, #24]
}
 80053ea:	e7da      	b.n	80053a2 <R3_1_SwitchOnPWM+0x46>

080053ec <R3_1_SwitchOffPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80053ec:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80053ee:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80053f0:	68d3      	ldr	r3, [r2, #12]
 80053f2:	f023 0301 	bic.w	r3, r3, #1
{
 80053f6:	b4f0      	push	{r4, r5, r6, r7}

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->BrakeActionLock == true)
 80053f8:	f890 4076 	ldrb.w	r4, [r0, #118]	; 0x76
 80053fc:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80053fe:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005400:	2500      	movs	r5, #0
 8005402:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005406:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 800540a:	6453      	str	r3, [r2, #68]	; 0x44
  if (pHandle->BrakeActionLock == true)
 800540c:	b91c      	cbnz	r4, 8005416 <R3_1_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800540e:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 8005412:	2b02      	cmp	r3, #2
 8005414:	d00a      	beq.n	800542c <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005416:	f06f 0301 	mvn.w	r3, #1
 800541a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800541c:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800541e:	07db      	lsls	r3, r3, #31
 8005420:	d5fc      	bpl.n	800541c <R3_1_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005422:	f06f 0301 	mvn.w	r3, #1
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8005426:	bcf0      	pop	{r4, r5, r6, r7}
 8005428:	6113      	str	r3, [r2, #16]
 800542a:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800542c:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
 8005430:	69cb      	ldr	r3, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005432:	690d      	ldr	r5, [r1, #16]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8005434:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
 8005438:	0424      	lsls	r4, r4, #16
 800543a:	0400      	lsls	r0, r0, #16
 800543c:	041b      	lsls	r3, r3, #16
 800543e:	61bc      	str	r4, [r7, #24]
 8005440:	61b0      	str	r0, [r6, #24]
 8005442:	61ab      	str	r3, [r5, #24]
}
 8005444:	e7e7      	b.n	8005416 <R3_1_SwitchOffPWM+0x2a>
 8005446:	bf00      	nop

08005448 <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{
 8005448:	b430      	push	{r4, r5}

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800544a:	6f84      	ldr	r4, [r0, #120]	; 0x78
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 800544c:	6e03      	ldr	r3, [r0, #96]	; 0x60
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800544e:	6865      	ldr	r5, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005450:	6a2a      	ldr	r2, [r5, #32]
 8005452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005456:	622a      	str	r2, [r5, #32]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8005458:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 800545c:	480d      	ldr	r0, [pc, #52]	; (8005494 <R3_1_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 800545e:	3214      	adds	r2, #20
 8005460:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if (wAux > -INT16_MAX)
 800546a:	4283      	cmp	r3, r0
 800546c:	db05      	blt.n	800547a <R3_1_RLGetPhaseCurrents+0x32>
  {
    if (wAux < INT16_MAX)
 800546e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005472:	4293      	cmp	r3, r2
 8005474:	dc0a      	bgt.n	800548c <R3_1_RLGetPhaseCurrents+0x44>
 8005476:	b21b      	sxth	r3, r3
 8005478:	e000      	b.n	800547c <R3_1_RLGetPhaseCurrents+0x34>
 800547a:	4b07      	ldr	r3, [pc, #28]	; (8005498 <R3_1_RLGetPhaseCurrents+0x50>)
  else
  {
    wAux = -INT16_MAX;
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 800547c:	2200      	movs	r2, #0
 800547e:	f363 020f 	bfi	r2, r3, #0, #16
 8005482:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = ( int16_t )( wAux );

}
 8005486:	bc30      	pop	{r4, r5}
  pStator_Currents->a = ( int16_t )( wAux );
 8005488:	600a      	str	r2, [r1, #0]
}
 800548a:	4770      	bx	lr
 800548c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005490:	e7f4      	b.n	800547c <R3_1_RLGetPhaseCurrents+0x34>
 8005492:	bf00      	nop
 8005494:	ffff8002 	.word	0xffff8002
 8005498:	ffff8001 	.word	0xffff8001

0800549c <R3_1_RLTurnOnLowSides>:
  * @retval none
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800549c:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800549e:	684a      	ldr	r2, [r1, #4]
{  
 80054a0:	b430      	push	{r4, r5}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80054a2:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80054a6:	2400      	movs	r4, #0
 80054a8:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80054aa:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80054ac:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80054ae:	07db      	lsls	r3, r3, #31
 80054b0:	d5fc      	bpl.n	80054ac <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80054b2:	f06f 0301 	mvn.w	r3, #1
 80054b6:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80054b8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80054ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054be:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80054c0:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d10a      	bne.n	80054de <R3_1_RLTurnOnLowSides+0x42>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80054c8:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80054cc:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80054d0:	e9d1 1504 	ldrd	r1, r5, [r1, #16]
 80054d4:	0412      	lsls	r2, r2, #16
 80054d6:	041b      	lsls	r3, r3, #16
  WRITE_REG(GPIOx->BSRR, PinMask);
 80054d8:	61a5      	str	r5, [r4, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80054da:	6182      	str	r2, [r0, #24]
 80054dc:	618b      	str	r3, [r1, #24]
  }
  return; 
}
 80054de:	bc30      	pop	{r4, r5}
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop

080054e4 <R3_1_RLSwitchOnPWM>:
  * @retval none
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80054e4:	6f81      	ldr	r1, [r0, #120]	; 0x78
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 80054e6:	2200      	movs	r2, #0
{
 80054e8:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80054ea:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80054ee:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	06d6      	lsls	r6, r2, #27
 80054f6:	d4fc      	bmi.n	80054f2 <R3_1_RLSwitchOnPWM+0xe>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	06d5      	lsls	r5, r2, #27
 80054fc:	d5fc      	bpl.n	80054f8 <R3_1_RLSwitchOnPWM+0x14>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 80054fe:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005502:	2501      	movs	r5, #1
 8005504:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005506:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800550a:	635d      	str	r5, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800550e:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005510:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8005512:	07d2      	lsls	r2, r2, #31
 8005514:	d5fc      	bpl.n	8005510 <R3_1_RLSwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005516:	f06f 0201 	mvn.w	r2, #1
 800551a:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800551c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800551e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005522:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800552a:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800552c:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 8005530:	2a02      	cmp	r2, #2
 8005532:	d00b      	beq.n	800554c <R3_1_RLSwitchOnPWM+0x68>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005534:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8005538:	f06f 0104 	mvn.w	r1, #4
 800553c:	6021      	str	r1, [r4, #0]
 800553e:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8005546:	bcf0      	pop	{r4, r5, r6, r7}
 8005548:	60da      	str	r2, [r3, #12]
 800554a:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800554c:	6a18      	ldr	r0, [r3, #32]
 800554e:	f240 5255 	movw	r2, #1365	; 0x555
 8005552:	4210      	tst	r0, r2
 8005554:	d00a      	beq.n	800556c <R3_1_RLSwitchOnPWM+0x88>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8005556:	e9d1 0502 	ldrd	r0, r5, [r1, #8]
 800555a:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800555c:	694e      	ldr	r6, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800555e:	6186      	str	r6, [r0, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005560:	6908      	ldr	r0, [r1, #16]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8005562:	6989      	ldr	r1, [r1, #24]
 8005564:	61a9      	str	r1, [r5, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005566:	0412      	lsls	r2, r2, #16
 8005568:	6182      	str	r2, [r0, #24]
}
 800556a:	e7e3      	b.n	8005534 <R3_1_RLSwitchOnPWM+0x50>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800556c:	e9d1 5005 	ldrd	r5, r0, [r1, #20]
 8005570:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8005572:	f8d1 c008 	ldr.w	ip, [r1, #8]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005576:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800557a:	042d      	lsls	r5, r5, #16
 800557c:	0400      	lsls	r0, r0, #16
 800557e:	0412      	lsls	r2, r2, #16
 8005580:	f8cc 5018 	str.w	r5, [ip, #24]
 8005584:	61b8      	str	r0, [r7, #24]
 8005586:	61b2      	str	r2, [r6, #24]
}
 8005588:	e7d4      	b.n	8005534 <R3_1_RLSwitchOnPWM+0x50>
 800558a:	bf00      	nop

0800558c <R3_1_Init>:
{
 800558c:	b430      	push	{r4, r5}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800558e:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8005590:	e9d4 3200 	ldrd	r3, r2, [r4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8005594:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8005596:	f06f 0502 	mvn.w	r5, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800559a:	f021 0120 	bic.w	r1, r1, #32
 800559e:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80055a0:	601d      	str	r5, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80055a2:	6859      	ldr	r1, [r3, #4]
    if ( TIMx == TIM1 )
 80055a4:	4d1f      	ldr	r5, [pc, #124]	; (8005624 <R3_1_Init+0x98>)
 80055a6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80055aa:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80055ac:	f06f 0104 	mvn.w	r1, #4
 80055b0:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80055b2:	6811      	ldr	r1, [r2, #0]
 80055b4:	42aa      	cmp	r2, r5
 80055b6:	f021 0101 	bic.w	r1, r1, #1
 80055ba:	6011      	str	r1, [r2, #0]
 80055bc:	d02c      	beq.n	8005618 <R3_1_Init+0x8c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80055be:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80055c2:	6111      	str	r1, [r2, #16]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80055c4:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
 80055c8:	b119      	cbz	r1, 80055d2 <R3_1_Init+0x46>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80055ca:	68d1      	ldr	r1, [r2, #12]
 80055cc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80055d0:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 80055d2:	6a11      	ldr	r1, [r2, #32]
 80055d4:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 80055d8:	f041 0105 	orr.w	r1, r1, #5
 80055dc:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	f042 0201 	orr.w	r2, r2, #1
 80055e4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80055e8:	f06f 0104 	mvn.w	r1, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80055ec:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055f0:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80055f2:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055fa:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 80055fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80055fe:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    pHandle->OverCurrentFlag = false;
 8005602:	2100      	movs	r1, #0
 8005604:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8005608:	66c4      	str	r4, [r0, #108]	; 0x6c
 800560a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800560c:	bc30      	pop	{r4, r5}
    pHandle->OverCurrentFlag = false;
 800560e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
    pHandle->_Super.DTTest = 0u;
 8005612:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 8005616:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8005618:	4d03      	ldr	r5, [pc, #12]	; (8005628 <R3_1_Init+0x9c>)
 800561a:	68e9      	ldr	r1, [r5, #12]
 800561c:	f041 0101 	orr.w	r1, r1, #1
 8005620:	60e9      	str	r1, [r5, #12]
}
 8005622:	e7cc      	b.n	80055be <R3_1_Init+0x32>
 8005624:	40010000 	.word	0x40010000
 8005628:	e0042000 	.word	0xe0042000

0800562c <R3_1_CurrentReadingCalibration>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800562c:	6f83      	ldr	r3, [r0, #120]	; 0x78
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 800562e:	493b      	ldr	r1, [pc, #236]	; (800571c <R3_1_CurrentReadingCalibration+0xf0>)
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8005630:	4a3b      	ldr	r2, [pc, #236]	; (8005720 <R3_1_CurrentReadingCalibration+0xf4>)
{
 8005632:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005634:	685d      	ldr	r5, [r3, #4]
  pHandle->PhaseAOffset = 0u;
 8005636:	2600      	movs	r6, #0
  pHandle->PolarizationCounter = 0u;
 8005638:	f880 6073 	strb.w	r6, [r0, #115]	; 0x73
  CLEAR_BIT(TIMx->CCER, Channels);
 800563c:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 800563e:	65c6      	str	r6, [r0, #92]	; 0x5c
 8005640:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
{
 8005644:	4604      	mov	r4, r0
  pHandle->CalibSector = SECTOR_5;
 8005646:	2704      	movs	r7, #4
 8005648:	f023 0305 	bic.w	r3, r3, #5
{
 800564c:	b083      	sub	sp, #12
  pHandle->PhaseCOffset = 0u;
 800564e:	e9c0 6618 	strd	r6, r6, [r0, #96]	; 0x60
 8005652:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 8005654:	6041      	str	r1, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8005656:	6182      	str	r2, [r0, #24]
  pHandle->CalibSector = SECTOR_5;
 8005658:	f880 7072 	strb.w	r7, [r0, #114]	; 0x72
  pHandle->_Super.Sector = SECTOR_5; 
 800565c:	f880 703a 	strb.w	r7, [r0, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8005660:	f7ff fe7c 	bl	800535c <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8005664:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005666:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800566a:	f104 0373 	add.w	r3, r4, #115	; 0x73
 800566e:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 8005672:	4628      	mov	r0, r5
 8005674:	e9cd 3100 	strd	r3, r1, [sp]
 8005678:	f7ff fbcc 	bl	8004e14 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 800567c:	4620      	mov	r0, r4
 800567e:	f7ff feb5 	bl	80053ec <R3_1_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8005682:	4a28      	ldr	r2, [pc, #160]	; (8005724 <R3_1_CurrentReadingCalibration+0xf8>)
 8005684:	6062      	str	r2, [r4, #4]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8005686:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8005688:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
  pHandle->CalibSector = SECTOR_1;
 800568c:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
  pHandle->_Super.Sector = SECTOR_1; 
 8005690:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8005694:	f7ff fe62 	bl	800535c <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8005698:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800569a:	e9dd 3100 	ldrd	r3, r1, [sp]
 800569e:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 80056a2:	4628      	mov	r0, r5
 80056a4:	f7ff fbb6 	bl	8004e14 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7ff fe9f 	bl	80053ec <R3_1_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 80056ae:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80056b2:	4b1d      	ldr	r3, [pc, #116]	; (8005728 <R3_1_CurrentReadingCalibration+0xfc>)
 80056b4:	6063      	str	r3, [r4, #4]
  pHandle->PhaseAOffset >>= 3;
 80056b6:	08c9      	lsrs	r1, r1, #3
  pHandle->PhaseCOffset >>= 3;
 80056b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 80056ba:	481c      	ldr	r0, [pc, #112]	; (800572c <R3_1_CurrentReadingCalibration+0x100>)
  pHandle->PhaseBOffset >>= 3;
 80056bc:	08d2      	lsrs	r2, r2, #3
 80056be:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset >>= 3;
 80056c2:	08db      	lsrs	r3, r3, #3
 80056c4:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80056c6:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 80056c8:	61a0      	str	r0, [r4, #24]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80056ca:	f023 0308 	bic.w	r3, r3, #8
 80056ce:	61ab      	str	r3, [r5, #24]
 80056d0:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 80056d2:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80056d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056da:	61aa      	str	r2, [r5, #24]
 80056dc:	69ea      	ldr	r2, [r5, #28]
 80056de:	f022 0208 	bic.w	r2, r2, #8
 80056e2:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80056e4:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80056e6:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80056e8:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80056ea:	69ab      	ldr	r3, [r5, #24]
 80056ec:	f043 0308 	orr.w	r3, r3, #8
 80056f0:	61ab      	str	r3, [r5, #24]
 80056f2:	69ab      	ldr	r3, [r5, #24]
 80056f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056f8:	61ab      	str	r3, [r5, #24]
 80056fa:	69eb      	ldr	r3, [r5, #28]
 80056fc:	f043 0308 	orr.w	r3, r3, #8
 8005700:	61eb      	str	r3, [r5, #28]
  pHandle->_Super.Sector = SECTOR_5;
 8005702:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
  SET_BIT(TIMx->CCER, Channels);
 8005706:	6a2b      	ldr	r3, [r5, #32]
 8005708:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800570c:	f043 0305 	orr.w	r3, r3, #5
 8005710:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 8005712:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
}
 8005716:	b003      	add	sp, #12
 8005718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571a:	bf00      	nop
 800571c:	08005285 	.word	0x08005285
 8005720:	08005759 	.word	0x08005759
 8005724:	080052cd 	.word	0x080052cd
 8005728:	08005109 	.word	0x08005109
 800572c:	08005779 	.word	0x08005779

08005730 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005730:	6f83      	ldr	r3, [r0, #120]	; 0x78
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 8005732:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005734:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8005736:	8f02      	ldrh	r2, [r0, #56]	; 0x38
{
 8005738:	b430      	push	{r4, r5}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 800573a:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 800573c:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  WRITE_REG(TIMx->CCR1, CompareValue);
 800573e:	635d      	str	r5, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005740:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005742:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005744:	6a1b      	ldr	r3, [r3, #32]
  if ( pHandle->_Super.SWerror == 1u )
 8005746:	2a01      	cmp	r2, #1
    hAux = MC_FOC_DURATION;
 8005748:	bf12      	itee	ne
 800574a:	f3c3 3200 	ubfxne	r2, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 800574e:	2300      	moveq	r3, #0
 8005750:	8703      	strheq	r3, [r0, #56]	; 0x38
}
 8005752:	bc30      	pop	{r4, r5}
 8005754:	4610      	mov	r0, r2
 8005756:	4770      	bx	lr

08005758 <R3_1_SetADCSampPointCalibration>:
{
 8005758:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800575a:	f8b0 1070 	ldrh.w	r1, [r0, #112]	; 0x70
  pHandle->_Super.Sector = pHandle->CalibSector;
 800575e:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8005762:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8005766:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800576a:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800576c:	66c4      	str	r4, [r0, #108]	; 0x6c
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800576e:	b289      	uxth	r1, r1
 8005770:	f7ff ffde 	bl	8005730 <R3_1_WriteTIMRegisters>
}
 8005774:	bd10      	pop	{r4, pc}
 8005776:	bf00      	nop

08005778 <R3_1_SetADCSampPointSectX>:
{
 8005778:	b570      	push	{r4, r5, r6, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 800577a:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 800577c:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
 8005780:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8005782:	1a62      	subs	r2, r4, r1
 8005784:	f8b6 3068 	ldrh.w	r3, [r6, #104]	; 0x68
 8005788:	b292      	uxth	r2, r2
 800578a:	429a      	cmp	r2, r3
 800578c:	d907      	bls.n	800579e <R3_1_SetADCSampPointSectX+0x26>
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800578e:	1e61      	subs	r1, r4, #1
    pHandle->_Super.Sector = SECTOR_5;
 8005790:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8005792:	b289      	uxth	r1, r1
    pHandle->_Super.Sector = SECTOR_5;
 8005794:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8005798:	f7ff ffca 	bl	8005730 <R3_1_WriteTIMRegisters>
}
 800579c:	bd70      	pop	{r4, r5, r6, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 800579e:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
 80057a0:	1b4d      	subs	r5, r1, r5
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80057a2:	b2ad      	uxth	r5, r5
 80057a4:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 80057a8:	d906      	bls.n	80057b8 <R3_1_SetADCSampPointSectX+0x40>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 80057aa:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
 80057ae:	1ac9      	subs	r1, r1, r3
 80057b0:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80057b2:	f7ff ffbd 	bl	8005730 <R3_1_WriteTIMRegisters>
}
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 80057b8:	4419      	add	r1, r3
 80057ba:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80057bc:	428c      	cmp	r4, r1
 80057be:	d8eb      	bhi.n	8005798 <R3_1_SetADCSampPointSectX+0x20>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80057c0:	43c9      	mvns	r1, r1
 80057c2:	eb01 0144 	add.w	r1, r1, r4, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80057c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80057ca:	b289      	uxth	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80057cc:	66c3      	str	r3, [r0, #108]	; 0x6c
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80057ce:	f7ff ffaf 	bl	8005730 <R3_1_WriteTIMRegisters>
}
 80057d2:	bd70      	pop	{r4, r5, r6, pc}

080057d4 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80057d4:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 80057d6:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80057d8:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 80057dc:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 80057de:	6890      	ldr	r0, [r2, #8]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80057e0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 80057e2:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80057e6:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 80057e8:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 80057ec:	3008      	adds	r0, #8
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80057ee:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 80057f2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80057f6:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 80057f8:	6a20      	ldr	r0, [r4, #32]
 80057fa:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80057fe:	6220      	str	r0, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8005800:	6891      	ldr	r1, [r2, #8]
 8005802:	4331      	orrs	r1, r6
 8005804:	6091      	str	r1, [r2, #8]
}
 8005806:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800580a:	66dd      	str	r5, [r3, #108]	; 0x6c
}
 800580c:	bc70      	pop	{r4, r5, r6}
 800580e:	4770      	bx	lr

08005810 <R3_1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8005810:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 8005814:	b923      	cbnz	r3, 8005820 <R3_1_BRK_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005816:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005818:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 800581c:	2a02      	cmp	r2, #2
 800581e:	d004      	beq.n	800582a <R3_1_BRK_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8005820:	2301      	movs	r3, #1
 8005822:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
 8005826:	3046      	adds	r0, #70	; 0x46
 8005828:	4770      	bx	lr
{
 800582a:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800582c:	e9d3 4105 	ldrd	r4, r1, [r3, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005830:	e9d3 7602 	ldrd	r7, r6, [r3, #8]
 8005834:	69da      	ldr	r2, [r3, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005836:	691d      	ldr	r5, [r3, #16]
 8005838:	0424      	lsls	r4, r4, #16
 800583a:	0409      	lsls	r1, r1, #16
 800583c:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 800583e:	2301      	movs	r3, #1
 8005840:	61bc      	str	r4, [r7, #24]
}
 8005842:	3046      	adds	r0, #70	; 0x46
 8005844:	61b1      	str	r1, [r6, #24]
 8005846:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 8005848:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
}
 800584c:	bcf0      	pop	{r4, r5, r6, r7}
 800584e:	4770      	bx	lr

08005850 <R3_1_IsOverCurrentOccurred>:
  if (pHandle->OverCurrentFlag == true )
 8005850:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005854:	b90b      	cbnz	r3, 800585a <R3_1_IsOverCurrentOccurred+0xa>
  uint16_t retVal = MC_NO_FAULTS;
 8005856:	4618      	mov	r0, r3
}
 8005858:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 800585a:	2300      	movs	r3, #0
 800585c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    retVal |= MC_BREAK_IN;
 8005860:	2040      	movs	r0, #64	; 0x40
 8005862:	4770      	bx	lr

08005864 <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 8005864:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8005868:	b410      	push	{r4}
  if (pHandle->_Super.RLDetectionMode == false)
 800586a:	2900      	cmp	r1, #0
 800586c:	d134      	bne.n	80058d8 <R3_1_RLDetectionModeEnable+0x74>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800586e:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8005870:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005872:	699a      	ldr	r2, [r3, #24]
 8005874:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005878:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800587c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005886:	6a1a      	ldr	r2, [r3, #32]
 8005888:	f022 0204 	bic.w	r2, r2, #4
 800588c:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800588e:	6359      	str	r1, [r3, #52]	; 0x34
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 8005890:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
 8005894:	2a01      	cmp	r2, #1
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005896:	f103 0118 	add.w	r1, r3, #24
 800589a:	d02b      	beq.n	80058f4 <R3_1_RLDetectionModeEnable+0x90>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800589c:	2a02      	cmp	r2, #2
 800589e:	d10d      	bne.n	80058bc <R3_1_RLDetectionModeEnable+0x58>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80058a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058aa:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80058ac:	6a1a      	ldr	r2, [r3, #32]
 80058ae:	f042 0210 	orr.w	r2, r2, #16
 80058b2:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80058b4:	6a1a      	ldr	r2, [r3, #32]
 80058b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ba:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80058bc:	684a      	ldr	r2, [r1, #4]
 80058be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80058c2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80058c6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80058c8:	6a1a      	ldr	r2, [r3, #32]
 80058ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058ce:	621a      	str	r2, [r3, #32]
 80058d0:	6a1a      	ldr	r2, [r3, #32]
 80058d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d6:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 80058d8:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 80058da:	490f      	ldr	r1, [pc, #60]	; (8005918 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80058dc:	4a0f      	ldr	r2, [pc, #60]	; (800591c <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 80058de:	4c10      	ldr	r4, [pc, #64]	; (8005920 <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 80058e0:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 80058e2:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 80058e4:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80058e6:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 80058ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 80058ee:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 80058f2:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80058fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058fe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005900:	6a1a      	ldr	r2, [r3, #32]
 8005902:	f022 0210 	bic.w	r2, r2, #16
 8005906:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8005908:	6a1a      	ldr	r2, [r3, #32]
 800590a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800590e:	621a      	str	r2, [r3, #32]
}
 8005910:	e7d4      	b.n	80058bc <R3_1_RLDetectionModeEnable+0x58>
 8005912:	bf00      	nop
 8005914:	08005449 	.word	0x08005449
 8005918:	080054e5 	.word	0x080054e5
 800591c:	080053ed 	.word	0x080053ed
 8005920:	0800549d 	.word	0x0800549d

08005924 <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 8005924:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8005928:	2b00      	cmp	r3, #0
 800592a:	d061      	beq.n	80059f0 <R3_1_RLDetectionModeDisable+0xcc>
{
 800592c:	b470      	push	{r4, r5, r6}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800592e:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8005930:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	06d4      	lsls	r4, r2, #27
 8005936:	d5fc      	bpl.n	8005932 <R3_1_RLDetectionModeDisable+0xe>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	06d2      	lsls	r2, r2, #27
 800593c:	d4fc      	bmi.n	8005938 <R3_1_RLDetectionModeDisable+0x14>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 800593e:	f891 206d 	ldrb.w	r2, [r1, #109]	; 0x6d
 8005942:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800594a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800594e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005950:	6a1a      	ldr	r2, [r3, #32]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	621a      	str	r2, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 8005958:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 800595c:	2a01      	cmp	r2, #1
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800595e:	f103 0518 	add.w	r5, r3, #24
 8005962:	d046      	beq.n	80059f2 <R3_1_RLDetectionModeDisable+0xce>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8005964:	2a02      	cmp	r2, #2
 8005966:	d103      	bne.n	8005970 <R3_1_RLDetectionModeDisable+0x4c>
  CLEAR_BIT(TIMx->CCER, Channels);
 8005968:	6a1a      	ldr	r2, [r3, #32]
 800596a:	f022 0204 	bic.w	r2, r2, #4
 800596e:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8005970:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 8005974:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005976:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8005978:	699c      	ldr	r4, [r3, #24]
 800597a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 800597e:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8005982:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8005984:	6a1c      	ldr	r4, [r3, #32]
 8005986:	f044 0410 	orr.w	r4, r4, #16
 800598a:	621c      	str	r4, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 800598c:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
 8005990:	2c01      	cmp	r4, #1
 8005992:	d038      	beq.n	8005a06 <R3_1_RLDetectionModeDisable+0xe2>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8005994:	2c02      	cmp	r4, #2
 8005996:	d103      	bne.n	80059a0 <R3_1_RLDetectionModeDisable+0x7c>
  CLEAR_BIT(TIMx->CCER, Channels);
 8005998:	6a1c      	ldr	r4, [r3, #32]
 800599a:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 800599e:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80059a2:	686c      	ldr	r4, [r5, #4]
 80059a4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80059a8:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80059ac:	606c      	str	r4, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 80059ae:	6a1c      	ldr	r4, [r3, #32]
 80059b0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80059b4:	621c      	str	r4, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 80059b6:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
 80059ba:	2c01      	cmp	r4, #1
 80059bc:	d01e      	beq.n	80059fc <R3_1_RLDetectionModeDisable+0xd8>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 80059be:	2c02      	cmp	r4, #2
 80059c0:	d103      	bne.n	80059ca <R3_1_RLDetectionModeDisable+0xa6>
  CLEAR_BIT(TIMx->CCER, Channels);
 80059c2:	6a1c      	ldr	r4, [r3, #32]
 80059c4:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80059c8:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 80059ca:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80059cc:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 80059ce:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 80059d0:	4c0f      	ldr	r4, [pc, #60]	; (8005a10 <R3_1_RLDetectionModeDisable+0xec>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80059d2:	4a10      	ldr	r2, [pc, #64]	; (8005a14 <R3_1_RLDetectionModeDisable+0xf0>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80059d4:	4e10      	ldr	r6, [pc, #64]	; (8005a18 <R3_1_RLDetectionModeDisable+0xf4>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 80059d6:	4d11      	ldr	r5, [pc, #68]	; (8005a1c <R3_1_RLDetectionModeDisable+0xf8>)
 80059d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059dc:	604b      	str	r3, [r1, #4]
    pHandle->_Super.RLDetectionMode = false;
 80059de:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80059e0:	e9c0 2402 	strd	r2, r4, [r0, #8]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80059e4:	6046      	str	r6, [r0, #4]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 80059e6:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 80059e8:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 80059ec:	bc70      	pop	{r4, r5, r6}
 80059ee:	4770      	bx	lr
 80059f0:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 80059f2:	6a1a      	ldr	r2, [r3, #32]
 80059f4:	f042 0204 	orr.w	r2, r2, #4
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	e7b9      	b.n	8005970 <R3_1_RLDetectionModeDisable+0x4c>
  SET_BIT(TIMx->CCER, Channels);
 80059fc:	6a1c      	ldr	r4, [r3, #32]
 80059fe:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8005a02:	621c      	str	r4, [r3, #32]
}
 8005a04:	e7e1      	b.n	80059ca <R3_1_RLDetectionModeDisable+0xa6>
  SET_BIT(TIMx->CCER, Channels);
 8005a06:	6a1c      	ldr	r4, [r3, #32]
 8005a08:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8005a0c:	621c      	str	r4, [r3, #32]
}
 8005a0e:	e7c7      	b.n	80059a0 <R3_1_RLDetectionModeDisable+0x7c>
 8005a10:	0800535d 	.word	0x0800535d
 8005a14:	080053ed 	.word	0x080053ed
 8005a18:	08005109 	.word	0x08005109
 8005a1c:	0800530d 	.word	0x0800530d

08005a20 <R3_1_RLDetectionModeSetDuty>:
{
 8005a20:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a22:	6f82      	ldr	r2, [r0, #120]	; 0x78
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005a24:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005a28:	6852      	ldr	r2, [r2, #4]
  if (pHandle->_Super.SWerror == 1u)
 8005a2a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8005a2c:	fb01 f104 	mul.w	r1, r1, r4
 8005a30:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8005a32:	2403      	movs	r4, #3
 8005a34:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8005a38:	8641      	strh	r1, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005a3a:	6351      	str	r1, [r2, #52]	; 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8005a3c:	6a12      	ldr	r2, [r2, #32]
}
 8005a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (pHandle->_Super.SWerror == 1u)
 8005a42:	2b01      	cmp	r3, #1
    hAux = MC_FOC_DURATION;
 8005a44:	bf12      	itee	ne
 8005a46:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8005a4a:	2200      	moveq	r2, #0
 8005a4c:	8702      	strheq	r2, [r0, #56]	; 0x38
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop

08005a54 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 8005a54:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005a56:	8b82      	ldrh	r2, [r0, #28]
 8005a58:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005a5a:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8005a5c:	4414      	add	r4, r2
 8005a5e:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005a60:	b14b      	cbz	r3, 8005a76 <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 8005a62:	6a05      	ldr	r5, [r0, #32]
 8005a64:	2300      	movs	r3, #0
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	3301      	adds	r3, #1
 8005a6a:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8005a6e:	8b01      	ldrh	r1, [r0, #24]
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	4291      	cmp	r1, r2
 8005a74:	d8f7      	bhi.n	8005a66 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 8005a76:	2300      	movs	r3, #0
 8005a78:	f364 030f 	bfi	r3, r4, #0, #16
 8005a7c:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8005a80:	2200      	movs	r2, #0
}
 8005a82:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 8005a84:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8005a86:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8005a8a:	4770      	bx	lr

08005a8c <RVBS_Init>:
{
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8005a90:	300c      	adds	r0, #12
 8005a92:	f7fc f8ab 	bl	8001bec <RCM_RegisterRegConv>
 8005a96:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f7ff ffda 	bl	8005a54 <RVBS_Clear>
}
 8005aa0:	bd10      	pop	{r4, pc}
 8005aa2:	bf00      	nop

08005aa4 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8005aa4:	88c3      	ldrh	r3, [r0, #6]
 8005aa6:	8b42      	ldrh	r2, [r0, #26]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d305      	bcc.n	8005ab8 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8005aac:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8005aae:	4298      	cmp	r0, r3
 8005ab0:	bf8c      	ite	hi
 8005ab2:	2004      	movhi	r0, #4
 8005ab4:	2000      	movls	r0, #0
 8005ab6:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8005ab8:	2002      	movs	r0, #2
  }
  return fault;
}
 8005aba:	4770      	bx	lr

08005abc <RVBS_CalcAvVbus>:
{
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005ac0:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005ac4:	f7fc f964 	bl	8001d90 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8005ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005acc:	4298      	cmp	r0, r3
 8005ace:	d01c      	beq.n	8005b0a <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 8005ad0:	6a2f      	ldr	r7, [r5, #32]
 8005ad2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8005ad6:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005ada:	8b2e      	ldrh	r6, [r5, #24]
 8005adc:	b1d6      	cbz	r6, 8005b14 <RVBS_CalcAvVbus+0x58>
 8005ade:	2300      	movs	r3, #0
    wtemp = 0;
 8005ae0:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8005ae2:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	b2d9      	uxtb	r1, r3
 8005aea:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 8005aec:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8005aee:	460b      	mov	r3, r1
 8005af0:	d3f7      	bcc.n	8005ae2 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8005af2:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005af6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005afa:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005afc:	3e01      	subs	r6, #1
 8005afe:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 8005b00:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005b02:	da09      	bge.n	8005b18 <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 8005b04:	3301      	adds	r3, #1
 8005b06:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f7ff ffca 	bl	8005aa4 <RVBS_CheckFaultState>
 8005b10:	8128      	strh	r0, [r5, #8]
}
 8005b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005b14:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 8005b16:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f7ff ffc0 	bl	8005aa4 <RVBS_CheckFaultState>
 8005b24:	8128      	strh	r0, [r5, #8]
}
 8005b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b28 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8005b28:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8005b2a:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8005b2c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8005b30:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8005b34:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8005b36:	4770      	bx	lr

08005b38 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8005b38:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop

08005b40 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8005b40:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop

08005b48 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8005b48:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop

08005b50 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8005b50:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005b54:	8a81      	ldrh	r1, [r0, #20]
{
 8005b56:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 8005b58:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8005b5a:	bfb8      	it	lt
 8005b5c:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005b5e:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005b60:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005b62:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8005b64:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005b66:	429d      	cmp	r5, r3
 8005b68:	d817      	bhi.n	8005b9a <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005b6a:	4299      	cmp	r1, r3
 8005b6c:	bf2c      	ite	cs
 8005b6e:	2300      	movcs	r3, #0
 8005b70:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8005b72:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8005b76:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8005b78:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8005b7a:	bfb8      	it	lt
 8005b7c:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8005b7e:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8005b80:	428d      	cmp	r5, r1
 8005b82:	d300      	bcc.n	8005b86 <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8005b84:	b15b      	cbz	r3, 8005b9e <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8005b86:	4294      	cmp	r4, r2
 8005b88:	d901      	bls.n	8005b8e <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 8005b8a:	3201      	adds	r2, #1
 8005b8c:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005b8e:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8005b90:	1b10      	subs	r0, r2, r4
 8005b92:	bf18      	it	ne
 8005b94:	2001      	movne	r0, #1
 8005b96:	bc30      	pop	{r4, r5}
 8005b98:	4770      	bx	lr
    SpeedError = true;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e7e9      	b.n	8005b72 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 8005b9e:	4294      	cmp	r4, r2
 8005ba0:	bf88      	it	hi
 8005ba2:	2200      	movhi	r2, #0
 8005ba4:	e7f3      	b.n	8005b8e <SPD_IsMecSpeedReliable+0x3e>
 8005ba6:	bf00      	nop

08005ba8 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8005ba8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8005bac:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8005bb0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8005bb4:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8005bb8:	b200      	sxth	r0, r0
 8005bba:	4770      	bx	lr

08005bbc <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8005bbc:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005bbe:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8005bc2:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 8005bc6:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 8005bca:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8005bcc:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005bce:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 8005bd0:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8005bd2:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 8005bd6:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 8005bd8:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8005bda:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 8005bdc:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8005bde:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005be0:	6183      	str	r3, [r0, #24]
}
 8005be2:	4770      	bx	lr

08005be4 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8005be4:	6940      	ldr	r0, [r0, #20]
 8005be6:	4770      	bx	lr

08005be8 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005be8:	7803      	ldrb	r3, [r0, #0]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d000      	beq.n	8005bf0 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8005bee:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8005bf0:	6900      	ldr	r0, [r0, #16]
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	f7ff b856 	b.w	8004ca4 <PID_SetIntegralTerm>

08005bf8 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8005bf8:	6840      	ldr	r0, [r0, #4]
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	bfbc      	itt	lt
 8005bfe:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005c02:	30ff      	addlt	r0, #255	; 0xff
}
 8005c04:	1400      	asrs	r0, r0, #16
 8005c06:	4770      	bx	lr

08005c08 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8005c08:	6880      	ldr	r0, [r0, #8]
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	bfbc      	itt	lt
 8005c0e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005c12:	30ff      	addlt	r0, #255	; 0xff
}
 8005c14:	1400      	asrs	r0, r0, #16
 8005c16:	4770      	bx	lr

08005c18 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005c18:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8005c1a:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005c1c:	60c3      	str	r3, [r0, #12]
}
 8005c1e:	4770      	bx	lr

08005c20 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005c22:	7806      	ldrb	r6, [r0, #0]
{
 8005c24:	4604      	mov	r4, r0
 8005c26:	460d      	mov	r5, r1
 8005c28:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005c2a:	b326      	cbz	r6, 8005c76 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005c2c:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005c2e:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005c30:	2800      	cmp	r0, #0
 8005c32:	bfbc      	itt	lt
 8005c34:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8005c38:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005c3a:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005c3c:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8005c40:	dd01      	ble.n	8005c46 <STC_ExecRamp+0x26>
      AllowedRange = false;
 8005c42:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8005c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8005c46:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 8005c4a:	42a9      	cmp	r1, r5
 8005c4c:	dcf9      	bgt.n	8005c42 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8005c4e:	8c23      	ldrh	r3, [r4, #32]
 8005c50:	429d      	cmp	r5, r3
 8005c52:	da03      	bge.n	8005c5c <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8005c54:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8005c58:	42ab      	cmp	r3, r5
 8005c5a:	dbf2      	blt.n	8005c42 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8005c5c:	b9af      	cbnz	r7, 8005c8a <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005c5e:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005c60:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005c62:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8005c64:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8005c68:	bf0c      	ite	eq
 8005c6a:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8005c6c:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8005c6e:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8005c70:	61a3      	str	r3, [r4, #24]
 8005c72:	2001      	movs	r0, #1
}
 8005c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8005c76:	f7ff ffc7 	bl	8005c08 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8005c7a:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 8005c7c:	42b5      	cmp	r5, r6
 8005c7e:	dce0      	bgt.n	8005c42 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8005c80:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8005c84:	42ab      	cmp	r3, r5
 8005c86:	dcdc      	bgt.n	8005c42 <STC_ExecRamp+0x22>
 8005c88:	e7e8      	b.n	8005c5c <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005c8a:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8005c8c:	4a07      	ldr	r2, [pc, #28]	; (8005cac <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 8005c8e:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8005c90:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 8005c94:	fba2 2303 	umull	r2, r3, r2, r3
 8005c98:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8005c9a:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8005c9c:	1a2d      	subs	r5, r5, r0
 8005c9e:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 8005ca0:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8005ca2:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	61a5      	str	r5, [r4, #24]
}
 8005caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cac:	10624dd3 	.word	0x10624dd3

08005cb0 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005cb4:	6183      	str	r3, [r0, #24]
}
 8005cb6:	4770      	bx	lr

08005cb8 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005cb8:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8005cba:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005cbe:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005cc0:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8005cc2:	2a00      	cmp	r2, #0
 8005cc4:	bf08      	it	eq
 8005cc6:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8005cc8:	2b01      	cmp	r3, #1
{
 8005cca:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8005ccc:	d90c      	bls.n	8005ce8 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8005cce:	6981      	ldr	r1, [r0, #24]
 8005cd0:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	2e00      	cmp	r6, #0
 8005cd6:	60c3      	str	r3, [r0, #12]
 8005cd8:	4630      	mov	r0, r6
 8005cda:	db09      	blt.n	8005cf0 <STC_CalcTorqueReference+0x38>
 8005cdc:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8005cde:	2a01      	cmp	r2, #1
 8005ce0:	d00a      	beq.n	8005cf8 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8005ce2:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8005ce4:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8005ce8:	d012      	beq.n	8005d10 <STC_CalcTorqueReference+0x58>
 8005cea:	2e00      	cmp	r6, #0
 8005cec:	4630      	mov	r0, r6
 8005cee:	daf5      	bge.n	8005cdc <STC_CalcTorqueReference+0x24>
 8005cf0:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8005cf4:	30ff      	adds	r0, #255	; 0xff
 8005cf6:	e7f1      	b.n	8005cdc <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8005cf8:	6960      	ldr	r0, [r4, #20]
 8005cfa:	f7ff ff21 	bl	8005b40 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8005cfe:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8005d00:	b201      	sxth	r1, r0
 8005d02:	6920      	ldr	r0, [r4, #16]
 8005d04:	f7fe ffda 	bl	8004cbc <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005d08:	0403      	lsls	r3, r0, #16
 8005d0a:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005d10:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8005d14:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005d16:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8005d18:	60c3      	str	r3, [r0, #12]
 8005d1a:	e7e0      	b.n	8005cde <STC_CalcTorqueReference+0x26>

08005d1c <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8005d1c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop

08005d24 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8005d24:	8bc0      	ldrh	r0, [r0, #30]
 8005d26:	4770      	bx	lr

08005d28 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8005d28:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop

08005d30 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8005d30:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8005d34:	2200      	movs	r2, #0
 8005d36:	b299      	uxth	r1, r3
 8005d38:	f361 020f 	bfi	r2, r1, #0, #16
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	f363 421f 	bfi	r2, r3, #16, #16
{
 8005d42:	b082      	sub	sp, #8
}
 8005d44:	4610      	mov	r0, r2
 8005d46:	b002      	add	sp, #8
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop

08005d4c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8005d50:	6940      	ldr	r0, [r0, #20]
 8005d52:	f7ff fef5 	bl	8005b40 <SPD_GetAvrgMecSpeedUnit>
 8005d56:	0400      	lsls	r0, r0, #16
 8005d58:	6060      	str	r0, [r4, #4]
}
 8005d5a:	bd10      	pop	{r4, pc}

08005d5c <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8005d60:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop

08005d68 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8005d68:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005d6a:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8005d6c:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 8005d6e:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005d70:	430b      	orrs	r3, r1
 8005d72:	ea23 0202 	bic.w	r2, r3, r2
 8005d76:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8005d78:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 8005d7a:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005d7c:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8005d7e:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8005d80:	d008      	beq.n	8005d94 <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8005d82:	b912      	cbnz	r2, 8005d8a <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8005d84:	4620      	mov	r0, r4
 8005d86:	bc30      	pop	{r4, r5}
 8005d88:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8005d8a:	240a      	movs	r4, #10
 8005d8c:	7004      	strb	r4, [r0, #0]
}
 8005d8e:	4620      	mov	r0, r4
 8005d90:	bc30      	pop	{r4, r5}
 8005d92:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	d1f5      	bne.n	8005d84 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 8005d98:	240b      	movs	r4, #11
 8005d9a:	7004      	strb	r4, [r0, #0]
}
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	bc30      	pop	{r4, r5}
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop

08005da4 <STM_NextState>:
{
 8005da4:	b508      	push	{r3, lr}
 8005da6:	7803      	ldrb	r3, [r0, #0]
 8005da8:	2b14      	cmp	r3, #20
 8005daa:	d810      	bhi.n	8005dce <STM_NextState+0x2a>
 8005dac:	e8df f003 	tbb	[pc, r3]
 8005db0:	240d545e 	.word	0x240d545e
 8005db4:	390d352e 	.word	0x390d352e
 8005db8:	0f0f3f3c 	.word	0x0f0f3f3c
 8005dbc:	47650b44 	.word	0x47650b44
 8005dc0:	504d1b4a 	.word	0x504d1b4a
 8005dc4:	5b          	.byte	0x5b
 8005dc5:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005dc6:	290e      	cmp	r1, #14
 8005dc8:	d013      	beq.n	8005df2 <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 8005dca:	2907      	cmp	r1, #7
 8005dcc:	d011      	beq.n	8005df2 <STM_NextState+0x4e>
 8005dce:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d018      	beq.n	8005e08 <STM_NextState+0x64>
 8005dd6:	2907      	cmp	r1, #7
 8005dd8:	d016      	beq.n	8005e08 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2180      	movs	r1, #128	; 0x80
 8005dde:	f7ff ffc3 	bl	8005d68 <STM_FaultProcessing>
 8005de2:	2000      	movs	r0, #0
}
 8005de4:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8005de6:	2914      	cmp	r1, #20
 8005de8:	d8f1      	bhi.n	8005dce <STM_NextState+0x2a>
 8005dea:	4b26      	ldr	r3, [pc, #152]	; (8005e84 <STM_NextState+0xe0>)
 8005dec:	40cb      	lsrs	r3, r1
 8005dee:	07db      	lsls	r3, r3, #31
 8005df0:	d5ed      	bpl.n	8005dce <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8005df2:	7001      	strb	r1, [r0, #0]
 8005df4:	2001      	movs	r0, #1
}
 8005df6:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8005df8:	2911      	cmp	r1, #17
 8005dfa:	d8ee      	bhi.n	8005dda <STM_NextState+0x36>
 8005dfc:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <STM_NextState+0xe4>)
 8005dfe:	40cb      	lsrs	r3, r1
 8005e00:	07da      	lsls	r2, r3, #31
 8005e02:	d4f6      	bmi.n	8005df2 <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005e04:	2903      	cmp	r1, #3
 8005e06:	d1e8      	bne.n	8005dda <STM_NextState+0x36>
 8005e08:	2000      	movs	r0, #0
}
 8005e0a:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005e0c:	2913      	cmp	r1, #19
 8005e0e:	d0f0      	beq.n	8005df2 <STM_NextState+0x4e>
 8005e10:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8005e14:	2b05      	cmp	r3, #5
 8005e16:	d1dc      	bne.n	8005dd2 <STM_NextState+0x2e>
 8005e18:	e7eb      	b.n	8005df2 <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8005e1a:	1f8b      	subs	r3, r1, #6
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d8d6      	bhi.n	8005dce <STM_NextState+0x2a>
 8005e20:	e7e7      	b.n	8005df2 <STM_NextState+0x4e>
      if ( bState == STOP )
 8005e22:	2908      	cmp	r1, #8
 8005e24:	d1d3      	bne.n	8005dce <STM_NextState+0x2a>
 8005e26:	e7e4      	b.n	8005df2 <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 8005e28:	2909      	cmp	r1, #9
 8005e2a:	d1d0      	bne.n	8005dce <STM_NextState+0x2a>
 8005e2c:	e7e1      	b.n	8005df2 <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8005e2e:	2900      	cmp	r1, #0
 8005e30:	d0df      	beq.n	8005df2 <STM_NextState+0x4e>
 8005e32:	290c      	cmp	r1, #12
 8005e34:	d1cb      	bne.n	8005dce <STM_NextState+0x2a>
 8005e36:	e7dc      	b.n	8005df2 <STM_NextState+0x4e>
      if ( bState == IDLE )
 8005e38:	2900      	cmp	r1, #0
 8005e3a:	d0da      	beq.n	8005df2 <STM_NextState+0x4e>
 8005e3c:	e7c7      	b.n	8005dce <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8005e3e:	2902      	cmp	r1, #2
 8005e40:	d1c3      	bne.n	8005dca <STM_NextState+0x26>
 8005e42:	e7d6      	b.n	8005df2 <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8005e44:	2911      	cmp	r1, #17
 8005e46:	d1c0      	bne.n	8005dca <STM_NextState+0x26>
 8005e48:	e7d3      	b.n	8005df2 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8005e4a:	2904      	cmp	r1, #4
 8005e4c:	d1bd      	bne.n	8005dca <STM_NextState+0x26>
 8005e4e:	e7d0      	b.n	8005df2 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005e50:	1f0b      	subs	r3, r1, #4
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d8b9      	bhi.n	8005dca <STM_NextState+0x26>
 8005e56:	e7cc      	b.n	8005df2 <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8005e58:	2907      	cmp	r1, #7
 8005e5a:	d0ca      	beq.n	8005df2 <STM_NextState+0x4e>
 8005e5c:	f1a1 030d 	sub.w	r3, r1, #13
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d8b4      	bhi.n	8005dce <STM_NextState+0x2a>
 8005e64:	e7c5      	b.n	8005df2 <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8005e66:	2912      	cmp	r1, #18
 8005e68:	d1af      	bne.n	8005dca <STM_NextState+0x26>
 8005e6a:	e7c2      	b.n	8005df2 <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8005e6c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d0be      	beq.n	8005df2 <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 8005e74:	290c      	cmp	r1, #12
 8005e76:	d1ae      	bne.n	8005dd6 <STM_NextState+0x32>
 8005e78:	e7bb      	b.n	8005df2 <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8005e7a:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8005e7e:	2b07      	cmp	r3, #7
 8005e80:	d1a5      	bne.n	8005dce <STM_NextState+0x2a>
 8005e82:	e7b6      	b.n	8005df2 <STM_NextState+0x4e>
 8005e84:	00140080 	.word	0x00140080
 8005e88:	00030092 	.word	0x00030092

08005e8c <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8005e8c:	7800      	ldrb	r0, [r0, #0]
 8005e8e:	4770      	bx	lr

08005e90 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8005e90:	7803      	ldrb	r3, [r0, #0]
 8005e92:	2b0b      	cmp	r3, #11
 8005e94:	d001      	beq.n	8005e9a <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8005e96:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8005e98:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8005e9a:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005e9c:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8005e9e:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8005ea0:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8005ea2:	2001      	movs	r0, #1
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop

08005ea8 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8005ea8:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8005eaa:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8005eac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop

08005eb4 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8005eb4:	f7fe ba56 	b.w	8004364 <FCP_Init>

08005eb8 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005eb8:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 8005ebc:	b16a      	cbz	r2, 8005eda <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8005ebe:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	b1a2      	cbz	r2, 8005ef0 <UFCP_TX_IRQ_Handler+0x38>
 8005ec6:	2a01      	cmp	r2, #1
 8005ec8:	d108      	bne.n	8005edc <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8005eca:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005ecc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8005ed0:	6041      	str	r1, [r0, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8005ed2:	3201      	adds	r2, #1
 8005ed4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8005ed8:	4770      	bx	lr
 8005eda:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005edc:	7d41      	ldrb	r1, [r0, #21]
 8005ede:	3101      	adds	r1, #1
 8005ee0:	428a      	cmp	r2, r1
 8005ee2:	dc07      	bgt.n	8005ef4 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8005ee4:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005ee6:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8005eea:	7d09      	ldrb	r1, [r1, #20]
 8005eec:	6041      	str	r1, [r0, #4]
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005eee:	e7f0      	b.n	8005ed2 <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8005ef0:	7d01      	ldrb	r1, [r0, #20]
        break;
 8005ef2:	e7eb      	b.n	8005ecc <UFCP_TX_IRQ_Handler+0x14>
{
 8005ef4:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005ef6:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 8005efa:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 8005efe:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005f00:	68d1      	ldr	r1, [r2, #12]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005f02:	e9d0 0400 	ldrd	r0, r4, [r0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8005f06:	2500      	movs	r5, #0
 8005f08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005f0c:	60d1      	str	r1, [r2, #12]
 8005f0e:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005f12:	4623      	mov	r3, r4
}
 8005f14:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005f16:	4718      	bx	r3

08005f18 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005f18:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8005f1c:	b10b      	cbz	r3, 8005f22 <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005f1e:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8005f20:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8005f22:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8005f26:	2301      	movs	r3, #1
 8005f28:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005f2c:	68d3      	ldr	r3, [r2, #12]
 8005f2e:	f043 0320 	orr.w	r3, r3, #32
 8005f32:	60d3      	str	r3, [r2, #12]
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8005f34:	2002      	movs	r0, #2
 8005f36:	4770      	bx	lr

08005f38 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8005f3c:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8005f40:	b108      	cbz	r0, 8005f46 <UFCP_Send+0xe>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005f42:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8005f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while ( size-- ) *dest++ = *buffer++;
 8005f46:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8005f48:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8005f4a:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8005f4c:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8005f4e:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8005f52:	b34b      	cbz	r3, 8005fa8 <UFCP_Send+0x70>
 8005f54:	f104 011a 	add.w	r1, r4, #26
 8005f58:	1d17      	adds	r7, r2, #4
 8005f5a:	45bc      	cmp	ip, r7
 8005f5c:	bf38      	it	cc
 8005f5e:	428a      	cmpcc	r2, r1
 8005f60:	d336      	bcc.n	8005fd0 <UFCP_Send+0x98>
 8005f62:	2807      	cmp	r0, #7
 8005f64:	d934      	bls.n	8005fd0 <UFCP_Send+0x98>
 8005f66:	0899      	lsrs	r1, r3, #2
 8005f68:	3901      	subs	r1, #1
 8005f6a:	b2c9      	uxtb	r1, r1
 8005f6c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8005f70:	4665      	mov	r5, ip
 8005f72:	4611      	mov	r1, r2
 8005f74:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f78:	f845 6b04 	str.w	r6, [r5], #4
 8005f7c:	42b9      	cmp	r1, r7
 8005f7e:	d1f9      	bne.n	8005f74 <UFCP_Send+0x3c>
 8005f80:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8005f84:	1a40      	subs	r0, r0, r1
 8005f86:	428b      	cmp	r3, r1
 8005f88:	b2c0      	uxtb	r0, r0
 8005f8a:	eb02 0601 	add.w	r6, r2, r1
 8005f8e:	eb0c 0501 	add.w	r5, ip, r1
 8005f92:	d009      	beq.n	8005fa8 <UFCP_Send+0x70>
 8005f94:	5c53      	ldrb	r3, [r2, r1]
 8005f96:	f80c 3001 	strb.w	r3, [ip, r1]
 8005f9a:	b128      	cbz	r0, 8005fa8 <UFCP_Send+0x70>
 8005f9c:	7873      	ldrb	r3, [r6, #1]
 8005f9e:	706b      	strb	r3, [r5, #1]
 8005fa0:	2801      	cmp	r0, #1
 8005fa2:	d001      	beq.n	8005fa8 <UFCP_Send+0x70>
 8005fa4:	78b3      	ldrb	r3, [r6, #2]
 8005fa6:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005fa8:	f104 0014 	add.w	r0, r4, #20
 8005fac:	f7fe f9ee 	bl	800438c <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8005fb0:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005fb4:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8005fb8:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8005fba:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8005fbc:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8005fc0:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005fc4:	68d3      	ldr	r3, [r2, #12]
 8005fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fca:	60d3      	str	r3, [r2, #12]
 8005fcc:	2002      	movs	r0, #2
}
 8005fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	4410      	add	r0, r2
 8005fd4:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8005fd8:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005fdc:	f803 1f01 	strb.w	r1, [r3, #1]!
 8005fe0:	4282      	cmp	r2, r0
 8005fe2:	d1f9      	bne.n	8005fd8 <UFCP_Send+0xa0>
 8005fe4:	e7e0      	b.n	8005fa8 <UFCP_Send+0x70>
 8005fe6:	bf00      	nop

08005fe8 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005fe8:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8005fec:	b90b      	cbnz	r3, 8005ff2 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8005fee:	482c      	ldr	r0, [pc, #176]	; (80060a0 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8005ff0:	4770      	bx	lr
{
 8005ff2:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8005ff4:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8005ffc:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 8005ffe:	b1d3      	cbz	r3, 8006036 <UFCP_RX_IRQ_Handler+0x4e>
 8006000:	2b01      	cmp	r3, #1
 8006002:	d00d      	beq.n	8006020 <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8006004:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8006008:	3101      	adds	r1, #1
 800600a:	428b      	cmp	r3, r1
 800600c:	dc1d      	bgt.n	800604a <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800600e:	18c1      	adds	r1, r0, r3
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006010:	4823      	ldr	r0, [pc, #140]	; (80060a0 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006012:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8006016:	3301      	adds	r3, #1
 8006018:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 800601c:	b003      	add	sp, #12
 800601e:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8006020:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 8006022:	bf54      	ite	pl
 8006024:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8006026:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 8006028:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 800602c:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006030:	481b      	ldr	r0, [pc, #108]	; (80060a0 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8006032:	b003      	add	sp, #12
 8006034:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006036:	8a01      	ldrh	r1, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 8006038:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 800603c:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800603e:	8241      	strh	r1, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 8006040:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8006044:	4817      	ldr	r0, [pc, #92]	; (80060a4 <UFCP_RX_IRQ_Handler+0xbc>)
}
 8006046:	b003      	add	sp, #12
 8006048:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800604a:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800604e:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006052:	68cb      	ldr	r3, [r1, #12]
          pBaseHandle->RxTimeoutCountdown = 0;
 8006054:	2200      	movs	r2, #0
 8006056:	f023 0320 	bic.w	r3, r3, #32
 800605a:	8242      	strh	r2, [r0, #18]
 800605c:	60cb      	str	r3, [r1, #12]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800605e:	3099      	adds	r0, #153	; 0x99
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006060:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8006064:	f7fe f992 	bl	800438c <FCP_CalcCRC>
 8006068:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800606c:	4283      	cmp	r3, r0
 800606e:	d10a      	bne.n	8006086 <UFCP_RX_IRQ_Handler+0x9e>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8006070:	6820      	ldr	r0, [r4, #0]
 8006072:	68a5      	ldr	r5, [r4, #8]
 8006074:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8006078:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 800607c:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8006080:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8006082:	4809      	ldr	r0, [pc, #36]	; (80060a8 <UFCP_RX_IRQ_Handler+0xc0>)
 8006084:	e7d5      	b.n	8006032 <UFCP_RX_IRQ_Handler+0x4a>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006086:	4620      	mov	r0, r4
 8006088:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 800608a:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800608c:	f10d 0207 	add.w	r2, sp, #7
 8006090:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 8006092:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006096:	f7ff ff4f 	bl	8005f38 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800609a:	4803      	ldr	r0, [pc, #12]	; (80060a8 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 800609c:	e7c9      	b.n	8006032 <UFCP_RX_IRQ_Handler+0x4a>
 800609e:	bf00      	nop
 80060a0:	08006440 	.word	0x08006440
 80060a4:	08006442 	.word	0x08006442
 80060a8:	08006444 	.word	0x08006444

080060ac <UFCP_OVR_IRQ_Handler>:
{
 80060ac:	b510      	push	{r4, lr}
 80060ae:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 80060b0:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80060b2:	2301      	movs	r3, #1
 80060b4:	f10d 0207 	add.w	r2, sp, #7
 80060b8:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 80060ba:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80060be:	f7ff ff3b 	bl	8005f38 <UFCP_Send>
}
 80060c2:	b002      	add	sp, #8
 80060c4:	bd10      	pop	{r4, pc}
 80060c6:	bf00      	nop

080060c8 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 80060ce:	4770      	bx	lr

080060d0 <RUC_SetPhaseDurationms>:
 80060d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80060d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060d8:	818a      	strh	r2, [r1, #12]
 80060da:	4770      	bx	lr

080060dc <RUC_SetPhaseFinalMecSpeedUnit>:
 80060dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80060e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060e4:	81ca      	strh	r2, [r1, #14]
 80060e6:	4770      	bx	lr

080060e8 <RUC_SetPhaseFinalTorque>:
 80060e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80060ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060f0:	820a      	strh	r2, [r1, #16]
 80060f2:	4770      	bx	lr

080060f4 <RUC_GetPhaseDurationms>:
 80060f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80060f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060fc:	8988      	ldrh	r0, [r1, #12]
 80060fe:	4770      	bx	lr

08006100 <RUC_GetPhaseFinalMecSpeedUnit>:
 8006100:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006104:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006108:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop

08006110 <RUC_GetPhaseFinalTorque>:
 8006110:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006114:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006118:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop

08006120 <RUC_GetNumberOfPhases>:
 8006120:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop

08006128 <__libc_init_array>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4d0d      	ldr	r5, [pc, #52]	; (8006160 <__libc_init_array+0x38>)
 800612c:	4c0d      	ldr	r4, [pc, #52]	; (8006164 <__libc_init_array+0x3c>)
 800612e:	1b64      	subs	r4, r4, r5
 8006130:	10a4      	asrs	r4, r4, #2
 8006132:	2600      	movs	r6, #0
 8006134:	42a6      	cmp	r6, r4
 8006136:	d109      	bne.n	800614c <__libc_init_array+0x24>
 8006138:	4d0b      	ldr	r5, [pc, #44]	; (8006168 <__libc_init_array+0x40>)
 800613a:	4c0c      	ldr	r4, [pc, #48]	; (800616c <__libc_init_array+0x44>)
 800613c:	f000 f820 	bl	8006180 <_init>
 8006140:	1b64      	subs	r4, r4, r5
 8006142:	10a4      	asrs	r4, r4, #2
 8006144:	2600      	movs	r6, #0
 8006146:	42a6      	cmp	r6, r4
 8006148:	d105      	bne.n	8006156 <__libc_init_array+0x2e>
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006150:	4798      	blx	r3
 8006152:	3601      	adds	r6, #1
 8006154:	e7ee      	b.n	8006134 <__libc_init_array+0xc>
 8006156:	f855 3b04 	ldr.w	r3, [r5], #4
 800615a:	4798      	blx	r3
 800615c:	3601      	adds	r6, #1
 800615e:	e7f2      	b.n	8006146 <__libc_init_array+0x1e>
 8006160:	08006450 	.word	0x08006450
 8006164:	08006450 	.word	0x08006450
 8006168:	08006450 	.word	0x08006450
 800616c:	08006454 	.word	0x08006454

08006170 <memset>:
 8006170:	4402      	add	r2, r0
 8006172:	4603      	mov	r3, r0
 8006174:	4293      	cmp	r3, r2
 8006176:	d100      	bne.n	800617a <memset+0xa>
 8006178:	4770      	bx	lr
 800617a:	f803 1b01 	strb.w	r1, [r3], #1
 800617e:	e7f9      	b.n	8006174 <memset+0x4>

08006180 <_init>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr

0800618c <_fini>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	bf00      	nop
 8006190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006192:	bc08      	pop	{r3}
 8006194:	469e      	mov	lr, r3
 8006196:	4770      	bx	lr
